
STM32F103C8T6_Joystick.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003330  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000002c  0800343c  0800343c  0000443c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003468  08003468  0000500c  2**0
                  CONTENTS
  4 .ARM          00000000  08003468  08003468  0000500c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08003468  08003468  0000500c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003468  08003468  00004468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800346c  0800346c  0000446c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08003470  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a0  2000000c  0800347c  0000500c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200001ac  0800347c  000051ac  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000500c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000090f3  00000000  00000000  00005035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001de5  00000000  00000000  0000e128  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000848  00000000  00000000  0000ff10  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000640  00000000  00000000  00010758  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017086  00000000  00000000  00010d98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000bb58  00000000  00000000  00027e1e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00083616  00000000  00000000  00033976  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b6f8c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001f1c  00000000  00000000  000b6fd0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005d  00000000  00000000  000b8eec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08003424 	.word	0x08003424

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08003424 	.word	0x08003424

0800014c <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
DMA_HandleTypeDef hdma_adc1;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 800014c:	b580      	push	{r7, lr}
 800014e:	b084      	sub	sp, #16
 8000150:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000152:	1d3b      	adds	r3, r7, #4
 8000154:	2200      	movs	r2, #0
 8000156:	601a      	str	r2, [r3, #0]
 8000158:	605a      	str	r2, [r3, #4]
 800015a:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800015c:	4b18      	ldr	r3, [pc, #96]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800015e:	4a19      	ldr	r2, [pc, #100]	@ (80001c4 <MX_ADC1_Init+0x78>)
 8000160:	601a      	str	r2, [r3, #0]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000162:	4b17      	ldr	r3, [pc, #92]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000164:	2200      	movs	r2, #0
 8000166:	609a      	str	r2, [r3, #8]
  hadc1.Init.ContinuousConvMode = ENABLE;
 8000168:	4b15      	ldr	r3, [pc, #84]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800016a:	2201      	movs	r2, #1
 800016c:	731a      	strb	r2, [r3, #12]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800016e:	4b14      	ldr	r3, [pc, #80]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000170:	2200      	movs	r2, #0
 8000172:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000174:	4b12      	ldr	r3, [pc, #72]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000176:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 800017a:	61da      	str	r2, [r3, #28]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800017c:	4b10      	ldr	r3, [pc, #64]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800017e:	2200      	movs	r2, #0
 8000180:	605a      	str	r2, [r3, #4]
  hadc1.Init.NbrOfConversion = 1;
 8000182:	4b0f      	ldr	r3, [pc, #60]	@ (80001c0 <MX_ADC1_Init+0x74>)
 8000184:	2201      	movs	r2, #1
 8000186:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000188:	480d      	ldr	r0, [pc, #52]	@ (80001c0 <MX_ADC1_Init+0x74>)
 800018a:	f000 fc5f 	bl	8000a4c <HAL_ADC_Init>
 800018e:	4603      	mov	r3, r0
 8000190:	2b00      	cmp	r3, #0
 8000192:	d001      	beq.n	8000198 <MX_ADC1_Init+0x4c>
  {
    Error_Handler();
 8000194:	f000 fa6b 	bl	800066e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000198:	2304      	movs	r3, #4
 800019a:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800019c:	2301      	movs	r3, #1
 800019e:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 80001a0:	2307      	movs	r3, #7
 80001a2:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80001a4:	1d3b      	adds	r3, r7, #4
 80001a6:	4619      	mov	r1, r3
 80001a8:	4805      	ldr	r0, [pc, #20]	@ (80001c0 <MX_ADC1_Init+0x74>)
 80001aa:	f000 fed9 	bl	8000f60 <HAL_ADC_ConfigChannel>
 80001ae:	4603      	mov	r3, r0
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	d001      	beq.n	80001b8 <MX_ADC1_Init+0x6c>
  {
    Error_Handler();
 80001b4:	f000 fa5b 	bl	800066e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80001b8:	bf00      	nop
 80001ba:	3710      	adds	r7, #16
 80001bc:	46bd      	mov	sp, r7
 80001be:	bd80      	pop	{r7, pc}
 80001c0:	20000028 	.word	0x20000028
 80001c4:	40012400 	.word	0x40012400

080001c8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80001c8:	b580      	push	{r7, lr}
 80001ca:	b084      	sub	sp, #16
 80001cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80001ce:	1d3b      	adds	r3, r7, #4
 80001d0:	2200      	movs	r2, #0
 80001d2:	601a      	str	r2, [r3, #0]
 80001d4:	605a      	str	r2, [r3, #4]
 80001d6:	609a      	str	r2, [r3, #8]

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80001d8:	4b18      	ldr	r3, [pc, #96]	@ (800023c <MX_ADC2_Init+0x74>)
 80001da:	4a19      	ldr	r2, [pc, #100]	@ (8000240 <MX_ADC2_Init+0x78>)
 80001dc:	601a      	str	r2, [r3, #0]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80001de:	4b17      	ldr	r3, [pc, #92]	@ (800023c <MX_ADC2_Init+0x74>)
 80001e0:	2200      	movs	r2, #0
 80001e2:	609a      	str	r2, [r3, #8]
  hadc2.Init.ContinuousConvMode = ENABLE;
 80001e4:	4b15      	ldr	r3, [pc, #84]	@ (800023c <MX_ADC2_Init+0x74>)
 80001e6:	2201      	movs	r2, #1
 80001e8:	731a      	strb	r2, [r3, #12]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80001ea:	4b14      	ldr	r3, [pc, #80]	@ (800023c <MX_ADC2_Init+0x74>)
 80001ec:	2200      	movs	r2, #0
 80001ee:	751a      	strb	r2, [r3, #20]
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80001f0:	4b12      	ldr	r3, [pc, #72]	@ (800023c <MX_ADC2_Init+0x74>)
 80001f2:	f44f 2260 	mov.w	r2, #917504	@ 0xe0000
 80001f6:	61da      	str	r2, [r3, #28]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80001f8:	4b10      	ldr	r3, [pc, #64]	@ (800023c <MX_ADC2_Init+0x74>)
 80001fa:	2200      	movs	r2, #0
 80001fc:	605a      	str	r2, [r3, #4]
  hadc2.Init.NbrOfConversion = 1;
 80001fe:	4b0f      	ldr	r3, [pc, #60]	@ (800023c <MX_ADC2_Init+0x74>)
 8000200:	2201      	movs	r2, #1
 8000202:	611a      	str	r2, [r3, #16]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000204:	480d      	ldr	r0, [pc, #52]	@ (800023c <MX_ADC2_Init+0x74>)
 8000206:	f000 fc21 	bl	8000a4c <HAL_ADC_Init>
 800020a:	4603      	mov	r3, r0
 800020c:	2b00      	cmp	r3, #0
 800020e:	d001      	beq.n	8000214 <MX_ADC2_Init+0x4c>
  {
    Error_Handler();
 8000210:	f000 fa2d 	bl	800066e <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_5;
 8000214:	2305      	movs	r3, #5
 8000216:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000218:	2301      	movs	r3, #1
 800021a:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_239CYCLES_5;
 800021c:	2307      	movs	r3, #7
 800021e:	60fb      	str	r3, [r7, #12]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 8000220:	1d3b      	adds	r3, r7, #4
 8000222:	4619      	mov	r1, r3
 8000224:	4805      	ldr	r0, [pc, #20]	@ (800023c <MX_ADC2_Init+0x74>)
 8000226:	f000 fe9b 	bl	8000f60 <HAL_ADC_ConfigChannel>
 800022a:	4603      	mov	r3, r0
 800022c:	2b00      	cmp	r3, #0
 800022e:	d001      	beq.n	8000234 <MX_ADC2_Init+0x6c>
  {
    Error_Handler();
 8000230:	f000 fa1d 	bl	800066e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000234:	bf00      	nop
 8000236:	3710      	adds	r7, #16
 8000238:	46bd      	mov	sp, r7
 800023a:	bd80      	pop	{r7, pc}
 800023c:	20000058 	.word	0x20000058
 8000240:	40012800 	.word	0x40012800

08000244 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000244:	b580      	push	{r7, lr}
 8000246:	b08a      	sub	sp, #40	@ 0x28
 8000248:	af00      	add	r7, sp, #0
 800024a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800024c:	f107 0318 	add.w	r3, r7, #24
 8000250:	2200      	movs	r2, #0
 8000252:	601a      	str	r2, [r3, #0]
 8000254:	605a      	str	r2, [r3, #4]
 8000256:	609a      	str	r2, [r3, #8]
 8000258:	60da      	str	r2, [r3, #12]
  if(adcHandle->Instance==ADC1)
 800025a:	687b      	ldr	r3, [r7, #4]
 800025c:	681b      	ldr	r3, [r3, #0]
 800025e:	4a3c      	ldr	r2, [pc, #240]	@ (8000350 <HAL_ADC_MspInit+0x10c>)
 8000260:	4293      	cmp	r3, r2
 8000262:	d14a      	bne.n	80002fa <HAL_ADC_MspInit+0xb6>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000264:	4b3b      	ldr	r3, [pc, #236]	@ (8000354 <HAL_ADC_MspInit+0x110>)
 8000266:	699b      	ldr	r3, [r3, #24]
 8000268:	4a3a      	ldr	r2, [pc, #232]	@ (8000354 <HAL_ADC_MspInit+0x110>)
 800026a:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800026e:	6193      	str	r3, [r2, #24]
 8000270:	4b38      	ldr	r3, [pc, #224]	@ (8000354 <HAL_ADC_MspInit+0x110>)
 8000272:	699b      	ldr	r3, [r3, #24]
 8000274:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8000278:	617b      	str	r3, [r7, #20]
 800027a:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800027c:	4b35      	ldr	r3, [pc, #212]	@ (8000354 <HAL_ADC_MspInit+0x110>)
 800027e:	699b      	ldr	r3, [r3, #24]
 8000280:	4a34      	ldr	r2, [pc, #208]	@ (8000354 <HAL_ADC_MspInit+0x110>)
 8000282:	f043 0304 	orr.w	r3, r3, #4
 8000286:	6193      	str	r3, [r2, #24]
 8000288:	4b32      	ldr	r3, [pc, #200]	@ (8000354 <HAL_ADC_MspInit+0x110>)
 800028a:	699b      	ldr	r3, [r3, #24]
 800028c:	f003 0304 	and.w	r3, r3, #4
 8000290:	613b      	str	r3, [r7, #16]
 8000292:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000294:	2310      	movs	r3, #16
 8000296:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000298:	2303      	movs	r3, #3
 800029a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800029c:	f107 0318 	add.w	r3, r7, #24
 80002a0:	4619      	mov	r1, r3
 80002a2:	482d      	ldr	r0, [pc, #180]	@ (8000358 <HAL_ADC_MspInit+0x114>)
 80002a4:	f001 fc06 	bl	8001ab4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel1;
 80002a8:	4b2c      	ldr	r3, [pc, #176]	@ (800035c <HAL_ADC_MspInit+0x118>)
 80002aa:	4a2d      	ldr	r2, [pc, #180]	@ (8000360 <HAL_ADC_MspInit+0x11c>)
 80002ac:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80002ae:	4b2b      	ldr	r3, [pc, #172]	@ (800035c <HAL_ADC_MspInit+0x118>)
 80002b0:	2200      	movs	r2, #0
 80002b2:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80002b4:	4b29      	ldr	r3, [pc, #164]	@ (800035c <HAL_ADC_MspInit+0x118>)
 80002b6:	2200      	movs	r2, #0
 80002b8:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80002ba:	4b28      	ldr	r3, [pc, #160]	@ (800035c <HAL_ADC_MspInit+0x118>)
 80002bc:	2280      	movs	r2, #128	@ 0x80
 80002be:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80002c0:	4b26      	ldr	r3, [pc, #152]	@ (800035c <HAL_ADC_MspInit+0x118>)
 80002c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80002c6:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 80002c8:	4b24      	ldr	r3, [pc, #144]	@ (800035c <HAL_ADC_MspInit+0x118>)
 80002ca:	f44f 6280 	mov.w	r2, #1024	@ 0x400
 80002ce:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80002d0:	4b22      	ldr	r3, [pc, #136]	@ (800035c <HAL_ADC_MspInit+0x118>)
 80002d2:	2220      	movs	r2, #32
 80002d4:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80002d6:	4b21      	ldr	r3, [pc, #132]	@ (800035c <HAL_ADC_MspInit+0x118>)
 80002d8:	2200      	movs	r2, #0
 80002da:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80002dc:	481f      	ldr	r0, [pc, #124]	@ (800035c <HAL_ADC_MspInit+0x118>)
 80002de:	f001 f947 	bl	8001570 <HAL_DMA_Init>
 80002e2:	4603      	mov	r3, r0
 80002e4:	2b00      	cmp	r3, #0
 80002e6:	d001      	beq.n	80002ec <HAL_ADC_MspInit+0xa8>
    {
      Error_Handler();
 80002e8:	f000 f9c1 	bl	800066e <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80002ec:	687b      	ldr	r3, [r7, #4]
 80002ee:	4a1b      	ldr	r2, [pc, #108]	@ (800035c <HAL_ADC_MspInit+0x118>)
 80002f0:	621a      	str	r2, [r3, #32]
 80002f2:	4a1a      	ldr	r2, [pc, #104]	@ (800035c <HAL_ADC_MspInit+0x118>)
 80002f4:	687b      	ldr	r3, [r7, #4]
 80002f6:	6253      	str	r3, [r2, #36]	@ 0x24

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80002f8:	e026      	b.n	8000348 <HAL_ADC_MspInit+0x104>
  else if(adcHandle->Instance==ADC2)
 80002fa:	687b      	ldr	r3, [r7, #4]
 80002fc:	681b      	ldr	r3, [r3, #0]
 80002fe:	4a19      	ldr	r2, [pc, #100]	@ (8000364 <HAL_ADC_MspInit+0x120>)
 8000300:	4293      	cmp	r3, r2
 8000302:	d121      	bne.n	8000348 <HAL_ADC_MspInit+0x104>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8000304:	4b13      	ldr	r3, [pc, #76]	@ (8000354 <HAL_ADC_MspInit+0x110>)
 8000306:	699b      	ldr	r3, [r3, #24]
 8000308:	4a12      	ldr	r2, [pc, #72]	@ (8000354 <HAL_ADC_MspInit+0x110>)
 800030a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800030e:	6193      	str	r3, [r2, #24]
 8000310:	4b10      	ldr	r3, [pc, #64]	@ (8000354 <HAL_ADC_MspInit+0x110>)
 8000312:	699b      	ldr	r3, [r3, #24]
 8000314:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000318:	60fb      	str	r3, [r7, #12]
 800031a:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800031c:	4b0d      	ldr	r3, [pc, #52]	@ (8000354 <HAL_ADC_MspInit+0x110>)
 800031e:	699b      	ldr	r3, [r3, #24]
 8000320:	4a0c      	ldr	r2, [pc, #48]	@ (8000354 <HAL_ADC_MspInit+0x110>)
 8000322:	f043 0304 	orr.w	r3, r3, #4
 8000326:	6193      	str	r3, [r2, #24]
 8000328:	4b0a      	ldr	r3, [pc, #40]	@ (8000354 <HAL_ADC_MspInit+0x110>)
 800032a:	699b      	ldr	r3, [r3, #24]
 800032c:	f003 0304 	and.w	r3, r3, #4
 8000330:	60bb      	str	r3, [r7, #8]
 8000332:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000334:	2320      	movs	r3, #32
 8000336:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000338:	2303      	movs	r3, #3
 800033a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800033c:	f107 0318 	add.w	r3, r7, #24
 8000340:	4619      	mov	r1, r3
 8000342:	4805      	ldr	r0, [pc, #20]	@ (8000358 <HAL_ADC_MspInit+0x114>)
 8000344:	f001 fbb6 	bl	8001ab4 <HAL_GPIO_Init>
}
 8000348:	bf00      	nop
 800034a:	3728      	adds	r7, #40	@ 0x28
 800034c:	46bd      	mov	sp, r7
 800034e:	bd80      	pop	{r7, pc}
 8000350:	40012400 	.word	0x40012400
 8000354:	40021000 	.word	0x40021000
 8000358:	40010800 	.word	0x40010800
 800035c:	20000088 	.word	0x20000088
 8000360:	40020008 	.word	0x40020008
 8000364:	40012800 	.word	0x40012800

08000368 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000368:	b580      	push	{r7, lr}
 800036a:	b082      	sub	sp, #8
 800036c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800036e:	4b14      	ldr	r3, [pc, #80]	@ (80003c0 <MX_DMA_Init+0x58>)
 8000370:	695b      	ldr	r3, [r3, #20]
 8000372:	4a13      	ldr	r2, [pc, #76]	@ (80003c0 <MX_DMA_Init+0x58>)
 8000374:	f043 0301 	orr.w	r3, r3, #1
 8000378:	6153      	str	r3, [r2, #20]
 800037a:	4b11      	ldr	r3, [pc, #68]	@ (80003c0 <MX_DMA_Init+0x58>)
 800037c:	695b      	ldr	r3, [r3, #20]
 800037e:	f003 0301 	and.w	r3, r3, #1
 8000382:	607b      	str	r3, [r7, #4]
 8000384:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8000386:	2200      	movs	r2, #0
 8000388:	2100      	movs	r1, #0
 800038a:	200b      	movs	r0, #11
 800038c:	f001 f8b9 	bl	8001502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8000390:	200b      	movs	r0, #11
 8000392:	f001 f8d2 	bl	800153a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_IRQn, 0, 0);
 8000396:	2200      	movs	r2, #0
 8000398:	2100      	movs	r1, #0
 800039a:	200e      	movs	r0, #14
 800039c:	f001 f8b1 	bl	8001502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_IRQn);
 80003a0:	200e      	movs	r0, #14
 80003a2:	f001 f8ca 	bl	800153a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel5_IRQn, 0, 0);
 80003a6:	2200      	movs	r2, #0
 80003a8:	2100      	movs	r1, #0
 80003aa:	200f      	movs	r0, #15
 80003ac:	f001 f8a9 	bl	8001502 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel5_IRQn);
 80003b0:	200f      	movs	r0, #15
 80003b2:	f001 f8c2 	bl	800153a <HAL_NVIC_EnableIRQ>

}
 80003b6:	bf00      	nop
 80003b8:	3708      	adds	r7, #8
 80003ba:	46bd      	mov	sp, r7
 80003bc:	bd80      	pop	{r7, pc}
 80003be:	bf00      	nop
 80003c0:	40021000 	.word	0x40021000

080003c4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80003c4:	b480      	push	{r7}
 80003c6:	b083      	sub	sp, #12
 80003c8:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80003ca:	4b0e      	ldr	r3, [pc, #56]	@ (8000404 <MX_GPIO_Init+0x40>)
 80003cc:	699b      	ldr	r3, [r3, #24]
 80003ce:	4a0d      	ldr	r2, [pc, #52]	@ (8000404 <MX_GPIO_Init+0x40>)
 80003d0:	f043 0320 	orr.w	r3, r3, #32
 80003d4:	6193      	str	r3, [r2, #24]
 80003d6:	4b0b      	ldr	r3, [pc, #44]	@ (8000404 <MX_GPIO_Init+0x40>)
 80003d8:	699b      	ldr	r3, [r3, #24]
 80003da:	f003 0320 	and.w	r3, r3, #32
 80003de:	607b      	str	r3, [r7, #4]
 80003e0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80003e2:	4b08      	ldr	r3, [pc, #32]	@ (8000404 <MX_GPIO_Init+0x40>)
 80003e4:	699b      	ldr	r3, [r3, #24]
 80003e6:	4a07      	ldr	r2, [pc, #28]	@ (8000404 <MX_GPIO_Init+0x40>)
 80003e8:	f043 0304 	orr.w	r3, r3, #4
 80003ec:	6193      	str	r3, [r2, #24]
 80003ee:	4b05      	ldr	r3, [pc, #20]	@ (8000404 <MX_GPIO_Init+0x40>)
 80003f0:	699b      	ldr	r3, [r3, #24]
 80003f2:	f003 0304 	and.w	r3, r3, #4
 80003f6:	603b      	str	r3, [r7, #0]
 80003f8:	683b      	ldr	r3, [r7, #0]

}
 80003fa:	bf00      	nop
 80003fc:	370c      	adds	r7, #12
 80003fe:	46bd      	mov	sp, r7
 8000400:	bc80      	pop	{r7}
 8000402:	4770      	bx	lr
 8000404:	40021000 	.word	0x40021000

08000408 <HAL_ADC_ConvCpltCallback>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc) {
 8000408:	b580      	push	{r7, lr}
 800040a:	b082      	sub	sp, #8
 800040c:	af00      	add	r7, sp, #0
 800040e:	6078      	str	r0, [r7, #4]
	adcValue_Direction[0] = HAL_ADC_GetValue(&hadc2);
 8000410:	4805      	ldr	r0, [pc, #20]	@ (8000428 <HAL_ADC_ConvCpltCallback+0x20>)
 8000412:	f000 fd87 	bl	8000f24 <HAL_ADC_GetValue>
 8000416:	4603      	mov	r3, r0
 8000418:	b29a      	uxth	r2, r3
 800041a:	4b04      	ldr	r3, [pc, #16]	@ (800042c <HAL_ADC_ConvCpltCallback+0x24>)
 800041c:	801a      	strh	r2, [r3, #0]
}
 800041e:	bf00      	nop
 8000420:	3708      	adds	r7, #8
 8000422:	46bd      	mov	sp, r7
 8000424:	bd80      	pop	{r7, pc}
 8000426:	bf00      	nop
 8000428:	20000058 	.word	0x20000058
 800042c:	200000d0 	.word	0x200000d0

08000430 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8000430:	b580      	push	{r7, lr}
 8000432:	b082      	sub	sp, #8
 8000434:	af00      	add	r7, sp, #0
 8000436:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit_IT(&huart1, transmit_data, 1);
 8000438:	2201      	movs	r2, #1
 800043a:	4904      	ldr	r1, [pc, #16]	@ (800044c <HAL_UART_RxCpltCallback+0x1c>)
 800043c:	4804      	ldr	r0, [pc, #16]	@ (8000450 <HAL_UART_RxCpltCallback+0x20>)
 800043e:	f002 fa5e 	bl	80028fe <HAL_UART_Transmit_IT>
}
 8000442:	bf00      	nop
 8000444:	3708      	adds	r7, #8
 8000446:	46bd      	mov	sp, r7
 8000448:	bd80      	pop	{r7, pc}
 800044a:	bf00      	nop
 800044c:	200000d4 	.word	0x200000d4
 8000450:	200000d8 	.word	0x200000d8

08000454 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000454:	b580      	push	{r7, lr}
 8000456:	b082      	sub	sp, #8
 8000458:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800045a:	f000 fa95 	bl	8000988 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800045e:	f000 f8ab 	bl	80005b8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000462:	f7ff ffaf 	bl	80003c4 <MX_GPIO_Init>
  MX_DMA_Init();
 8000466:	f7ff ff7f 	bl	8000368 <MX_DMA_Init>
  MX_ADC1_Init();
 800046a:	f7ff fe6f 	bl	800014c <MX_ADC1_Init>
  MX_ADC2_Init();
 800046e:	f7ff feab 	bl	80001c8 <MX_ADC2_Init>
  MX_USART1_UART_Init();
 8000472:	f000 f98f 	bl	8000794 <MX_USART1_UART_Init>
  /* USER CODE BEGIN 2 */
  HAL_ADC_Start_DMA(&hadc1, adcValue_Speed, 1);
 8000476:	2201      	movs	r2, #1
 8000478:	4949      	ldr	r1, [pc, #292]	@ (80005a0 <main+0x14c>)
 800047a:	484a      	ldr	r0, [pc, #296]	@ (80005a4 <main+0x150>)
 800047c:	f000 fc74 	bl	8000d68 <HAL_ADC_Start_DMA>
  HAL_ADC_Start_IT(&hadc2);
 8000480:	4849      	ldr	r0, [pc, #292]	@ (80005a8 <main+0x154>)
 8000482:	f000 fbbb 	bl	8000bfc <HAL_ADC_Start_IT>
  uint8_t forward_stop_backward;
  uint8_t left_straight_right;

  while (1)
  {
	HAL_UART_Transmit(&huart1, transmit_data, 1, 100);
 8000486:	2364      	movs	r3, #100	@ 0x64
 8000488:	2201      	movs	r2, #1
 800048a:	4948      	ldr	r1, [pc, #288]	@ (80005ac <main+0x158>)
 800048c:	4848      	ldr	r0, [pc, #288]	@ (80005b0 <main+0x15c>)
 800048e:	f002 f9ab 	bl	80027e8 <HAL_UART_Transmit>

	if(adcValue_Speed[0] > 3500) forward_stop_backward = 2;
 8000492:	4b43      	ldr	r3, [pc, #268]	@ (80005a0 <main+0x14c>)
 8000494:	881b      	ldrh	r3, [r3, #0]
 8000496:	b29b      	uxth	r3, r3
 8000498:	f640 52ac 	movw	r2, #3500	@ 0xdac
 800049c:	4293      	cmp	r3, r2
 800049e:	d902      	bls.n	80004a6 <main+0x52>
 80004a0:	2302      	movs	r3, #2
 80004a2:	71fb      	strb	r3, [r7, #7]
 80004a4:	e00a      	b.n	80004bc <main+0x68>
	else if(adcValue_Speed[0] < 1000) forward_stop_backward = 0;
 80004a6:	4b3e      	ldr	r3, [pc, #248]	@ (80005a0 <main+0x14c>)
 80004a8:	881b      	ldrh	r3, [r3, #0]
 80004aa:	b29b      	uxth	r3, r3
 80004ac:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80004b0:	d202      	bcs.n	80004b8 <main+0x64>
 80004b2:	2300      	movs	r3, #0
 80004b4:	71fb      	strb	r3, [r7, #7]
 80004b6:	e001      	b.n	80004bc <main+0x68>
	else forward_stop_backward = 1;
 80004b8:	2301      	movs	r3, #1
 80004ba:	71fb      	strb	r3, [r7, #7]

	if(adcValue_Direction[0] > 3500) left_straight_right = 2;
 80004bc:	4b3d      	ldr	r3, [pc, #244]	@ (80005b4 <main+0x160>)
 80004be:	881b      	ldrh	r3, [r3, #0]
 80004c0:	b29b      	uxth	r3, r3
 80004c2:	f640 52ac 	movw	r2, #3500	@ 0xdac
 80004c6:	4293      	cmp	r3, r2
 80004c8:	d902      	bls.n	80004d0 <main+0x7c>
 80004ca:	2302      	movs	r3, #2
 80004cc:	71bb      	strb	r3, [r7, #6]
 80004ce:	e00a      	b.n	80004e6 <main+0x92>
	else if(adcValue_Direction[0] < 1000) left_straight_right = 0;
 80004d0:	4b38      	ldr	r3, [pc, #224]	@ (80005b4 <main+0x160>)
 80004d2:	881b      	ldrh	r3, [r3, #0]
 80004d4:	b29b      	uxth	r3, r3
 80004d6:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80004da:	d202      	bcs.n	80004e2 <main+0x8e>
 80004dc:	2300      	movs	r3, #0
 80004de:	71bb      	strb	r3, [r7, #6]
 80004e0:	e001      	b.n	80004e6 <main+0x92>
	else left_straight_right = 1;
 80004e2:	2301      	movs	r3, #1
 80004e4:	71bb      	strb	r3, [r7, #6]


	if(forward_stop_backward == 2 && left_straight_right == 2)
 80004e6:	79fb      	ldrb	r3, [r7, #7]
 80004e8:	2b02      	cmp	r3, #2
 80004ea:	d106      	bne.n	80004fa <main+0xa6>
 80004ec:	79bb      	ldrb	r3, [r7, #6]
 80004ee:	2b02      	cmp	r3, #2
 80004f0:	d103      	bne.n	80004fa <main+0xa6>
		transmit_data[0] = 'A';
 80004f2:	4b2e      	ldr	r3, [pc, #184]	@ (80005ac <main+0x158>)
 80004f4:	2241      	movs	r2, #65	@ 0x41
 80004f6:	701a      	strb	r2, [r3, #0]
 80004f8:	e050      	b.n	800059c <main+0x148>
	else if(forward_stop_backward == 2 && left_straight_right == 1)
 80004fa:	79fb      	ldrb	r3, [r7, #7]
 80004fc:	2b02      	cmp	r3, #2
 80004fe:	d106      	bne.n	800050e <main+0xba>
 8000500:	79bb      	ldrb	r3, [r7, #6]
 8000502:	2b01      	cmp	r3, #1
 8000504:	d103      	bne.n	800050e <main+0xba>
		transmit_data[0] = 'B';
 8000506:	4b29      	ldr	r3, [pc, #164]	@ (80005ac <main+0x158>)
 8000508:	2242      	movs	r2, #66	@ 0x42
 800050a:	701a      	strb	r2, [r3, #0]
 800050c:	e046      	b.n	800059c <main+0x148>
	else if(forward_stop_backward == 2 && left_straight_right == 0)
 800050e:	79fb      	ldrb	r3, [r7, #7]
 8000510:	2b02      	cmp	r3, #2
 8000512:	d106      	bne.n	8000522 <main+0xce>
 8000514:	79bb      	ldrb	r3, [r7, #6]
 8000516:	2b00      	cmp	r3, #0
 8000518:	d103      	bne.n	8000522 <main+0xce>
		transmit_data[0] = 'C';
 800051a:	4b24      	ldr	r3, [pc, #144]	@ (80005ac <main+0x158>)
 800051c:	2243      	movs	r2, #67	@ 0x43
 800051e:	701a      	strb	r2, [r3, #0]
 8000520:	e03c      	b.n	800059c <main+0x148>
	else if(forward_stop_backward == 1 && left_straight_right == 2)
 8000522:	79fb      	ldrb	r3, [r7, #7]
 8000524:	2b01      	cmp	r3, #1
 8000526:	d106      	bne.n	8000536 <main+0xe2>
 8000528:	79bb      	ldrb	r3, [r7, #6]
 800052a:	2b02      	cmp	r3, #2
 800052c:	d103      	bne.n	8000536 <main+0xe2>
		transmit_data[0] = 'D';
 800052e:	4b1f      	ldr	r3, [pc, #124]	@ (80005ac <main+0x158>)
 8000530:	2244      	movs	r2, #68	@ 0x44
 8000532:	701a      	strb	r2, [r3, #0]
 8000534:	e032      	b.n	800059c <main+0x148>
	else if(forward_stop_backward == 1 && left_straight_right == 1)
 8000536:	79fb      	ldrb	r3, [r7, #7]
 8000538:	2b01      	cmp	r3, #1
 800053a:	d106      	bne.n	800054a <main+0xf6>
 800053c:	79bb      	ldrb	r3, [r7, #6]
 800053e:	2b01      	cmp	r3, #1
 8000540:	d103      	bne.n	800054a <main+0xf6>
		transmit_data[0] = 'E';
 8000542:	4b1a      	ldr	r3, [pc, #104]	@ (80005ac <main+0x158>)
 8000544:	2245      	movs	r2, #69	@ 0x45
 8000546:	701a      	strb	r2, [r3, #0]
 8000548:	e028      	b.n	800059c <main+0x148>
	else if(forward_stop_backward == 1 && left_straight_right == 0)
 800054a:	79fb      	ldrb	r3, [r7, #7]
 800054c:	2b01      	cmp	r3, #1
 800054e:	d106      	bne.n	800055e <main+0x10a>
 8000550:	79bb      	ldrb	r3, [r7, #6]
 8000552:	2b00      	cmp	r3, #0
 8000554:	d103      	bne.n	800055e <main+0x10a>
		transmit_data[0] = 'F';
 8000556:	4b15      	ldr	r3, [pc, #84]	@ (80005ac <main+0x158>)
 8000558:	2246      	movs	r2, #70	@ 0x46
 800055a:	701a      	strb	r2, [r3, #0]
 800055c:	e01e      	b.n	800059c <main+0x148>
	else if(forward_stop_backward == 0 && left_straight_right == 2)
 800055e:	79fb      	ldrb	r3, [r7, #7]
 8000560:	2b00      	cmp	r3, #0
 8000562:	d106      	bne.n	8000572 <main+0x11e>
 8000564:	79bb      	ldrb	r3, [r7, #6]
 8000566:	2b02      	cmp	r3, #2
 8000568:	d103      	bne.n	8000572 <main+0x11e>
		transmit_data[0] = 'G';
 800056a:	4b10      	ldr	r3, [pc, #64]	@ (80005ac <main+0x158>)
 800056c:	2247      	movs	r2, #71	@ 0x47
 800056e:	701a      	strb	r2, [r3, #0]
 8000570:	e014      	b.n	800059c <main+0x148>
	else if(forward_stop_backward == 0 && left_straight_right == 1)
 8000572:	79fb      	ldrb	r3, [r7, #7]
 8000574:	2b00      	cmp	r3, #0
 8000576:	d106      	bne.n	8000586 <main+0x132>
 8000578:	79bb      	ldrb	r3, [r7, #6]
 800057a:	2b01      	cmp	r3, #1
 800057c:	d103      	bne.n	8000586 <main+0x132>
		transmit_data[0] = 'H';
 800057e:	4b0b      	ldr	r3, [pc, #44]	@ (80005ac <main+0x158>)
 8000580:	2248      	movs	r2, #72	@ 0x48
 8000582:	701a      	strb	r2, [r3, #0]
 8000584:	e00a      	b.n	800059c <main+0x148>
	else if(forward_stop_backward == 0 && left_straight_right == 0)
 8000586:	79fb      	ldrb	r3, [r7, #7]
 8000588:	2b00      	cmp	r3, #0
 800058a:	f47f af7c 	bne.w	8000486 <main+0x32>
 800058e:	79bb      	ldrb	r3, [r7, #6]
 8000590:	2b00      	cmp	r3, #0
 8000592:	f47f af78 	bne.w	8000486 <main+0x32>
		transmit_data[0] = 'I';
 8000596:	4b05      	ldr	r3, [pc, #20]	@ (80005ac <main+0x158>)
 8000598:	2249      	movs	r2, #73	@ 0x49
 800059a:	701a      	strb	r2, [r3, #0]
	HAL_UART_Transmit(&huart1, transmit_data, 1, 100);
 800059c:	e773      	b.n	8000486 <main+0x32>
 800059e:	bf00      	nop
 80005a0:	200000cc 	.word	0x200000cc
 80005a4:	20000028 	.word	0x20000028
 80005a8:	20000058 	.word	0x20000058
 80005ac:	200000d4 	.word	0x200000d4
 80005b0:	200000d8 	.word	0x200000d8
 80005b4:	200000d0 	.word	0x200000d0

080005b8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b094      	sub	sp, #80	@ 0x50
 80005bc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005be:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80005c2:	2228      	movs	r2, #40	@ 0x28
 80005c4:	2100      	movs	r1, #0
 80005c6:	4618      	mov	r0, r3
 80005c8:	f002 ff00 	bl	80033cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005cc:	f107 0314 	add.w	r3, r7, #20
 80005d0:	2200      	movs	r2, #0
 80005d2:	601a      	str	r2, [r3, #0]
 80005d4:	605a      	str	r2, [r3, #4]
 80005d6:	609a      	str	r2, [r3, #8]
 80005d8:	60da      	str	r2, [r3, #12]
 80005da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80005dc:	1d3b      	adds	r3, r7, #4
 80005de:	2200      	movs	r2, #0
 80005e0:	601a      	str	r2, [r3, #0]
 80005e2:	605a      	str	r2, [r3, #4]
 80005e4:	609a      	str	r2, [r3, #8]
 80005e6:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005e8:	2301      	movs	r3, #1
 80005ea:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80005ec:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80005f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 80005f2:	2300      	movs	r3, #0
 80005f4:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f6:	2301      	movs	r3, #1
 80005f8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005fa:	2302      	movs	r3, #2
 80005fc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005fe:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000602:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8000604:	f44f 13e0 	mov.w	r3, #1835008	@ 0x1c0000
 8000608:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800060a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800060e:	4618      	mov	r0, r3
 8000610:	f001 fbd4 	bl	8001dbc <HAL_RCC_OscConfig>
 8000614:	4603      	mov	r3, r0
 8000616:	2b00      	cmp	r3, #0
 8000618:	d001      	beq.n	800061e <SystemClock_Config+0x66>
  {
    Error_Handler();
 800061a:	f000 f828 	bl	800066e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800061e:	230f      	movs	r3, #15
 8000620:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000622:	2302      	movs	r3, #2
 8000624:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000626:	2300      	movs	r3, #0
 8000628:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800062a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800062e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000630:	2300      	movs	r3, #0
 8000632:	627b      	str	r3, [r7, #36]	@ 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000634:	f107 0314 	add.w	r3, r7, #20
 8000638:	2102      	movs	r1, #2
 800063a:	4618      	mov	r0, r3
 800063c:	f001 fe40 	bl	80022c0 <HAL_RCC_ClockConfig>
 8000640:	4603      	mov	r3, r0
 8000642:	2b00      	cmp	r3, #0
 8000644:	d001      	beq.n	800064a <SystemClock_Config+0x92>
  {
    Error_Handler();
 8000646:	f000 f812 	bl	800066e <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 800064a:	2302      	movs	r3, #2
 800064c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.AdcClockSelection = RCC_ADCPCLK2_DIV8;
 800064e:	f44f 4340 	mov.w	r3, #49152	@ 0xc000
 8000652:	60fb      	str	r3, [r7, #12]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000654:	1d3b      	adds	r3, r7, #4
 8000656:	4618      	mov	r0, r3
 8000658:	f001 ffc0 	bl	80025dc <HAL_RCCEx_PeriphCLKConfig>
 800065c:	4603      	mov	r3, r0
 800065e:	2b00      	cmp	r3, #0
 8000660:	d001      	beq.n	8000666 <SystemClock_Config+0xae>
  {
    Error_Handler();
 8000662:	f000 f804 	bl	800066e <Error_Handler>
  }
}
 8000666:	bf00      	nop
 8000668:	3750      	adds	r7, #80	@ 0x50
 800066a:	46bd      	mov	sp, r7
 800066c:	bd80      	pop	{r7, pc}

0800066e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800066e:	b480      	push	{r7}
 8000670:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000672:	b672      	cpsid	i
}
 8000674:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000676:	bf00      	nop
 8000678:	e7fd      	b.n	8000676 <Error_Handler+0x8>
	...

0800067c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800067c:	b480      	push	{r7}
 800067e:	b085      	sub	sp, #20
 8000680:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000682:	4b15      	ldr	r3, [pc, #84]	@ (80006d8 <HAL_MspInit+0x5c>)
 8000684:	699b      	ldr	r3, [r3, #24]
 8000686:	4a14      	ldr	r2, [pc, #80]	@ (80006d8 <HAL_MspInit+0x5c>)
 8000688:	f043 0301 	orr.w	r3, r3, #1
 800068c:	6193      	str	r3, [r2, #24]
 800068e:	4b12      	ldr	r3, [pc, #72]	@ (80006d8 <HAL_MspInit+0x5c>)
 8000690:	699b      	ldr	r3, [r3, #24]
 8000692:	f003 0301 	and.w	r3, r3, #1
 8000696:	60bb      	str	r3, [r7, #8]
 8000698:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800069a:	4b0f      	ldr	r3, [pc, #60]	@ (80006d8 <HAL_MspInit+0x5c>)
 800069c:	69db      	ldr	r3, [r3, #28]
 800069e:	4a0e      	ldr	r2, [pc, #56]	@ (80006d8 <HAL_MspInit+0x5c>)
 80006a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006a4:	61d3      	str	r3, [r2, #28]
 80006a6:	4b0c      	ldr	r3, [pc, #48]	@ (80006d8 <HAL_MspInit+0x5c>)
 80006a8:	69db      	ldr	r3, [r3, #28]
 80006aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006ae:	607b      	str	r3, [r7, #4]
 80006b0:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80006b2:	4b0a      	ldr	r3, [pc, #40]	@ (80006dc <HAL_MspInit+0x60>)
 80006b4:	685b      	ldr	r3, [r3, #4]
 80006b6:	60fb      	str	r3, [r7, #12]
 80006b8:	68fb      	ldr	r3, [r7, #12]
 80006ba:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80006be:	60fb      	str	r3, [r7, #12]
 80006c0:	68fb      	ldr	r3, [r7, #12]
 80006c2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	4a04      	ldr	r2, [pc, #16]	@ (80006dc <HAL_MspInit+0x60>)
 80006ca:	68fb      	ldr	r3, [r7, #12]
 80006cc:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006ce:	bf00      	nop
 80006d0:	3714      	adds	r7, #20
 80006d2:	46bd      	mov	sp, r7
 80006d4:	bc80      	pop	{r7}
 80006d6:	4770      	bx	lr
 80006d8:	40021000 	.word	0x40021000
 80006dc:	40010000 	.word	0x40010000

080006e0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80006e0:	b480      	push	{r7}
 80006e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80006e4:	bf00      	nop
 80006e6:	e7fd      	b.n	80006e4 <NMI_Handler+0x4>

080006e8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80006e8:	b480      	push	{r7}
 80006ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80006ec:	bf00      	nop
 80006ee:	e7fd      	b.n	80006ec <HardFault_Handler+0x4>

080006f0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80006f4:	bf00      	nop
 80006f6:	e7fd      	b.n	80006f4 <MemManage_Handler+0x4>

080006f8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80006f8:	b480      	push	{r7}
 80006fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80006fc:	bf00      	nop
 80006fe:	e7fd      	b.n	80006fc <BusFault_Handler+0x4>

08000700 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000700:	b480      	push	{r7}
 8000702:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000704:	bf00      	nop
 8000706:	e7fd      	b.n	8000704 <UsageFault_Handler+0x4>

08000708 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000708:	b480      	push	{r7}
 800070a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800070c:	bf00      	nop
 800070e:	46bd      	mov	sp, r7
 8000710:	bc80      	pop	{r7}
 8000712:	4770      	bx	lr

08000714 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000714:	b480      	push	{r7}
 8000716:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000718:	bf00      	nop
 800071a:	46bd      	mov	sp, r7
 800071c:	bc80      	pop	{r7}
 800071e:	4770      	bx	lr

08000720 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000720:	b480      	push	{r7}
 8000722:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000724:	bf00      	nop
 8000726:	46bd      	mov	sp, r7
 8000728:	bc80      	pop	{r7}
 800072a:	4770      	bx	lr

0800072c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800072c:	b580      	push	{r7, lr}
 800072e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000730:	f000 f970 	bl	8000a14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000734:	bf00      	nop
 8000736:	bd80      	pop	{r7, pc}

08000738 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 800073c:	4802      	ldr	r0, [pc, #8]	@ (8000748 <DMA1_Channel1_IRQHandler+0x10>)
 800073e:	f001 f885 	bl	800184c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 8000742:	bf00      	nop
 8000744:	bd80      	pop	{r7, pc}
 8000746:	bf00      	nop
 8000748:	20000088 	.word	0x20000088

0800074c <DMA1_Channel4_IRQHandler>:

/**
  * @brief This function handles DMA1 channel4 global interrupt.
  */
void DMA1_Channel4_IRQHandler(void)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_IRQn 0 */

  /* USER CODE END DMA1_Channel4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8000750:	4802      	ldr	r0, [pc, #8]	@ (800075c <DMA1_Channel4_IRQHandler+0x10>)
 8000752:	f001 f87b 	bl	800184c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_IRQn 1 */

  /* USER CODE END DMA1_Channel4_IRQn 1 */
}
 8000756:	bf00      	nop
 8000758:	bd80      	pop	{r7, pc}
 800075a:	bf00      	nop
 800075c:	20000164 	.word	0x20000164

08000760 <DMA1_Channel5_IRQHandler>:

/**
  * @brief This function handles DMA1 channel5 global interrupt.
  */
void DMA1_Channel5_IRQHandler(void)
{
 8000760:	b580      	push	{r7, lr}
 8000762:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel5_IRQn 0 */

  /* USER CODE END DMA1_Channel5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8000764:	4802      	ldr	r0, [pc, #8]	@ (8000770 <DMA1_Channel5_IRQHandler+0x10>)
 8000766:	f001 f871 	bl	800184c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel5_IRQn 1 */

  /* USER CODE END DMA1_Channel5_IRQn 1 */
}
 800076a:	bf00      	nop
 800076c:	bd80      	pop	{r7, pc}
 800076e:	bf00      	nop
 8000770:	20000120 	.word	0x20000120

08000774 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8000774:	b580      	push	{r7, lr}
 8000776:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8000778:	4802      	ldr	r0, [pc, #8]	@ (8000784 <USART1_IRQHandler+0x10>)
 800077a:	f002 f8f5 	bl	8002968 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800077e:	bf00      	nop
 8000780:	bd80      	pop	{r7, pc}
 8000782:	bf00      	nop
 8000784:	200000d8 	.word	0x200000d8

08000788 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000788:	b480      	push	{r7}
 800078a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800078c:	bf00      	nop
 800078e:	46bd      	mov	sp, r7
 8000790:	bc80      	pop	{r7}
 8000792:	4770      	bx	lr

08000794 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart1_tx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000798:	4b11      	ldr	r3, [pc, #68]	@ (80007e0 <MX_USART1_UART_Init+0x4c>)
 800079a:	4a12      	ldr	r2, [pc, #72]	@ (80007e4 <MX_USART1_UART_Init+0x50>)
 800079c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800079e:	4b10      	ldr	r3, [pc, #64]	@ (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007a0:	f44f 5216 	mov.w	r2, #9600	@ 0x2580
 80007a4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80007a6:	4b0e      	ldr	r3, [pc, #56]	@ (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80007ac:	4b0c      	ldr	r3, [pc, #48]	@ (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80007b2:	4b0b      	ldr	r3, [pc, #44]	@ (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80007b8:	4b09      	ldr	r3, [pc, #36]	@ (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007ba:	220c      	movs	r2, #12
 80007bc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007be:	4b08      	ldr	r3, [pc, #32]	@ (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80007c4:	4b06      	ldr	r3, [pc, #24]	@ (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007c6:	2200      	movs	r2, #0
 80007c8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80007ca:	4805      	ldr	r0, [pc, #20]	@ (80007e0 <MX_USART1_UART_Init+0x4c>)
 80007cc:	f001 ffbc 	bl	8002748 <HAL_UART_Init>
 80007d0:	4603      	mov	r3, r0
 80007d2:	2b00      	cmp	r3, #0
 80007d4:	d001      	beq.n	80007da <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80007d6:	f7ff ff4a 	bl	800066e <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80007da:	bf00      	nop
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	bf00      	nop
 80007e0:	200000d8 	.word	0x200000d8
 80007e4:	40013800 	.word	0x40013800

080007e8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b088      	sub	sp, #32
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f0:	f107 0310 	add.w	r3, r7, #16
 80007f4:	2200      	movs	r2, #0
 80007f6:	601a      	str	r2, [r3, #0]
 80007f8:	605a      	str	r2, [r3, #4]
 80007fa:	609a      	str	r2, [r3, #8]
 80007fc:	60da      	str	r2, [r3, #12]
  if(uartHandle->Instance==USART1)
 80007fe:	687b      	ldr	r3, [r7, #4]
 8000800:	681b      	ldr	r3, [r3, #0]
 8000802:	4a47      	ldr	r2, [pc, #284]	@ (8000920 <HAL_UART_MspInit+0x138>)
 8000804:	4293      	cmp	r3, r2
 8000806:	f040 8086 	bne.w	8000916 <HAL_UART_MspInit+0x12e>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800080a:	4b46      	ldr	r3, [pc, #280]	@ (8000924 <HAL_UART_MspInit+0x13c>)
 800080c:	699b      	ldr	r3, [r3, #24]
 800080e:	4a45      	ldr	r2, [pc, #276]	@ (8000924 <HAL_UART_MspInit+0x13c>)
 8000810:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000814:	6193      	str	r3, [r2, #24]
 8000816:	4b43      	ldr	r3, [pc, #268]	@ (8000924 <HAL_UART_MspInit+0x13c>)
 8000818:	699b      	ldr	r3, [r3, #24]
 800081a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800081e:	60fb      	str	r3, [r7, #12]
 8000820:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000822:	4b40      	ldr	r3, [pc, #256]	@ (8000924 <HAL_UART_MspInit+0x13c>)
 8000824:	699b      	ldr	r3, [r3, #24]
 8000826:	4a3f      	ldr	r2, [pc, #252]	@ (8000924 <HAL_UART_MspInit+0x13c>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	6193      	str	r3, [r2, #24]
 800082e:	4b3d      	ldr	r3, [pc, #244]	@ (8000924 <HAL_UART_MspInit+0x13c>)
 8000830:	699b      	ldr	r3, [r3, #24]
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	60bb      	str	r3, [r7, #8]
 8000838:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 800083a:	f44f 7300 	mov.w	r3, #512	@ 0x200
 800083e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000840:	2302      	movs	r3, #2
 8000842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000844:	2303      	movs	r3, #3
 8000846:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000848:	f107 0310 	add.w	r3, r7, #16
 800084c:	4619      	mov	r1, r3
 800084e:	4836      	ldr	r0, [pc, #216]	@ (8000928 <HAL_UART_MspInit+0x140>)
 8000850:	f001 f930 	bl	8001ab4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000854:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000858:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800085a:	2300      	movs	r3, #0
 800085c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800085e:	2300      	movs	r3, #0
 8000860:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000862:	f107 0310 	add.w	r3, r7, #16
 8000866:	4619      	mov	r1, r3
 8000868:	482f      	ldr	r0, [pc, #188]	@ (8000928 <HAL_UART_MspInit+0x140>)
 800086a:	f001 f923 	bl	8001ab4 <HAL_GPIO_Init>

    /* USART1 DMA Init */
    /* USART1_RX Init */
    hdma_usart1_rx.Instance = DMA1_Channel5;
 800086e:	4b2f      	ldr	r3, [pc, #188]	@ (800092c <HAL_UART_MspInit+0x144>)
 8000870:	4a2f      	ldr	r2, [pc, #188]	@ (8000930 <HAL_UART_MspInit+0x148>)
 8000872:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000874:	4b2d      	ldr	r3, [pc, #180]	@ (800092c <HAL_UART_MspInit+0x144>)
 8000876:	2200      	movs	r2, #0
 8000878:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800087a:	4b2c      	ldr	r3, [pc, #176]	@ (800092c <HAL_UART_MspInit+0x144>)
 800087c:	2200      	movs	r2, #0
 800087e:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000880:	4b2a      	ldr	r3, [pc, #168]	@ (800092c <HAL_UART_MspInit+0x144>)
 8000882:	2280      	movs	r2, #128	@ 0x80
 8000884:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000886:	4b29      	ldr	r3, [pc, #164]	@ (800092c <HAL_UART_MspInit+0x144>)
 8000888:	2200      	movs	r2, #0
 800088a:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800088c:	4b27      	ldr	r3, [pc, #156]	@ (800092c <HAL_UART_MspInit+0x144>)
 800088e:	2200      	movs	r2, #0
 8000890:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.Mode = DMA_CIRCULAR;
 8000892:	4b26      	ldr	r3, [pc, #152]	@ (800092c <HAL_UART_MspInit+0x144>)
 8000894:	2220      	movs	r2, #32
 8000896:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000898:	4b24      	ldr	r3, [pc, #144]	@ (800092c <HAL_UART_MspInit+0x144>)
 800089a:	2200      	movs	r2, #0
 800089c:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 800089e:	4823      	ldr	r0, [pc, #140]	@ (800092c <HAL_UART_MspInit+0x144>)
 80008a0:	f000 fe66 	bl	8001570 <HAL_DMA_Init>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d001      	beq.n	80008ae <HAL_UART_MspInit+0xc6>
    {
      Error_Handler();
 80008aa:	f7ff fee0 	bl	800066e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 80008ae:	687b      	ldr	r3, [r7, #4]
 80008b0:	4a1e      	ldr	r2, [pc, #120]	@ (800092c <HAL_UART_MspInit+0x144>)
 80008b2:	63da      	str	r2, [r3, #60]	@ 0x3c
 80008b4:	4a1d      	ldr	r2, [pc, #116]	@ (800092c <HAL_UART_MspInit+0x144>)
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1_TX Init */
    hdma_usart1_tx.Instance = DMA1_Channel4;
 80008ba:	4b1e      	ldr	r3, [pc, #120]	@ (8000934 <HAL_UART_MspInit+0x14c>)
 80008bc:	4a1e      	ldr	r2, [pc, #120]	@ (8000938 <HAL_UART_MspInit+0x150>)
 80008be:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80008c0:	4b1c      	ldr	r3, [pc, #112]	@ (8000934 <HAL_UART_MspInit+0x14c>)
 80008c2:	2210      	movs	r2, #16
 80008c4:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80008c6:	4b1b      	ldr	r3, [pc, #108]	@ (8000934 <HAL_UART_MspInit+0x14c>)
 80008c8:	2200      	movs	r2, #0
 80008ca:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80008cc:	4b19      	ldr	r3, [pc, #100]	@ (8000934 <HAL_UART_MspInit+0x14c>)
 80008ce:	2280      	movs	r2, #128	@ 0x80
 80008d0:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80008d2:	4b18      	ldr	r3, [pc, #96]	@ (8000934 <HAL_UART_MspInit+0x14c>)
 80008d4:	2200      	movs	r2, #0
 80008d6:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80008d8:	4b16      	ldr	r3, [pc, #88]	@ (8000934 <HAL_UART_MspInit+0x14c>)
 80008da:	2200      	movs	r2, #0
 80008dc:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.Mode = DMA_CIRCULAR;
 80008de:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <HAL_UART_MspInit+0x14c>)
 80008e0:	2220      	movs	r2, #32
 80008e2:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80008e4:	4b13      	ldr	r3, [pc, #76]	@ (8000934 <HAL_UART_MspInit+0x14c>)
 80008e6:	2200      	movs	r2, #0
 80008e8:	61da      	str	r2, [r3, #28]
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 80008ea:	4812      	ldr	r0, [pc, #72]	@ (8000934 <HAL_UART_MspInit+0x14c>)
 80008ec:	f000 fe40 	bl	8001570 <HAL_DMA_Init>
 80008f0:	4603      	mov	r3, r0
 80008f2:	2b00      	cmp	r3, #0
 80008f4:	d001      	beq.n	80008fa <HAL_UART_MspInit+0x112>
    {
      Error_Handler();
 80008f6:	f7ff feba 	bl	800066e <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 80008fa:	687b      	ldr	r3, [r7, #4]
 80008fc:	4a0d      	ldr	r2, [pc, #52]	@ (8000934 <HAL_UART_MspInit+0x14c>)
 80008fe:	639a      	str	r2, [r3, #56]	@ 0x38
 8000900:	4a0c      	ldr	r2, [pc, #48]	@ (8000934 <HAL_UART_MspInit+0x14c>)
 8000902:	687b      	ldr	r3, [r7, #4]
 8000904:	6253      	str	r3, [r2, #36]	@ 0x24

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8000906:	2200      	movs	r2, #0
 8000908:	2100      	movs	r1, #0
 800090a:	2025      	movs	r0, #37	@ 0x25
 800090c:	f000 fdf9 	bl	8001502 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8000910:	2025      	movs	r0, #37	@ 0x25
 8000912:	f000 fe12 	bl	800153a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }
}
 8000916:	bf00      	nop
 8000918:	3720      	adds	r7, #32
 800091a:	46bd      	mov	sp, r7
 800091c:	bd80      	pop	{r7, pc}
 800091e:	bf00      	nop
 8000920:	40013800 	.word	0x40013800
 8000924:	40021000 	.word	0x40021000
 8000928:	40010800 	.word	0x40010800
 800092c:	20000120 	.word	0x20000120
 8000930:	40020058 	.word	0x40020058
 8000934:	20000164 	.word	0x20000164
 8000938:	40020044 	.word	0x40020044

0800093c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800093c:	f7ff ff24 	bl	8000788 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000940:	480b      	ldr	r0, [pc, #44]	@ (8000970 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000942:	490c      	ldr	r1, [pc, #48]	@ (8000974 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000944:	4a0c      	ldr	r2, [pc, #48]	@ (8000978 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000948:	e002      	b.n	8000950 <LoopCopyDataInit>

0800094a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800094a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800094c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800094e:	3304      	adds	r3, #4

08000950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000954:	d3f9      	bcc.n	800094a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000956:	4a09      	ldr	r2, [pc, #36]	@ (800097c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000958:	4c09      	ldr	r4, [pc, #36]	@ (8000980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800095a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800095c:	e001      	b.n	8000962 <LoopFillZerobss>

0800095e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800095e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000960:	3204      	adds	r2, #4

08000962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000964:	d3fb      	bcc.n	800095e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000966:	f002 fd39 	bl	80033dc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800096a:	f7ff fd73 	bl	8000454 <main>
  bx lr
 800096e:	4770      	bx	lr
  ldr r0, =_sdata
 8000970:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000974:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000978:	08003470 	.word	0x08003470
  ldr r2, =_sbss
 800097c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000980:	200001ac 	.word	0x200001ac

08000984 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000984:	e7fe      	b.n	8000984 <ADC1_2_IRQHandler>
	...

08000988 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000988:	b580      	push	{r7, lr}
 800098a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800098c:	4b08      	ldr	r3, [pc, #32]	@ (80009b0 <HAL_Init+0x28>)
 800098e:	681b      	ldr	r3, [r3, #0]
 8000990:	4a07      	ldr	r2, [pc, #28]	@ (80009b0 <HAL_Init+0x28>)
 8000992:	f043 0310 	orr.w	r3, r3, #16
 8000996:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000998:	2003      	movs	r0, #3
 800099a:	f000 fda7 	bl	80014ec <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800099e:	200f      	movs	r0, #15
 80009a0:	f000 f808 	bl	80009b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80009a4:	f7ff fe6a 	bl	800067c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80009a8:	2300      	movs	r3, #0
}
 80009aa:	4618      	mov	r0, r3
 80009ac:	bd80      	pop	{r7, pc}
 80009ae:	bf00      	nop
 80009b0:	40022000 	.word	0x40022000

080009b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80009b4:	b580      	push	{r7, lr}
 80009b6:	b082      	sub	sp, #8
 80009b8:	af00      	add	r7, sp, #0
 80009ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80009bc:	4b12      	ldr	r3, [pc, #72]	@ (8000a08 <HAL_InitTick+0x54>)
 80009be:	681a      	ldr	r2, [r3, #0]
 80009c0:	4b12      	ldr	r3, [pc, #72]	@ (8000a0c <HAL_InitTick+0x58>)
 80009c2:	781b      	ldrb	r3, [r3, #0]
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80009ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80009ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80009d2:	4618      	mov	r0, r3
 80009d4:	f000 fdbf 	bl	8001556 <HAL_SYSTICK_Config>
 80009d8:	4603      	mov	r3, r0
 80009da:	2b00      	cmp	r3, #0
 80009dc:	d001      	beq.n	80009e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80009de:	2301      	movs	r3, #1
 80009e0:	e00e      	b.n	8000a00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80009e2:	687b      	ldr	r3, [r7, #4]
 80009e4:	2b0f      	cmp	r3, #15
 80009e6:	d80a      	bhi.n	80009fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80009e8:	2200      	movs	r2, #0
 80009ea:	6879      	ldr	r1, [r7, #4]
 80009ec:	f04f 30ff 	mov.w	r0, #4294967295
 80009f0:	f000 fd87 	bl	8001502 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80009f4:	4a06      	ldr	r2, [pc, #24]	@ (8000a10 <HAL_InitTick+0x5c>)
 80009f6:	687b      	ldr	r3, [r7, #4]
 80009f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80009fa:	2300      	movs	r3, #0
 80009fc:	e000      	b.n	8000a00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80009fe:	2301      	movs	r3, #1
}
 8000a00:	4618      	mov	r0, r3
 8000a02:	3708      	adds	r7, #8
 8000a04:	46bd      	mov	sp, r7
 8000a06:	bd80      	pop	{r7, pc}
 8000a08:	20000000 	.word	0x20000000
 8000a0c:	20000008 	.word	0x20000008
 8000a10:	20000004 	.word	0x20000004

08000a14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000a14:	b480      	push	{r7}
 8000a16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000a18:	4b05      	ldr	r3, [pc, #20]	@ (8000a30 <HAL_IncTick+0x1c>)
 8000a1a:	781b      	ldrb	r3, [r3, #0]
 8000a1c:	461a      	mov	r2, r3
 8000a1e:	4b05      	ldr	r3, [pc, #20]	@ (8000a34 <HAL_IncTick+0x20>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	4413      	add	r3, r2
 8000a24:	4a03      	ldr	r2, [pc, #12]	@ (8000a34 <HAL_IncTick+0x20>)
 8000a26:	6013      	str	r3, [r2, #0]
}
 8000a28:	bf00      	nop
 8000a2a:	46bd      	mov	sp, r7
 8000a2c:	bc80      	pop	{r7}
 8000a2e:	4770      	bx	lr
 8000a30:	20000008 	.word	0x20000008
 8000a34:	200001a8 	.word	0x200001a8

08000a38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000a38:	b480      	push	{r7}
 8000a3a:	af00      	add	r7, sp, #0
  return uwTick;
 8000a3c:	4b02      	ldr	r3, [pc, #8]	@ (8000a48 <HAL_GetTick+0x10>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
}
 8000a40:	4618      	mov	r0, r3
 8000a42:	46bd      	mov	sp, r7
 8000a44:	bc80      	pop	{r7}
 8000a46:	4770      	bx	lr
 8000a48:	200001a8 	.word	0x200001a8

08000a4c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b086      	sub	sp, #24
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000a54:	2300      	movs	r3, #0
 8000a56:	75fb      	strb	r3, [r7, #23]
  uint32_t tmp_cr1 = 0U;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	613b      	str	r3, [r7, #16]
  uint32_t tmp_cr2 = 0U;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_sqr1 = 0U;
 8000a60:	2300      	movs	r3, #0
 8000a62:	60fb      	str	r3, [r7, #12]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8000a64:	687b      	ldr	r3, [r7, #4]
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d101      	bne.n	8000a6e <HAL_ADC_Init+0x22>
  {
    return HAL_ERROR;
 8000a6a:	2301      	movs	r3, #1
 8000a6c:	e0be      	b.n	8000bec <HAL_ADC_Init+0x1a0>
  assert_param(IS_ADC_DATA_ALIGN(hadc->Init.DataAlign));
  assert_param(IS_ADC_SCAN_MODE(hadc->Init.ScanConvMode));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXTTRIG(hadc->Init.ExternalTrigConv));
  
  if(hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8000a6e:	687b      	ldr	r3, [r7, #4]
 8000a70:	689b      	ldr	r3, [r3, #8]
 8000a72:	2b00      	cmp	r3, #0
  /* Refer to header of this file for more details on clock enabling          */
  /* procedure.                                                               */

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000a74:	687b      	ldr	r3, [r7, #4]
 8000a76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d109      	bne.n	8000a90 <HAL_ADC_Init+0x44>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8000a7c:	687b      	ldr	r3, [r7, #4]
 8000a7e:	2200      	movs	r2, #0
 8000a80:	62da      	str	r2, [r3, #44]	@ 0x2c
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	2200      	movs	r2, #0
 8000a86:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000a8a:	6878      	ldr	r0, [r7, #4]
 8000a8c:	f7ff fbda 	bl	8000244 <HAL_ADC_MspInit>
  /* Stop potential conversion on going, on regular and injected groups */
  /* Disable ADC peripheral */
  /* Note: In case of ADC already enabled, precaution to not launch an        */
  /*       unwanted conversion while modifying register CR2 by writing 1 to   */
  /*       bit ADON.                                                          */
  tmp_hal_status = ADC_ConversionStop_Disable(hadc);
 8000a90:	6878      	ldr	r0, [r7, #4]
 8000a92:	f000 fbb7 	bl	8001204 <ADC_ConversionStop_Disable>
 8000a96:	4603      	mov	r3, r0
 8000a98:	75fb      	strb	r3, [r7, #23]
  
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) &&
 8000a9a:	687b      	ldr	r3, [r7, #4]
 8000a9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000a9e:	f003 0310 	and.w	r3, r3, #16
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	f040 8099 	bne.w	8000bda <HAL_ADC_Init+0x18e>
 8000aa8:	7dfb      	ldrb	r3, [r7, #23]
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	f040 8095 	bne.w	8000bda <HAL_ADC_Init+0x18e>
      (tmp_hal_status == HAL_OK)                                  )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000ab4:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8000ab8:	f023 0302 	bic.w	r3, r3, #2
 8000abc:	f043 0202 	orr.w	r2, r3, #2
 8000ac0:	687b      	ldr	r3, [r7, #4]
 8000ac2:	629a      	str	r2, [r3, #40]	@ 0x28
    /*  - continuous conversion mode                                          */
    /* Note: External trigger polarity (ADC_CR2_EXTTRIG) is set into          */
    /*       HAL_ADC_Start_xxx functions because if set in this function,     */
    /*       a conversion on injected group would start a conversion also on  */
    /*       regular group after ADC enabling.                                */
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ac4:	687b      	ldr	r3, [r7, #4]
 8000ac6:	685a      	ldr	r2, [r3, #4]
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	69db      	ldr	r3, [r3, #28]
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000acc:	431a      	orrs	r2, r3
                ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)   );
 8000ace:	687b      	ldr	r3, [r7, #4]
 8000ad0:	7b1b      	ldrb	r3, [r3, #12]
 8000ad2:	005b      	lsls	r3, r3, #1
                ADC_CFGR_EXTSEL(hadc, hadc->Init.ExternalTrigConv)            |
 8000ad4:	4313      	orrs	r3, r2
    tmp_cr2 |= (hadc->Init.DataAlign                                          |
 8000ad6:	68ba      	ldr	r2, [r7, #8]
 8000ad8:	4313      	orrs	r3, r2
 8000ada:	60bb      	str	r3, [r7, #8]

    /* Configuration of ADC:                                                  */
    /*  - scan mode                                                           */
    /*  - discontinuous mode disable/enable                                   */
    /*  - discontinuous mode number of conversions                            */
    tmp_cr1 |= (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode));
 8000adc:	687b      	ldr	r3, [r7, #4]
 8000ade:	689b      	ldr	r3, [r3, #8]
 8000ae0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000ae4:	d003      	beq.n	8000aee <HAL_ADC_Init+0xa2>
 8000ae6:	687b      	ldr	r3, [r7, #4]
 8000ae8:	689b      	ldr	r3, [r3, #8]
 8000aea:	2b01      	cmp	r3, #1
 8000aec:	d102      	bne.n	8000af4 <HAL_ADC_Init+0xa8>
 8000aee:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000af2:	e000      	b.n	8000af6 <HAL_ADC_Init+0xaa>
 8000af4:	2300      	movs	r3, #0
 8000af6:	693a      	ldr	r2, [r7, #16]
 8000af8:	4313      	orrs	r3, r2
 8000afa:	613b      	str	r3, [r7, #16]
    
    /* Enable discontinuous mode only if continuous mode is disabled */
    /* Note: If parameter "Init.ScanConvMode" is set to disable, parameter    */
    /*       discontinuous is set anyway, but will have no effect on ADC HW.  */
    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	7d1b      	ldrb	r3, [r3, #20]
 8000b00:	2b01      	cmp	r3, #1
 8000b02:	d119      	bne.n	8000b38 <HAL_ADC_Init+0xec>
    {
      if (hadc->Init.ContinuousConvMode == DISABLE)
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	7b1b      	ldrb	r3, [r3, #12]
 8000b08:	2b00      	cmp	r3, #0
 8000b0a:	d109      	bne.n	8000b20 <HAL_ADC_Init+0xd4>
      {
        /* Enable the selected ADC regular discontinuous mode */
        /* Set the number of channels to be converted in discontinuous mode */
        SET_BIT(tmp_cr1, ADC_CR1_DISCEN                                            |
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	699b      	ldr	r3, [r3, #24]
 8000b10:	3b01      	subs	r3, #1
 8000b12:	035a      	lsls	r2, r3, #13
 8000b14:	693b      	ldr	r3, [r7, #16]
 8000b16:	4313      	orrs	r3, r2
 8000b18:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8000b1c:	613b      	str	r3, [r7, #16]
 8000b1e:	e00b      	b.n	8000b38 <HAL_ADC_Init+0xec>
      {
        /* ADC regular group settings continuous and sequencer discontinuous*/
        /* cannot be enabled simultaneously.                                */
        
        /* Update ADC state machine to error */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000b24:	f043 0220 	orr.w	r2, r3, #32
 8000b28:	687b      	ldr	r3, [r7, #4]
 8000b2a:	629a      	str	r2, [r3, #40]	@ 0x28
        
        /* Set ADC error code to ADC IP internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b30:	f043 0201 	orr.w	r2, r3, #1
 8000b34:	687b      	ldr	r3, [r7, #4]
 8000b36:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
    }
    
    /* Update ADC configuration register CR1 with previous settings */
      MODIFY_REG(hadc->Instance->CR1,
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	685b      	ldr	r3, [r3, #4]
 8000b3e:	f423 4169 	bic.w	r1, r3, #59648	@ 0xe900
 8000b42:	687b      	ldr	r3, [r7, #4]
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	693a      	ldr	r2, [r7, #16]
 8000b48:	430a      	orrs	r2, r1
 8000b4a:	605a      	str	r2, [r3, #4]
                 ADC_CR1_DISCEN  |
                 ADC_CR1_DISCNUM    ,
                 tmp_cr1             );
    
    /* Update ADC configuration register CR2 with previous settings */
      MODIFY_REG(hadc->Instance->CR2,
 8000b4c:	687b      	ldr	r3, [r7, #4]
 8000b4e:	681b      	ldr	r3, [r3, #0]
 8000b50:	689a      	ldr	r2, [r3, #8]
 8000b52:	4b28      	ldr	r3, [pc, #160]	@ (8000bf4 <HAL_ADC_Init+0x1a8>)
 8000b54:	4013      	ands	r3, r2
 8000b56:	687a      	ldr	r2, [r7, #4]
 8000b58:	6812      	ldr	r2, [r2, #0]
 8000b5a:	68b9      	ldr	r1, [r7, #8]
 8000b5c:	430b      	orrs	r3, r1
 8000b5e:	6093      	str	r3, [r2, #8]
    /*   Note: Scan mode is present by hardware on this device and, if        */
    /*   disabled, discards automatically nb of conversions. Anyway, nb of    */
    /*   conversions is forced to 0x00 for alignment over all STM32 devices.  */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion"                                          */
    if (ADC_CR1_SCAN_SET(hadc->Init.ScanConvMode) == ADC_SCAN_ENABLE)
 8000b60:	687b      	ldr	r3, [r7, #4]
 8000b62:	689b      	ldr	r3, [r3, #8]
 8000b64:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b68:	d003      	beq.n	8000b72 <HAL_ADC_Init+0x126>
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	689b      	ldr	r3, [r3, #8]
 8000b6e:	2b01      	cmp	r3, #1
 8000b70:	d104      	bne.n	8000b7c <HAL_ADC_Init+0x130>
    {
      tmp_sqr1 = ADC_SQR1_L_SHIFT(hadc->Init.NbrOfConversion);
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	691b      	ldr	r3, [r3, #16]
 8000b76:	3b01      	subs	r3, #1
 8000b78:	051b      	lsls	r3, r3, #20
 8000b7a:	60fb      	str	r3, [r7, #12]
    }
      
    MODIFY_REG(hadc->Instance->SQR1,
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	681b      	ldr	r3, [r3, #0]
 8000b80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000b82:	f423 0170 	bic.w	r1, r3, #15728640	@ 0xf00000
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	68fa      	ldr	r2, [r7, #12]
 8000b8c:	430a      	orrs	r2, r1
 8000b8e:	62da      	str	r2, [r3, #44]	@ 0x2c
    /* ensure of no potential problem of ADC core IP clocking.                */
    /* Check through register CR2 (excluding bits set in other functions:     */
    /* execution control bits (ADON, JSWSTART, SWSTART), regular group bits   */
    /* (DMA), injected group bits (JEXTTRIG and JEXTSEL), channel internal    */
    /* measurement path bit (TSVREFE).                                        */
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000b90:	687b      	ldr	r3, [r7, #4]
 8000b92:	681b      	ldr	r3, [r3, #0]
 8000b94:	689a      	ldr	r2, [r3, #8]
 8000b96:	4b18      	ldr	r3, [pc, #96]	@ (8000bf8 <HAL_ADC_Init+0x1ac>)
 8000b98:	4013      	ands	r3, r2
 8000b9a:	68ba      	ldr	r2, [r7, #8]
 8000b9c:	429a      	cmp	r2, r3
 8000b9e:	d10b      	bne.n	8000bb8 <HAL_ADC_Init+0x16c>
                                        ADC_CR2_JEXTTRIG | ADC_CR2_JEXTSEL |
                                        ADC_CR2_TSVREFE                     ))
         == tmp_cr2)
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8000ba0:	687b      	ldr	r3, [r7, #4]
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8000ba6:	687b      	ldr	r3, [r7, #4]
 8000ba8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000baa:	f023 0303 	bic.w	r3, r3, #3
 8000bae:	f043 0201 	orr.w	r2, r3, #1
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	629a      	str	r2, [r3, #40]	@ 0x28
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bb6:	e018      	b.n	8000bea <HAL_ADC_Init+0x19e>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8000bb8:	687b      	ldr	r3, [r7, #4]
 8000bba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bbc:	f023 0312 	bic.w	r3, r3, #18
 8000bc0:	f043 0210 	orr.w	r2, r3, #16
 8000bc4:	687b      	ldr	r3, [r7, #4]
 8000bc6:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);
      
      /* Set ADC error code to ADC IP internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000bcc:	f043 0201 	orr.w	r2, r3, #1
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      tmp_hal_status = HAL_ERROR;
 8000bd4:	2301      	movs	r3, #1
 8000bd6:	75fb      	strb	r3, [r7, #23]
    if (READ_BIT(hadc->Instance->CR2, ~(ADC_CR2_ADON | ADC_CR2_DMA |
 8000bd8:	e007      	b.n	8000bea <HAL_ADC_Init+0x19e>
  
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000bde:	f043 0210 	orr.w	r2, r3, #16
 8000be2:	687b      	ldr	r3, [r7, #4]
 8000be4:	629a      	str	r2, [r3, #40]	@ 0x28
        
    tmp_hal_status = HAL_ERROR;
 8000be6:	2301      	movs	r3, #1
 8000be8:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000bea:	7dfb      	ldrb	r3, [r7, #23]
}
 8000bec:	4618      	mov	r0, r3
 8000bee:	3718      	adds	r7, #24
 8000bf0:	46bd      	mov	sp, r7
 8000bf2:	bd80      	pop	{r7, pc}
 8000bf4:	ffe1f7fd 	.word	0xffe1f7fd
 8000bf8:	ff1f0efe 	.word	0xff1f0efe

08000bfc <HAL_ADC_Start_IT>:
  *         Each of these interruptions has its dedicated callback function.
  * @param  hadc: ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef* hadc)
{
 8000bfc:	b580      	push	{r7, lr}
 8000bfe:	b084      	sub	sp, #16
 8000c00:	af00      	add	r7, sp, #0
 8000c02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000c04:	2300      	movs	r3, #0
 8000c06:	73fb      	strb	r3, [r7, #15]
  
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000c0e:	2b01      	cmp	r3, #1
 8000c10:	d101      	bne.n	8000c16 <HAL_ADC_Start_IT+0x1a>
 8000c12:	2302      	movs	r3, #2
 8000c14:	e0a0      	b.n	8000d58 <HAL_ADC_Start_IT+0x15c>
 8000c16:	687b      	ldr	r3, [r7, #4]
 8000c18:	2201      	movs	r2, #1
 8000c1a:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
  /* Enable the ADC peripheral */
  tmp_hal_status = ADC_Enable(hadc);
 8000c1e:	6878      	ldr	r0, [r7, #4]
 8000c20:	f000 fa96 	bl	8001150 <ADC_Enable>
 8000c24:	4603      	mov	r3, r0
 8000c26:	73fb      	strb	r3, [r7, #15]
  
  /* Start conversion if ADC is effectively enabled */
  if (tmp_hal_status == HAL_OK)
 8000c28:	7bfb      	ldrb	r3, [r7, #15]
 8000c2a:	2b00      	cmp	r3, #0
 8000c2c:	f040 808f 	bne.w	8000d4e <HAL_ADC_Start_IT+0x152>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular operation                      */
    ADC_STATE_CLR_SET(hadc->State,
 8000c30:	687b      	ldr	r3, [r7, #4]
 8000c32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c34:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000c38:	f023 0301 	bic.w	r3, r3, #1
 8000c3c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	629a      	str	r2, [r3, #40]	@ 0x28
                      HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000c44:	687b      	ldr	r3, [r7, #4]
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	4a45      	ldr	r2, [pc, #276]	@ (8000d60 <HAL_ADC_Start_IT+0x164>)
 8000c4a:	4293      	cmp	r3, r2
 8000c4c:	d105      	bne.n	8000c5a <HAL_ADC_Start_IT+0x5e>
 8000c4e:	4b45      	ldr	r3, [pc, #276]	@ (8000d64 <HAL_ADC_Start_IT+0x168>)
 8000c50:	685b      	ldr	r3, [r3, #4]
 8000c52:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000c56:	2b00      	cmp	r3, #0
 8000c58:	d115      	bne.n	8000c86 <HAL_ADC_Start_IT+0x8a>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c5a:	687b      	ldr	r3, [r7, #4]
 8000c5c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c5e:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000c62:	687b      	ldr	r3, [r7, #4]
 8000c64:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c66:	687b      	ldr	r3, [r7, #4]
 8000c68:	681b      	ldr	r3, [r3, #0]
 8000c6a:	685b      	ldr	r3, [r3, #4]
 8000c6c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000c70:	2b00      	cmp	r3, #0
 8000c72:	d026      	beq.n	8000cc2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c78:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000c7c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000c84:	e01d      	b.n	8000cc2 <HAL_ADC_Start_IT+0xc6>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000c8a:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000c8e:	687b      	ldr	r3, [r7, #4]
 8000c90:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000c92:	687b      	ldr	r3, [r7, #4]
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	4a33      	ldr	r2, [pc, #204]	@ (8000d64 <HAL_ADC_Start_IT+0x168>)
 8000c98:	4293      	cmp	r3, r2
 8000c9a:	d004      	beq.n	8000ca6 <HAL_ADC_Start_IT+0xaa>
 8000c9c:	687b      	ldr	r3, [r7, #4]
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	4a2f      	ldr	r2, [pc, #188]	@ (8000d60 <HAL_ADC_Start_IT+0x164>)
 8000ca2:	4293      	cmp	r3, r2
 8000ca4:	d10d      	bne.n	8000cc2 <HAL_ADC_Start_IT+0xc6>
 8000ca6:	4b2f      	ldr	r3, [pc, #188]	@ (8000d64 <HAL_ADC_Start_IT+0x168>)
 8000ca8:	685b      	ldr	r3, [r3, #4]
 8000caa:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000cae:	2b00      	cmp	r3, #0
 8000cb0:	d007      	beq.n	8000cc2 <HAL_ADC_Start_IT+0xc6>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000cb2:	687b      	ldr	r3, [r7, #4]
 8000cb4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cb6:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000cba:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000cc2:	687b      	ldr	r3, [r7, #4]
 8000cc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000cc6:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000cca:	2b00      	cmp	r3, #0
 8000ccc:	d006      	beq.n	8000cdc <HAL_ADC_Start_IT+0xe0>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000cce:	687b      	ldr	r3, [r7, #4]
 8000cd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000cd2:	f023 0206 	bic.w	r2, r3, #6
 8000cd6:	687b      	ldr	r3, [r7, #4]
 8000cd8:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000cda:	e002      	b.n	8000ce2 <HAL_ADC_Start_IT+0xe6>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	2200      	movs	r2, #0
 8000ce0:	62da      	str	r2, [r3, #44]	@ 0x2c
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8000ce2:	687b      	ldr	r3, [r7, #4]
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	681b      	ldr	r3, [r3, #0]
 8000cee:	f06f 0202 	mvn.w	r2, #2
 8000cf2:	601a      	str	r2, [r3, #0]
    
    /* Enable end of conversion interrupt for regular group */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8000cf4:	687b      	ldr	r3, [r7, #4]
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	685a      	ldr	r2, [r3, #4]
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	681b      	ldr	r3, [r3, #0]
 8000cfe:	f042 0220 	orr.w	r2, r2, #32
 8000d02:	605a      	str	r2, [r3, #4]
    /* If external trigger has been selected, conversion will start at next   */
    /* trigger event.                                                         */
    /* Case of multimode enabled:                                             */ 
    /*  - if ADC is slave, ADC is enabled only (conversion is not started).   */
    /*  - if ADC is master, ADC is enabled and conversion is started.         */
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d04:	687b      	ldr	r3, [r7, #4]
 8000d06:	681b      	ldr	r3, [r3, #0]
 8000d08:	689b      	ldr	r3, [r3, #8]
 8000d0a:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000d0e:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000d12:	d113      	bne.n	8000d3c <HAL_ADC_Start_IT+0x140>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d14:	687b      	ldr	r3, [r7, #4]
 8000d16:	681b      	ldr	r3, [r3, #0]
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d18:	4a11      	ldr	r2, [pc, #68]	@ (8000d60 <HAL_ADC_Start_IT+0x164>)
 8000d1a:	4293      	cmp	r3, r2
 8000d1c:	d105      	bne.n	8000d2a <HAL_ADC_Start_IT+0x12e>
        ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc)  )
 8000d1e:	4b11      	ldr	r3, [pc, #68]	@ (8000d64 <HAL_ADC_Start_IT+0x168>)
 8000d20:	685b      	ldr	r3, [r3, #4]
 8000d22:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
    if (ADC_IS_SOFTWARE_START_REGULAR(hadc)      &&
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	d108      	bne.n	8000d3c <HAL_ADC_Start_IT+0x140>
    {
      /* Start ADC conversion on regular group with SW start */
      SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	681b      	ldr	r3, [r3, #0]
 8000d2e:	689a      	ldr	r2, [r3, #8]
 8000d30:	687b      	ldr	r3, [r7, #4]
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000d38:	609a      	str	r2, [r3, #8]
 8000d3a:	e00c      	b.n	8000d56 <HAL_ADC_Start_IT+0x15a>
    }
    else
    {
      /* Start ADC conversion on regular group with external trigger */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000d3c:	687b      	ldr	r3, [r7, #4]
 8000d3e:	681b      	ldr	r3, [r3, #0]
 8000d40:	689a      	ldr	r2, [r3, #8]
 8000d42:	687b      	ldr	r3, [r7, #4]
 8000d44:	681b      	ldr	r3, [r3, #0]
 8000d46:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000d4a:	609a      	str	r2, [r3, #8]
 8000d4c:	e003      	b.n	8000d56 <HAL_ADC_Start_IT+0x15a>
    }
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	2200      	movs	r2, #0
 8000d52:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000d56:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3710      	adds	r7, #16
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40012800 	.word	0x40012800
 8000d64:	40012400 	.word	0x40012400

08000d68 <HAL_ADC_Start_DMA>:
  * @param  pData: The destination Buffer address.
  * @param  Length: The length of data to be transferred from ADC peripheral to memory.
  * @retval None
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8000d68:	b580      	push	{r7, lr}
 8000d6a:	b086      	sub	sp, #24
 8000d6c:	af00      	add	r7, sp, #0
 8000d6e:	60f8      	str	r0, [r7, #12]
 8000d70:	60b9      	str	r1, [r7, #8]
 8000d72:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000d74:	2300      	movs	r3, #0
 8000d76:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_ADC_DMA_CAPABILITY_INSTANCE(hadc->Instance));
    
  /* Verification if multimode is disabled (for devices with several ADC)     */
  /* If multimode is enabled, dedicated function multimode conversion         */
  /* start DMA must be used.                                                  */
  if(ADC_MULTIMODE_IS_ENABLE(hadc) == RESET)
 8000d78:	68fb      	ldr	r3, [r7, #12]
 8000d7a:	681b      	ldr	r3, [r3, #0]
 8000d7c:	4a64      	ldr	r2, [pc, #400]	@ (8000f10 <HAL_ADC_Start_DMA+0x1a8>)
 8000d7e:	4293      	cmp	r3, r2
 8000d80:	d004      	beq.n	8000d8c <HAL_ADC_Start_DMA+0x24>
 8000d82:	68fb      	ldr	r3, [r7, #12]
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	4a63      	ldr	r2, [pc, #396]	@ (8000f14 <HAL_ADC_Start_DMA+0x1ac>)
 8000d88:	4293      	cmp	r3, r2
 8000d8a:	d106      	bne.n	8000d9a <HAL_ADC_Start_DMA+0x32>
 8000d8c:	4b60      	ldr	r3, [pc, #384]	@ (8000f10 <HAL_ADC_Start_DMA+0x1a8>)
 8000d8e:	685b      	ldr	r3, [r3, #4]
 8000d90:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000d94:	2b00      	cmp	r3, #0
 8000d96:	f040 80b3 	bne.w	8000f00 <HAL_ADC_Start_DMA+0x198>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8000d9a:	68fb      	ldr	r3, [r7, #12]
 8000d9c:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000da0:	2b01      	cmp	r3, #1
 8000da2:	d101      	bne.n	8000da8 <HAL_ADC_Start_DMA+0x40>
 8000da4:	2302      	movs	r3, #2
 8000da6:	e0ae      	b.n	8000f06 <HAL_ADC_Start_DMA+0x19e>
 8000da8:	68fb      	ldr	r3, [r7, #12]
 8000daa:	2201      	movs	r2, #1
 8000dac:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    
    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8000db0:	68f8      	ldr	r0, [r7, #12]
 8000db2:	f000 f9cd 	bl	8001150 <ADC_Enable>
 8000db6:	4603      	mov	r3, r0
 8000db8:	75fb      	strb	r3, [r7, #23]
    
    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8000dba:	7dfb      	ldrb	r3, [r7, #23]
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	f040 809a 	bne.w	8000ef6 <HAL_ADC_Start_DMA+0x18e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000dc6:	f423 6370 	bic.w	r3, r3, #3840	@ 0xf00
 8000dca:	f023 0301 	bic.w	r3, r3, #1
 8000dce:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	629a      	str	r2, [r3, #40]	@ 0x28
                        HAL_ADC_STATE_REG_BUSY);
    
    /* Set group injected state (from auto-injection) and multimode state     */
    /* for all cases of multimode: independent mode, multimode ADC master     */
    /* or multimode ADC slave (for devices with several ADCs):                */
    if (ADC_NONMULTIMODE_OR_MULTIMODEMASTER(hadc))
 8000dd6:	68fb      	ldr	r3, [r7, #12]
 8000dd8:	681b      	ldr	r3, [r3, #0]
 8000dda:	4a4e      	ldr	r2, [pc, #312]	@ (8000f14 <HAL_ADC_Start_DMA+0x1ac>)
 8000ddc:	4293      	cmp	r3, r2
 8000dde:	d105      	bne.n	8000dec <HAL_ADC_Start_DMA+0x84>
 8000de0:	4b4b      	ldr	r3, [pc, #300]	@ (8000f10 <HAL_ADC_Start_DMA+0x1a8>)
 8000de2:	685b      	ldr	r3, [r3, #4]
 8000de4:	f403 2370 	and.w	r3, r3, #983040	@ 0xf0000
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d115      	bne.n	8000e18 <HAL_ADC_Start_DMA+0xb0>
    {
      /* Set ADC state (ADC independent or master) */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000df0:	f423 1280 	bic.w	r2, r3, #1048576	@ 0x100000
 8000df4:	68fb      	ldr	r3, [r7, #12]
 8000df6:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000df8:	68fb      	ldr	r3, [r7, #12]
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	685b      	ldr	r3, [r3, #4]
 8000dfe:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e02:	2b00      	cmp	r3, #0
 8000e04:	d026      	beq.n	8000e54 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8000e06:	68fb      	ldr	r3, [r7, #12]
 8000e08:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e0a:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e0e:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e12:	68fb      	ldr	r3, [r7, #12]
 8000e14:	629a      	str	r2, [r3, #40]	@ 0x28
      if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8000e16:	e01d      	b.n	8000e54 <HAL_ADC_Start_DMA+0xec>
      }
    }
    else
    {
      /* Set ADC state (ADC slave) */
      SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8000e18:	68fb      	ldr	r3, [r7, #12]
 8000e1a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e1c:	f443 1280 	orr.w	r2, r3, #1048576	@ 0x100000
 8000e20:	68fb      	ldr	r3, [r7, #12]
 8000e22:	629a      	str	r2, [r3, #40]	@ 0x28
      
      /* If conversions on group regular are also triggering group injected,  */
      /* update ADC state.                                                    */
      if (ADC_MULTIMODE_AUTO_INJECTED(hadc))
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	4a39      	ldr	r2, [pc, #228]	@ (8000f10 <HAL_ADC_Start_DMA+0x1a8>)
 8000e2a:	4293      	cmp	r3, r2
 8000e2c:	d004      	beq.n	8000e38 <HAL_ADC_Start_DMA+0xd0>
 8000e2e:	68fb      	ldr	r3, [r7, #12]
 8000e30:	681b      	ldr	r3, [r3, #0]
 8000e32:	4a38      	ldr	r2, [pc, #224]	@ (8000f14 <HAL_ADC_Start_DMA+0x1ac>)
 8000e34:	4293      	cmp	r3, r2
 8000e36:	d10d      	bne.n	8000e54 <HAL_ADC_Start_DMA+0xec>
 8000e38:	4b35      	ldr	r3, [pc, #212]	@ (8000f10 <HAL_ADC_Start_DMA+0x1a8>)
 8000e3a:	685b      	ldr	r3, [r3, #4]
 8000e3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8000e40:	2b00      	cmp	r3, #0
 8000e42:	d007      	beq.n	8000e54 <HAL_ADC_Start_DMA+0xec>
      {
        ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e48:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8000e4c:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8000e50:	68fb      	ldr	r3, [r7, #12]
 8000e52:	629a      	str	r2, [r3, #40]	@ 0x28
      }
    }
      
      /* State machine update: Check if an injected conversion is ongoing */
      if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8000e54:	68fb      	ldr	r3, [r7, #12]
 8000e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000e58:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d006      	beq.n	8000e6e <HAL_ADC_Start_DMA+0x106>
      {
        /* Reset ADC error code fields related to conversions on group regular */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8000e60:	68fb      	ldr	r3, [r7, #12]
 8000e62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000e64:	f023 0206 	bic.w	r2, r3, #6
 8000e68:	68fb      	ldr	r3, [r7, #12]
 8000e6a:	62da      	str	r2, [r3, #44]	@ 0x2c
 8000e6c:	e002      	b.n	8000e74 <HAL_ADC_Start_DMA+0x10c>
      }
      else
      {
        /* Reset ADC all error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8000e6e:	68fb      	ldr	r3, [r7, #12]
 8000e70:	2200      	movs	r2, #0
 8000e72:	62da      	str	r2, [r3, #44]	@ 0x2c
      }
      
      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8000e74:	68fb      	ldr	r3, [r7, #12]
 8000e76:	2200      	movs	r2, #0
 8000e78:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
      
      /* Set the DMA transfer complete callback */
      hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8000e7c:	68fb      	ldr	r3, [r7, #12]
 8000e7e:	6a1b      	ldr	r3, [r3, #32]
 8000e80:	4a25      	ldr	r2, [pc, #148]	@ (8000f18 <HAL_ADC_Start_DMA+0x1b0>)
 8000e82:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Set the DMA half transfer complete callback */
      hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8000e84:	68fb      	ldr	r3, [r7, #12]
 8000e86:	6a1b      	ldr	r3, [r3, #32]
 8000e88:	4a24      	ldr	r2, [pc, #144]	@ (8000f1c <HAL_ADC_Start_DMA+0x1b4>)
 8000e8a:	62da      	str	r2, [r3, #44]	@ 0x2c
      
      /* Set the DMA error callback */
      hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8000e8c:	68fb      	ldr	r3, [r7, #12]
 8000e8e:	6a1b      	ldr	r3, [r3, #32]
 8000e90:	4a23      	ldr	r2, [pc, #140]	@ (8000f20 <HAL_ADC_Start_DMA+0x1b8>)
 8000e92:	631a      	str	r2, [r3, #48]	@ 0x30
      /* start (in case of SW start):                                         */
      
      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC);
 8000e94:	68fb      	ldr	r3, [r7, #12]
 8000e96:	681b      	ldr	r3, [r3, #0]
 8000e98:	f06f 0202 	mvn.w	r2, #2
 8000e9c:	601a      	str	r2, [r3, #0]
      
      /* Enable ADC DMA mode */
      SET_BIT(hadc->Instance->CR2, ADC_CR2_DMA);
 8000e9e:	68fb      	ldr	r3, [r7, #12]
 8000ea0:	681b      	ldr	r3, [r3, #0]
 8000ea2:	689a      	ldr	r2, [r3, #8]
 8000ea4:	68fb      	ldr	r3, [r7, #12]
 8000ea6:	681b      	ldr	r3, [r3, #0]
 8000ea8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8000eac:	609a      	str	r2, [r3, #8]
      
      /* Start the DMA channel */
      HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8000eae:	68fb      	ldr	r3, [r7, #12]
 8000eb0:	6a18      	ldr	r0, [r3, #32]
 8000eb2:	68fb      	ldr	r3, [r7, #12]
 8000eb4:	681b      	ldr	r3, [r3, #0]
 8000eb6:	334c      	adds	r3, #76	@ 0x4c
 8000eb8:	4619      	mov	r1, r3
 8000eba:	68ba      	ldr	r2, [r7, #8]
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	f000 fbb1 	bl	8001624 <HAL_DMA_Start_IT>
      
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      if (ADC_IS_SOFTWARE_START_REGULAR(hadc))
 8000ec2:	68fb      	ldr	r3, [r7, #12]
 8000ec4:	681b      	ldr	r3, [r3, #0]
 8000ec6:	689b      	ldr	r3, [r3, #8]
 8000ec8:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 8000ecc:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 8000ed0:	d108      	bne.n	8000ee4 <HAL_ADC_Start_DMA+0x17c>
      {
        /* Start ADC conversion on regular group with SW start */
        SET_BIT(hadc->Instance->CR2, (ADC_CR2_SWSTART | ADC_CR2_EXTTRIG));
 8000ed2:	68fb      	ldr	r3, [r7, #12]
 8000ed4:	681b      	ldr	r3, [r3, #0]
 8000ed6:	689a      	ldr	r2, [r3, #8]
 8000ed8:	68fb      	ldr	r3, [r7, #12]
 8000eda:	681b      	ldr	r3, [r3, #0]
 8000edc:	f442 02a0 	orr.w	r2, r2, #5242880	@ 0x500000
 8000ee0:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000ee2:	e00f      	b.n	8000f04 <HAL_ADC_Start_DMA+0x19c>
      }
      else
      {
        /* Start ADC conversion on regular group with external trigger */
        SET_BIT(hadc->Instance->CR2, ADC_CR2_EXTTRIG);
 8000ee4:	68fb      	ldr	r3, [r7, #12]
 8000ee6:	681b      	ldr	r3, [r3, #0]
 8000ee8:	689a      	ldr	r2, [r3, #8]
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	681b      	ldr	r3, [r3, #0]
 8000eee:	f442 1280 	orr.w	r2, r2, #1048576	@ 0x100000
 8000ef2:	609a      	str	r2, [r3, #8]
    if (tmp_hal_status == HAL_OK)
 8000ef4:	e006      	b.n	8000f04 <HAL_ADC_Start_DMA+0x19c>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8000ef6:	68fb      	ldr	r3, [r7, #12]
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
    if (tmp_hal_status == HAL_OK)
 8000efe:	e001      	b.n	8000f04 <HAL_ADC_Start_DMA+0x19c>
    }
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8000f00:	2301      	movs	r3, #1
 8000f02:	75fb      	strb	r3, [r7, #23]
  }
  
  /* Return function status */
  return tmp_hal_status;
 8000f04:	7dfb      	ldrb	r3, [r7, #23]
}
 8000f06:	4618      	mov	r0, r3
 8000f08:	3718      	adds	r7, #24
 8000f0a:	46bd      	mov	sp, r7
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	40012400 	.word	0x40012400
 8000f14:	40012800 	.word	0x40012800
 8000f18:	08001287 	.word	0x08001287
 8000f1c:	08001303 	.word	0x08001303
 8000f20:	0800131f 	.word	0x0800131f

08000f24 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc: ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{
 8000f24:	b480      	push	{r7}
 8000f26:	b083      	sub	sp, #12
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */
  
  /* Return ADC converted value */ 
  return hadc->Instance->DR;
 8000f2c:	687b      	ldr	r3, [r7, #4]
 8000f2e:	681b      	ldr	r3, [r3, #0]
 8000f30:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8000f32:	4618      	mov	r0, r3
 8000f34:	370c      	adds	r7, #12
 8000f36:	46bd      	mov	sp, r7
 8000f38:	bc80      	pop	{r7}
 8000f3a:	4770      	bx	lr

08000f3c <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non blocking mode 
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8000f3c:	b480      	push	{r7}
 8000f3e:	b083      	sub	sp, #12
 8000f40:	af00      	add	r7, sp, #0
 8000f42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 8000f44:	bf00      	nop
 8000f46:	370c      	adds	r7, #12
 8000f48:	46bd      	mov	sp, r7
 8000f4a:	bc80      	pop	{r7}
 8000f4c:	4770      	bx	lr

08000f4e <HAL_ADC_ErrorCallback>:
  *        (ADC conversion with interruption or transfer by DMA)
  * @param  hadc: ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8000f4e:	b480      	push	{r7}
 8000f50:	b083      	sub	sp, #12
 8000f52:	af00      	add	r7, sp, #0
 8000f54:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8000f56:	bf00      	nop
 8000f58:	370c      	adds	r7, #12
 8000f5a:	46bd      	mov	sp, r7
 8000f5c:	bc80      	pop	{r7}
 8000f5e:	4770      	bx	lr

08000f60 <HAL_ADC_ConfigChannel>:
  * @param  hadc: ADC handle
  * @param  sConfig: Structure of ADC channel for regular group.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{ 
 8000f60:	b480      	push	{r7}
 8000f62:	b085      	sub	sp, #20
 8000f64:	af00      	add	r7, sp, #0
 8000f66:	6078      	str	r0, [r7, #4]
 8000f68:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	73fb      	strb	r3, [r7, #15]
  __IO uint32_t wait_loop_index = 0U;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	f893 3024 	ldrb.w	r3, [r3, #36]	@ 0x24
 8000f78:	2b01      	cmp	r3, #1
 8000f7a:	d101      	bne.n	8000f80 <HAL_ADC_ConfigChannel+0x20>
 8000f7c:	2302      	movs	r3, #2
 8000f7e:	e0dc      	b.n	800113a <HAL_ADC_ConfigChannel+0x1da>
 8000f80:	687b      	ldr	r3, [r7, #4]
 8000f82:	2201      	movs	r2, #1
 8000f84:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  
  /* Regular sequence configuration */
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8000f88:	683b      	ldr	r3, [r7, #0]
 8000f8a:	685b      	ldr	r3, [r3, #4]
 8000f8c:	2b06      	cmp	r3, #6
 8000f8e:	d81c      	bhi.n	8000fca <HAL_ADC_ConfigChannel+0x6a>
  {
    MODIFY_REG(hadc->Instance->SQR3                        ,
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	681b      	ldr	r3, [r3, #0]
 8000f94:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8000f96:	683b      	ldr	r3, [r7, #0]
 8000f98:	685a      	ldr	r2, [r3, #4]
 8000f9a:	4613      	mov	r3, r2
 8000f9c:	009b      	lsls	r3, r3, #2
 8000f9e:	4413      	add	r3, r2
 8000fa0:	3b05      	subs	r3, #5
 8000fa2:	221f      	movs	r2, #31
 8000fa4:	fa02 f303 	lsl.w	r3, r2, r3
 8000fa8:	43db      	mvns	r3, r3
 8000faa:	4019      	ands	r1, r3
 8000fac:	683b      	ldr	r3, [r7, #0]
 8000fae:	6818      	ldr	r0, [r3, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]
 8000fb2:	685a      	ldr	r2, [r3, #4]
 8000fb4:	4613      	mov	r3, r2
 8000fb6:	009b      	lsls	r3, r3, #2
 8000fb8:	4413      	add	r3, r2
 8000fba:	3b05      	subs	r3, #5
 8000fbc:	fa00 f203 	lsl.w	r2, r0, r3
 8000fc0:	687b      	ldr	r3, [r7, #4]
 8000fc2:	681b      	ldr	r3, [r3, #0]
 8000fc4:	430a      	orrs	r2, r1
 8000fc6:	635a      	str	r2, [r3, #52]	@ 0x34
 8000fc8:	e03c      	b.n	8001044 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank)    ,
               ADC_SQR3_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8000fca:	683b      	ldr	r3, [r7, #0]
 8000fcc:	685b      	ldr	r3, [r3, #4]
 8000fce:	2b0c      	cmp	r3, #12
 8000fd0:	d81c      	bhi.n	800100c <HAL_ADC_ConfigChannel+0xac>
  {
    MODIFY_REG(hadc->Instance->SQR2                        ,
 8000fd2:	687b      	ldr	r3, [r7, #4]
 8000fd4:	681b      	ldr	r3, [r3, #0]
 8000fd6:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8000fd8:	683b      	ldr	r3, [r7, #0]
 8000fda:	685a      	ldr	r2, [r3, #4]
 8000fdc:	4613      	mov	r3, r2
 8000fde:	009b      	lsls	r3, r3, #2
 8000fe0:	4413      	add	r3, r2
 8000fe2:	3b23      	subs	r3, #35	@ 0x23
 8000fe4:	221f      	movs	r2, #31
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43db      	mvns	r3, r3
 8000fec:	4019      	ands	r1, r3
 8000fee:	683b      	ldr	r3, [r7, #0]
 8000ff0:	6818      	ldr	r0, [r3, #0]
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	685a      	ldr	r2, [r3, #4]
 8000ff6:	4613      	mov	r3, r2
 8000ff8:	009b      	lsls	r3, r3, #2
 8000ffa:	4413      	add	r3, r2
 8000ffc:	3b23      	subs	r3, #35	@ 0x23
 8000ffe:	fa00 f203 	lsl.w	r2, r0, r3
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	430a      	orrs	r2, r1
 8001008:	631a      	str	r2, [r3, #48]	@ 0x30
 800100a:	e01b      	b.n	8001044 <HAL_ADC_ConfigChannel+0xe4>
               ADC_SQR2_RK(sConfig->Channel, sConfig->Rank) );
  }
  /* For Rank 13 to 16 */
  else
  {
    MODIFY_REG(hadc->Instance->SQR1                        ,
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	681b      	ldr	r3, [r3, #0]
 8001010:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8001012:	683b      	ldr	r3, [r7, #0]
 8001014:	685a      	ldr	r2, [r3, #4]
 8001016:	4613      	mov	r3, r2
 8001018:	009b      	lsls	r3, r3, #2
 800101a:	4413      	add	r3, r2
 800101c:	3b41      	subs	r3, #65	@ 0x41
 800101e:	221f      	movs	r2, #31
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	43db      	mvns	r3, r3
 8001026:	4019      	ands	r1, r3
 8001028:	683b      	ldr	r3, [r7, #0]
 800102a:	6818      	ldr	r0, [r3, #0]
 800102c:	683b      	ldr	r3, [r7, #0]
 800102e:	685a      	ldr	r2, [r3, #4]
 8001030:	4613      	mov	r3, r2
 8001032:	009b      	lsls	r3, r3, #2
 8001034:	4413      	add	r3, r2
 8001036:	3b41      	subs	r3, #65	@ 0x41
 8001038:	fa00 f203 	lsl.w	r2, r0, r3
 800103c:	687b      	ldr	r3, [r7, #4]
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	430a      	orrs	r2, r1
 8001042:	62da      	str	r2, [r3, #44]	@ 0x2c
  }
  
  
  /* Channel sampling time configuration */
  /* For channels 10 to 17 */
  if (sConfig->Channel >= ADC_CHANNEL_10)
 8001044:	683b      	ldr	r3, [r7, #0]
 8001046:	681b      	ldr	r3, [r3, #0]
 8001048:	2b09      	cmp	r3, #9
 800104a:	d91c      	bls.n	8001086 <HAL_ADC_ConfigChannel+0x126>
  {
    MODIFY_REG(hadc->Instance->SMPR1                             ,
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	68d9      	ldr	r1, [r3, #12]
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	681a      	ldr	r2, [r3, #0]
 8001056:	4613      	mov	r3, r2
 8001058:	005b      	lsls	r3, r3, #1
 800105a:	4413      	add	r3, r2
 800105c:	3b1e      	subs	r3, #30
 800105e:	2207      	movs	r2, #7
 8001060:	fa02 f303 	lsl.w	r3, r2, r3
 8001064:	43db      	mvns	r3, r3
 8001066:	4019      	ands	r1, r3
 8001068:	683b      	ldr	r3, [r7, #0]
 800106a:	6898      	ldr	r0, [r3, #8]
 800106c:	683b      	ldr	r3, [r7, #0]
 800106e:	681a      	ldr	r2, [r3, #0]
 8001070:	4613      	mov	r3, r2
 8001072:	005b      	lsls	r3, r3, #1
 8001074:	4413      	add	r3, r2
 8001076:	3b1e      	subs	r3, #30
 8001078:	fa00 f203 	lsl.w	r2, r0, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	681b      	ldr	r3, [r3, #0]
 8001080:	430a      	orrs	r2, r1
 8001082:	60da      	str	r2, [r3, #12]
 8001084:	e019      	b.n	80010ba <HAL_ADC_ConfigChannel+0x15a>
               ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel)      ,
               ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel) );
  }
  else /* For channels 0 to 9 */
  {
    MODIFY_REG(hadc->Instance->SMPR2                             ,
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	6919      	ldr	r1, [r3, #16]
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	681a      	ldr	r2, [r3, #0]
 8001090:	4613      	mov	r3, r2
 8001092:	005b      	lsls	r3, r3, #1
 8001094:	4413      	add	r3, r2
 8001096:	2207      	movs	r2, #7
 8001098:	fa02 f303 	lsl.w	r3, r2, r3
 800109c:	43db      	mvns	r3, r3
 800109e:	4019      	ands	r1, r3
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	6898      	ldr	r0, [r3, #8]
 80010a4:	683b      	ldr	r3, [r7, #0]
 80010a6:	681a      	ldr	r2, [r3, #0]
 80010a8:	4613      	mov	r3, r2
 80010aa:	005b      	lsls	r3, r3, #1
 80010ac:	4413      	add	r3, r2
 80010ae:	fa00 f203 	lsl.w	r2, r0, r3
 80010b2:	687b      	ldr	r3, [r7, #4]
 80010b4:	681b      	ldr	r3, [r3, #0]
 80010b6:	430a      	orrs	r2, r1
 80010b8:	611a      	str	r2, [r3, #16]
               ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel) );
  }
  
  /* If ADC1 Channel_16 or Channel_17 is selected, enable Temperature sensor  */
  /* and VREFINT measurement path.                                            */
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010ba:	683b      	ldr	r3, [r7, #0]
 80010bc:	681b      	ldr	r3, [r3, #0]
 80010be:	2b10      	cmp	r3, #16
 80010c0:	d003      	beq.n	80010ca <HAL_ADC_ConfigChannel+0x16a>
      (sConfig->Channel == ADC_CHANNEL_VREFINT)      )
 80010c2:	683b      	ldr	r3, [r7, #0]
 80010c4:	681b      	ldr	r3, [r3, #0]
  if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) ||
 80010c6:	2b11      	cmp	r3, #17
 80010c8:	d132      	bne.n	8001130 <HAL_ADC_ConfigChannel+0x1d0>
  {
    /* For STM32F1 devices with several ADC: Only ADC1 can access internal    */
    /* measurement channels (VrefInt/TempSensor). If these channels are       */
    /* intended to be set on other ADC instances, an error is reported.       */
    if (hadc->Instance == ADC1)
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	4a1d      	ldr	r2, [pc, #116]	@ (8001144 <HAL_ADC_ConfigChannel+0x1e4>)
 80010d0:	4293      	cmp	r3, r2
 80010d2:	d125      	bne.n	8001120 <HAL_ADC_ConfigChannel+0x1c0>
    {
      if (READ_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE) == RESET)
 80010d4:	687b      	ldr	r3, [r7, #4]
 80010d6:	681b      	ldr	r3, [r3, #0]
 80010d8:	689b      	ldr	r3, [r3, #8]
 80010da:	f403 0300 	and.w	r3, r3, #8388608	@ 0x800000
 80010de:	2b00      	cmp	r3, #0
 80010e0:	d126      	bne.n	8001130 <HAL_ADC_ConfigChannel+0x1d0>
      {
        SET_BIT(hadc->Instance->CR2, ADC_CR2_TSVREFE);
 80010e2:	687b      	ldr	r3, [r7, #4]
 80010e4:	681b      	ldr	r3, [r3, #0]
 80010e6:	689a      	ldr	r2, [r3, #8]
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	681b      	ldr	r3, [r3, #0]
 80010ec:	f442 0200 	orr.w	r2, r2, #8388608	@ 0x800000
 80010f0:	609a      	str	r2, [r3, #8]
        
        if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80010f2:	683b      	ldr	r3, [r7, #0]
 80010f4:	681b      	ldr	r3, [r3, #0]
 80010f6:	2b10      	cmp	r3, #16
 80010f8:	d11a      	bne.n	8001130 <HAL_ADC_ConfigChannel+0x1d0>
        {
          /* Delay for temperature sensor stabilization time */
          /* Compute number of CPU cycles to wait for */
          wait_loop_index = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80010fa:	4b13      	ldr	r3, [pc, #76]	@ (8001148 <HAL_ADC_ConfigChannel+0x1e8>)
 80010fc:	681b      	ldr	r3, [r3, #0]
 80010fe:	4a13      	ldr	r2, [pc, #76]	@ (800114c <HAL_ADC_ConfigChannel+0x1ec>)
 8001100:	fba2 2303 	umull	r2, r3, r2, r3
 8001104:	0c9a      	lsrs	r2, r3, #18
 8001106:	4613      	mov	r3, r2
 8001108:	009b      	lsls	r3, r3, #2
 800110a:	4413      	add	r3, r2
 800110c:	005b      	lsls	r3, r3, #1
 800110e:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001110:	e002      	b.n	8001118 <HAL_ADC_ConfigChannel+0x1b8>
          {
            wait_loop_index--;
 8001112:	68bb      	ldr	r3, [r7, #8]
 8001114:	3b01      	subs	r3, #1
 8001116:	60bb      	str	r3, [r7, #8]
          while(wait_loop_index != 0U)
 8001118:	68bb      	ldr	r3, [r7, #8]
 800111a:	2b00      	cmp	r3, #0
 800111c:	d1f9      	bne.n	8001112 <HAL_ADC_ConfigChannel+0x1b2>
 800111e:	e007      	b.n	8001130 <HAL_ADC_ConfigChannel+0x1d0>
      }
    }
    else
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001120:	687b      	ldr	r3, [r7, #4]
 8001122:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001124:	f043 0220 	orr.w	r2, r3, #32
 8001128:	687b      	ldr	r3, [r7, #4]
 800112a:	629a      	str	r2, [r3, #40]	@ 0x28
      
      tmp_hal_status = HAL_ERROR;
 800112c:	2301      	movs	r3, #1
 800112e:	73fb      	strb	r3, [r7, #15]
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001130:	687b      	ldr	r3, [r7, #4]
 8001132:	2200      	movs	r2, #0
 8001134:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24
  
  /* Return function status */
  return tmp_hal_status;
 8001138:	7bfb      	ldrb	r3, [r7, #15]
}
 800113a:	4618      	mov	r0, r3
 800113c:	3714      	adds	r7, #20
 800113e:	46bd      	mov	sp, r7
 8001140:	bc80      	pop	{r7}
 8001142:	4770      	bx	lr
 8001144:	40012400 	.word	0x40012400
 8001148:	20000000 	.word	0x20000000
 800114c:	431bde83 	.word	0x431bde83

08001150 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef* hadc)
{
 8001150:	b580      	push	{r7, lr}
 8001152:	b084      	sub	sp, #16
 8001154:	af00      	add	r7, sp, #0
 8001156:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8001158:	2300      	movs	r3, #0
 800115a:	60fb      	str	r3, [r7, #12]
  __IO uint32_t wait_loop_index = 0U;
 800115c:	2300      	movs	r3, #0
 800115e:	60bb      	str	r3, [r7, #8]
  
  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	689b      	ldr	r3, [r3, #8]
 8001166:	f003 0301 	and.w	r3, r3, #1
 800116a:	2b01      	cmp	r3, #1
 800116c:	d040      	beq.n	80011f0 <ADC_Enable+0xa0>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	689a      	ldr	r2, [r3, #8]
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681b      	ldr	r3, [r3, #0]
 8001178:	f042 0201 	orr.w	r2, r2, #1
 800117c:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    wait_loop_index = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800117e:	4b1f      	ldr	r3, [pc, #124]	@ (80011fc <ADC_Enable+0xac>)
 8001180:	681b      	ldr	r3, [r3, #0]
 8001182:	4a1f      	ldr	r2, [pc, #124]	@ (8001200 <ADC_Enable+0xb0>)
 8001184:	fba2 2303 	umull	r2, r3, r2, r3
 8001188:	0c9b      	lsrs	r3, r3, #18
 800118a:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 800118c:	e002      	b.n	8001194 <ADC_Enable+0x44>
    {
      wait_loop_index--;
 800118e:	68bb      	ldr	r3, [r7, #8]
 8001190:	3b01      	subs	r3, #1
 8001192:	60bb      	str	r3, [r7, #8]
    while(wait_loop_index != 0U)
 8001194:	68bb      	ldr	r3, [r7, #8]
 8001196:	2b00      	cmp	r3, #0
 8001198:	d1f9      	bne.n	800118e <ADC_Enable+0x3e>
    }
    
    /* Get tick count */
    tickstart = HAL_GetTick();
 800119a:	f7ff fc4d 	bl	8000a38 <HAL_GetTick>
 800119e:	60f8      	str	r0, [r7, #12]

    /* Wait for ADC effectively enabled */
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011a0:	e01f      	b.n	80011e2 <ADC_Enable+0x92>
    {
      if((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80011a2:	f7ff fc49 	bl	8000a38 <HAL_GetTick>
 80011a6:	4602      	mov	r2, r0
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	1ad3      	subs	r3, r2, r3
 80011ac:	2b02      	cmp	r3, #2
 80011ae:	d918      	bls.n	80011e2 <ADC_Enable+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) == RESET)
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	689b      	ldr	r3, [r3, #8]
 80011b6:	f003 0301 	and.w	r3, r3, #1
 80011ba:	2b01      	cmp	r3, #1
 80011bc:	d011      	beq.n	80011e2 <ADC_Enable+0x92>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80011c2:	f043 0210 	orr.w	r2, r3, #16
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80011ce:	f043 0201 	orr.w	r2, r3, #1
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	62da      	str	r2, [r3, #44]	@ 0x2c

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	2200      	movs	r2, #0
 80011da:	f883 2024 	strb.w	r2, [r3, #36]	@ 0x24

          return HAL_ERROR;
 80011de:	2301      	movs	r3, #1
 80011e0:	e007      	b.n	80011f2 <ADC_Enable+0xa2>
    while(ADC_IS_ENABLE(hadc) == RESET)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	681b      	ldr	r3, [r3, #0]
 80011e6:	689b      	ldr	r3, [r3, #8]
 80011e8:	f003 0301 	and.w	r3, r3, #1
 80011ec:	2b01      	cmp	r3, #1
 80011ee:	d1d8      	bne.n	80011a2 <ADC_Enable+0x52>
      }
    }
  }
   
  /* Return HAL status */
  return HAL_OK;
 80011f0:	2300      	movs	r3, #0
}
 80011f2:	4618      	mov	r0, r3
 80011f4:	3710      	adds	r7, #16
 80011f6:	46bd      	mov	sp, r7
 80011f8:	bd80      	pop	{r7, pc}
 80011fa:	bf00      	nop
 80011fc:	20000000 	.word	0x20000000
 8001200:	431bde83 	.word	0x431bde83

08001204 <ADC_ConversionStop_Disable>:
  *         stopped to disable the ADC.
  * @param  hadc: ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop_Disable(ADC_HandleTypeDef* hadc)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b084      	sub	sp, #16
 8001208:	af00      	add	r7, sp, #0
 800120a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800120c:	2300      	movs	r3, #0
 800120e:	60fb      	str	r3, [r7, #12]
  
  /* Verification if ADC is not already disabled */
  if (ADC_IS_ENABLE(hadc) != RESET)
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	689b      	ldr	r3, [r3, #8]
 8001216:	f003 0301 	and.w	r3, r3, #1
 800121a:	2b01      	cmp	r3, #1
 800121c:	d12e      	bne.n	800127c <ADC_ConversionStop_Disable+0x78>
  {
    /* Disable the ADC peripheral */
    __HAL_ADC_DISABLE(hadc);
 800121e:	687b      	ldr	r3, [r7, #4]
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	689a      	ldr	r2, [r3, #8]
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	681b      	ldr	r3, [r3, #0]
 8001228:	f022 0201 	bic.w	r2, r2, #1
 800122c:	609a      	str	r2, [r3, #8]
     
    /* Get tick count */
    tickstart = HAL_GetTick();
 800122e:	f7ff fc03 	bl	8000a38 <HAL_GetTick>
 8001232:	60f8      	str	r0, [r7, #12]
    
    /* Wait for ADC effectively disabled */
    while(ADC_IS_ENABLE(hadc) != RESET)
 8001234:	e01b      	b.n	800126e <ADC_ConversionStop_Disable+0x6a>
    {
      if((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001236:	f7ff fbff 	bl	8000a38 <HAL_GetTick>
 800123a:	4602      	mov	r2, r0
 800123c:	68fb      	ldr	r3, [r7, #12]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b02      	cmp	r3, #2
 8001242:	d914      	bls.n	800126e <ADC_ConversionStop_Disable+0x6a>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(ADC_IS_ENABLE(hadc) != RESET)
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	681b      	ldr	r3, [r3, #0]
 8001248:	689b      	ldr	r3, [r3, #8]
 800124a:	f003 0301 	and.w	r3, r3, #1
 800124e:	2b01      	cmp	r3, #1
 8001250:	d10d      	bne.n	800126e <ADC_ConversionStop_Disable+0x6a>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001252:	687b      	ldr	r3, [r7, #4]
 8001254:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001256:	f043 0210 	orr.w	r2, r3, #16
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	629a      	str	r2, [r3, #40]	@ 0x28

          /* Set ADC error code to ADC IP internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800125e:	687b      	ldr	r3, [r7, #4]
 8001260:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001262:	f043 0201 	orr.w	r2, r3, #1
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	62da      	str	r2, [r3, #44]	@ 0x2c

          return HAL_ERROR;
 800126a:	2301      	movs	r3, #1
 800126c:	e007      	b.n	800127e <ADC_ConversionStop_Disable+0x7a>
    while(ADC_IS_ENABLE(hadc) != RESET)
 800126e:	687b      	ldr	r3, [r7, #4]
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	689b      	ldr	r3, [r3, #8]
 8001274:	f003 0301 	and.w	r3, r3, #1
 8001278:	2b01      	cmp	r3, #1
 800127a:	d0dc      	beq.n	8001236 <ADC_ConversionStop_Disable+0x32>
      }
    }
  }
  
  /* Return HAL status */
  return HAL_OK;
 800127c:	2300      	movs	r3, #0
}
 800127e:	4618      	mov	r0, r3
 8001280:	3710      	adds	r7, #16
 8001282:	46bd      	mov	sp, r7
 8001284:	bd80      	pop	{r7, pc}

08001286 <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8001286:	b580      	push	{r7, lr}
 8001288:	b084      	sub	sp, #16
 800128a:	af00      	add	r7, sp, #0
 800128c:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800128e:	687b      	ldr	r3, [r7, #4]
 8001290:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001292:	60fb      	str	r3, [r7, #12]
 
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 8001294:	68fb      	ldr	r3, [r7, #12]
 8001296:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001298:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800129c:	2b00      	cmp	r3, #0
 800129e:	d127      	bne.n	80012f0 <ADC_DMAConvCplt+0x6a>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80012a0:	68fb      	ldr	r3, [r7, #12]
 80012a2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012a4:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 80012a8:	68fb      	ldr	r3, [r7, #12]
 80012aa:	629a      	str	r2, [r3, #40]	@ 0x28
    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going.        */
    /* Note: On STM32F1 devices, in case of sequencer enabled                 */
    /*       (several ranks selected), end of conversion flag is raised       */
    /*       at the end of the sequence.                                      */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012ac:	68fb      	ldr	r3, [r7, #12]
 80012ae:	681b      	ldr	r3, [r3, #0]
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	f403 2360 	and.w	r3, r3, #917504	@ 0xe0000
 80012b6:	f5b3 2f60 	cmp.w	r3, #917504	@ 0xe0000
 80012ba:	d115      	bne.n	80012e8 <ADC_DMAConvCplt+0x62>
       (hadc->Init.ContinuousConvMode == DISABLE)   )
 80012bc:	68fb      	ldr	r3, [r7, #12]
 80012be:	7b1b      	ldrb	r3, [r3, #12]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)        && 
 80012c0:	2b00      	cmp	r3, #0
 80012c2:	d111      	bne.n	80012e8 <ADC_DMAConvCplt+0x62>
    {
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80012c4:	68fb      	ldr	r3, [r7, #12]
 80012c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012c8:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80012cc:	68fb      	ldr	r3, [r7, #12]
 80012ce:	629a      	str	r2, [r3, #40]	@ 0x28
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80012d0:	68fb      	ldr	r3, [r7, #12]
 80012d2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012d4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d105      	bne.n	80012e8 <ADC_DMAConvCplt+0x62>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80012e0:	f043 0201 	orr.w	r2, r3, #1
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	629a      	str	r2, [r3, #40]	@ 0x28
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80012e8:	68f8      	ldr	r0, [r7, #12]
 80012ea:	f7ff f88d 	bl	8000408 <HAL_ADC_ConvCpltCallback>
  else
  {
    /* Call DMA error callback */
    hadc->DMA_Handle->XferErrorCallback(hdma);
  }
}
 80012ee:	e004      	b.n	80012fa <ADC_DMAConvCplt+0x74>
    hadc->DMA_Handle->XferErrorCallback(hdma);
 80012f0:	68fb      	ldr	r3, [r7, #12]
 80012f2:	6a1b      	ldr	r3, [r3, #32]
 80012f4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80012f6:	6878      	ldr	r0, [r7, #4]
 80012f8:	4798      	blx	r3
}
 80012fa:	bf00      	nop
 80012fc:	3710      	adds	r7, #16
 80012fe:	46bd      	mov	sp, r7
 8001300:	bd80      	pop	{r7, pc}

08001302 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback. 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 8001302:	b580      	push	{r7, lr}
 8001304:	b084      	sub	sp, #16
 8001306:	af00      	add	r7, sp, #0
 8001308:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800130e:	60fb      	str	r3, [r7, #12]
  
  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8001310:	68f8      	ldr	r0, [r7, #12]
 8001312:	f7ff fe13 	bl	8000f3c <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8001316:	bf00      	nop
 8001318:	3710      	adds	r7, #16
 800131a:	46bd      	mov	sp, r7
 800131c:	bd80      	pop	{r7, pc}

0800131e <ADC_DMAError>:
  * @brief  DMA error callback 
  * @param  hdma: pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 800131e:	b580      	push	{r7, lr}
 8001320:	b084      	sub	sp, #16
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800132a:	60fb      	str	r3, [r7, #12]
  
  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 800132c:	68fb      	ldr	r3, [r7, #12]
 800132e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001330:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8001334:	68fb      	ldr	r3, [r7, #12]
 8001336:	629a      	str	r2, [r3, #40]	@ 0x28
  
  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8001338:	68fb      	ldr	r3, [r7, #12]
 800133a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800133c:	f043 0204 	orr.w	r2, r3, #4
 8001340:	68fb      	ldr	r3, [r7, #12]
 8001342:	62da      	str	r2, [r3, #44]	@ 0x2c
  
  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8001344:	68f8      	ldr	r0, [r7, #12]
 8001346:	f7ff fe02 	bl	8000f4e <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800134a:	bf00      	nop
 800134c:	3710      	adds	r7, #16
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
	...

08001354 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001354:	b480      	push	{r7}
 8001356:	b085      	sub	sp, #20
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800135c:	687b      	ldr	r3, [r7, #4]
 800135e:	f003 0307 	and.w	r3, r3, #7
 8001362:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001364:	4b0c      	ldr	r3, [pc, #48]	@ (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001366:	68db      	ldr	r3, [r3, #12]
 8001368:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800136a:	68ba      	ldr	r2, [r7, #8]
 800136c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001370:	4013      	ands	r3, r2
 8001372:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001374:	68fb      	ldr	r3, [r7, #12]
 8001376:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001378:	68bb      	ldr	r3, [r7, #8]
 800137a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800137c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001380:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001384:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001386:	4a04      	ldr	r2, [pc, #16]	@ (8001398 <__NVIC_SetPriorityGrouping+0x44>)
 8001388:	68bb      	ldr	r3, [r7, #8]
 800138a:	60d3      	str	r3, [r2, #12]
}
 800138c:	bf00      	nop
 800138e:	3714      	adds	r7, #20
 8001390:	46bd      	mov	sp, r7
 8001392:	bc80      	pop	{r7}
 8001394:	4770      	bx	lr
 8001396:	bf00      	nop
 8001398:	e000ed00 	.word	0xe000ed00

0800139c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800139c:	b480      	push	{r7}
 800139e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80013a0:	4b04      	ldr	r3, [pc, #16]	@ (80013b4 <__NVIC_GetPriorityGrouping+0x18>)
 80013a2:	68db      	ldr	r3, [r3, #12]
 80013a4:	0a1b      	lsrs	r3, r3, #8
 80013a6:	f003 0307 	and.w	r3, r3, #7
}
 80013aa:	4618      	mov	r0, r3
 80013ac:	46bd      	mov	sp, r7
 80013ae:	bc80      	pop	{r7}
 80013b0:	4770      	bx	lr
 80013b2:	bf00      	nop
 80013b4:	e000ed00 	.word	0xe000ed00

080013b8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	db0b      	blt.n	80013e2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	f003 021f 	and.w	r2, r3, #31
 80013d0:	4906      	ldr	r1, [pc, #24]	@ (80013ec <__NVIC_EnableIRQ+0x34>)
 80013d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80013d6:	095b      	lsrs	r3, r3, #5
 80013d8:	2001      	movs	r0, #1
 80013da:	fa00 f202 	lsl.w	r2, r0, r2
 80013de:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80013e2:	bf00      	nop
 80013e4:	370c      	adds	r7, #12
 80013e6:	46bd      	mov	sp, r7
 80013e8:	bc80      	pop	{r7}
 80013ea:	4770      	bx	lr
 80013ec:	e000e100 	.word	0xe000e100

080013f0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80013f0:	b480      	push	{r7}
 80013f2:	b083      	sub	sp, #12
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	4603      	mov	r3, r0
 80013f8:	6039      	str	r1, [r7, #0]
 80013fa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80013fc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001400:	2b00      	cmp	r3, #0
 8001402:	db0a      	blt.n	800141a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	b2da      	uxtb	r2, r3
 8001408:	490c      	ldr	r1, [pc, #48]	@ (800143c <__NVIC_SetPriority+0x4c>)
 800140a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800140e:	0112      	lsls	r2, r2, #4
 8001410:	b2d2      	uxtb	r2, r2
 8001412:	440b      	add	r3, r1
 8001414:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001418:	e00a      	b.n	8001430 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800141a:	683b      	ldr	r3, [r7, #0]
 800141c:	b2da      	uxtb	r2, r3
 800141e:	4908      	ldr	r1, [pc, #32]	@ (8001440 <__NVIC_SetPriority+0x50>)
 8001420:	79fb      	ldrb	r3, [r7, #7]
 8001422:	f003 030f 	and.w	r3, r3, #15
 8001426:	3b04      	subs	r3, #4
 8001428:	0112      	lsls	r2, r2, #4
 800142a:	b2d2      	uxtb	r2, r2
 800142c:	440b      	add	r3, r1
 800142e:	761a      	strb	r2, [r3, #24]
}
 8001430:	bf00      	nop
 8001432:	370c      	adds	r7, #12
 8001434:	46bd      	mov	sp, r7
 8001436:	bc80      	pop	{r7}
 8001438:	4770      	bx	lr
 800143a:	bf00      	nop
 800143c:	e000e100 	.word	0xe000e100
 8001440:	e000ed00 	.word	0xe000ed00

08001444 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001444:	b480      	push	{r7}
 8001446:	b089      	sub	sp, #36	@ 0x24
 8001448:	af00      	add	r7, sp, #0
 800144a:	60f8      	str	r0, [r7, #12]
 800144c:	60b9      	str	r1, [r7, #8]
 800144e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001450:	68fb      	ldr	r3, [r7, #12]
 8001452:	f003 0307 	and.w	r3, r3, #7
 8001456:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001458:	69fb      	ldr	r3, [r7, #28]
 800145a:	f1c3 0307 	rsb	r3, r3, #7
 800145e:	2b04      	cmp	r3, #4
 8001460:	bf28      	it	cs
 8001462:	2304      	movcs	r3, #4
 8001464:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001466:	69fb      	ldr	r3, [r7, #28]
 8001468:	3304      	adds	r3, #4
 800146a:	2b06      	cmp	r3, #6
 800146c:	d902      	bls.n	8001474 <NVIC_EncodePriority+0x30>
 800146e:	69fb      	ldr	r3, [r7, #28]
 8001470:	3b03      	subs	r3, #3
 8001472:	e000      	b.n	8001476 <NVIC_EncodePriority+0x32>
 8001474:	2300      	movs	r3, #0
 8001476:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001478:	f04f 32ff 	mov.w	r2, #4294967295
 800147c:	69bb      	ldr	r3, [r7, #24]
 800147e:	fa02 f303 	lsl.w	r3, r2, r3
 8001482:	43da      	mvns	r2, r3
 8001484:	68bb      	ldr	r3, [r7, #8]
 8001486:	401a      	ands	r2, r3
 8001488:	697b      	ldr	r3, [r7, #20]
 800148a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800148c:	f04f 31ff 	mov.w	r1, #4294967295
 8001490:	697b      	ldr	r3, [r7, #20]
 8001492:	fa01 f303 	lsl.w	r3, r1, r3
 8001496:	43d9      	mvns	r1, r3
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800149c:	4313      	orrs	r3, r2
         );
}
 800149e:	4618      	mov	r0, r3
 80014a0:	3724      	adds	r7, #36	@ 0x24
 80014a2:	46bd      	mov	sp, r7
 80014a4:	bc80      	pop	{r7}
 80014a6:	4770      	bx	lr

080014a8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80014a8:	b580      	push	{r7, lr}
 80014aa:	b082      	sub	sp, #8
 80014ac:	af00      	add	r7, sp, #0
 80014ae:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	3b01      	subs	r3, #1
 80014b4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80014b8:	d301      	bcc.n	80014be <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80014ba:	2301      	movs	r3, #1
 80014bc:	e00f      	b.n	80014de <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80014be:	4a0a      	ldr	r2, [pc, #40]	@ (80014e8 <SysTick_Config+0x40>)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	3b01      	subs	r3, #1
 80014c4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80014c6:	210f      	movs	r1, #15
 80014c8:	f04f 30ff 	mov.w	r0, #4294967295
 80014cc:	f7ff ff90 	bl	80013f0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80014d0:	4b05      	ldr	r3, [pc, #20]	@ (80014e8 <SysTick_Config+0x40>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80014d6:	4b04      	ldr	r3, [pc, #16]	@ (80014e8 <SysTick_Config+0x40>)
 80014d8:	2207      	movs	r2, #7
 80014da:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80014dc:	2300      	movs	r3, #0
}
 80014de:	4618      	mov	r0, r3
 80014e0:	3708      	adds	r7, #8
 80014e2:	46bd      	mov	sp, r7
 80014e4:	bd80      	pop	{r7, pc}
 80014e6:	bf00      	nop
 80014e8:	e000e010 	.word	0xe000e010

080014ec <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014ec:	b580      	push	{r7, lr}
 80014ee:	b082      	sub	sp, #8
 80014f0:	af00      	add	r7, sp, #0
 80014f2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80014f4:	6878      	ldr	r0, [r7, #4]
 80014f6:	f7ff ff2d 	bl	8001354 <__NVIC_SetPriorityGrouping>
}
 80014fa:	bf00      	nop
 80014fc:	3708      	adds	r7, #8
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd80      	pop	{r7, pc}

08001502 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001502:	b580      	push	{r7, lr}
 8001504:	b086      	sub	sp, #24
 8001506:	af00      	add	r7, sp, #0
 8001508:	4603      	mov	r3, r0
 800150a:	60b9      	str	r1, [r7, #8]
 800150c:	607a      	str	r2, [r7, #4]
 800150e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001510:	2300      	movs	r3, #0
 8001512:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001514:	f7ff ff42 	bl	800139c <__NVIC_GetPriorityGrouping>
 8001518:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	68b9      	ldr	r1, [r7, #8]
 800151e:	6978      	ldr	r0, [r7, #20]
 8001520:	f7ff ff90 	bl	8001444 <NVIC_EncodePriority>
 8001524:	4602      	mov	r2, r0
 8001526:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800152a:	4611      	mov	r1, r2
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff ff5f 	bl	80013f0 <__NVIC_SetPriority>
}
 8001532:	bf00      	nop
 8001534:	3718      	adds	r7, #24
 8001536:	46bd      	mov	sp, r7
 8001538:	bd80      	pop	{r7, pc}

0800153a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	b082      	sub	sp, #8
 800153e:	af00      	add	r7, sp, #0
 8001540:	4603      	mov	r3, r0
 8001542:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001544:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001548:	4618      	mov	r0, r3
 800154a:	f7ff ff35 	bl	80013b8 <__NVIC_EnableIRQ>
}
 800154e:	bf00      	nop
 8001550:	3708      	adds	r7, #8
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}

08001556 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001556:	b580      	push	{r7, lr}
 8001558:	b082      	sub	sp, #8
 800155a:	af00      	add	r7, sp, #0
 800155c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800155e:	6878      	ldr	r0, [r7, #4]
 8001560:	f7ff ffa2 	bl	80014a8 <SysTick_Config>
 8001564:	4603      	mov	r3, r0
}
 8001566:	4618      	mov	r0, r3
 8001568:	3708      	adds	r7, #8
 800156a:	46bd      	mov	sp, r7
 800156c:	bd80      	pop	{r7, pc}
	...

08001570 <HAL_DMA_Init>:
  * @param  hdma: Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001570:	b480      	push	{r7}
 8001572:	b085      	sub	sp, #20
 8001574:	af00      	add	r7, sp, #0
 8001576:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001578:	2300      	movs	r3, #0
 800157a:	60fb      	str	r3, [r7, #12]

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	2b00      	cmp	r3, #0
 8001580:	d101      	bne.n	8001586 <HAL_DMA_Init+0x16>
  {
    return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e043      	b.n	800160e <HAL_DMA_Init+0x9e>
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
    hdma->DmaBaseAddress = DMA2;
  }
#else
  /* DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	461a      	mov	r2, r3
 800158c:	4b22      	ldr	r3, [pc, #136]	@ (8001618 <HAL_DMA_Init+0xa8>)
 800158e:	4413      	add	r3, r2
 8001590:	4a22      	ldr	r2, [pc, #136]	@ (800161c <HAL_DMA_Init+0xac>)
 8001592:	fba2 2303 	umull	r2, r3, r2, r3
 8001596:	091b      	lsrs	r3, r3, #4
 8001598:	009a      	lsls	r2, r3, #2
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	641a      	str	r2, [r3, #64]	@ 0x40
  hdma->DmaBaseAddress = DMA1;
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	4a1f      	ldr	r2, [pc, #124]	@ (8001620 <HAL_DMA_Init+0xb0>)
 80015a2:	63da      	str	r2, [r3, #60]	@ 0x3c
#endif /* DMA2 */

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	2202      	movs	r2, #2
 80015a8:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681b      	ldr	r3, [r3, #0]
 80015b0:	681b      	ldr	r3, [r3, #0]
 80015b2:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC and DIR bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  | \
 80015b4:	68fb      	ldr	r3, [r7, #12]
 80015b6:	f423 537f 	bic.w	r3, r3, #16320	@ 0x3fc0
 80015ba:	f023 0330 	bic.w	r3, r3, #48	@ 0x30
 80015be:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   | \
                      DMA_CCR_DIR));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	685a      	ldr	r2, [r3, #4]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	689b      	ldr	r3, [r3, #8]
  tmp |=  hdma->Init.Direction        |
 80015c8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015ca:	687b      	ldr	r3, [r7, #4]
 80015cc:	68db      	ldr	r3, [r3, #12]
 80015ce:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	691b      	ldr	r3, [r3, #16]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80015d4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	695b      	ldr	r3, [r3, #20]
 80015da:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	699b      	ldr	r3, [r3, #24]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80015e0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	69db      	ldr	r3, [r3, #28]
 80015e6:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80015e8:	68fa      	ldr	r2, [r7, #12]
 80015ea:	4313      	orrs	r3, r2
 80015ec:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	68fa      	ldr	r2, [r7, #12]
 80015f4:	601a      	str	r2, [r3, #0]

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	2200      	movs	r2, #0
 80015fa:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Initialize the DMA state*/
  hdma->State = HAL_DMA_STATE_READY;
 80015fc:	687b      	ldr	r3, [r7, #4]
 80015fe:	2201      	movs	r2, #1
 8001600:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2200      	movs	r2, #0
 8001608:	f883 2020 	strb.w	r2, [r3, #32]

  return HAL_OK;
 800160c:	2300      	movs	r3, #0
}
 800160e:	4618      	mov	r0, r3
 8001610:	3714      	adds	r7, #20
 8001612:	46bd      	mov	sp, r7
 8001614:	bc80      	pop	{r7}
 8001616:	4770      	bx	lr
 8001618:	bffdfff8 	.word	0xbffdfff8
 800161c:	cccccccd 	.word	0xcccccccd
 8001620:	40020000 	.word	0x40020000

08001624 <HAL_DMA_Start_IT>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001624:	b580      	push	{r7, lr}
 8001626:	b086      	sub	sp, #24
 8001628:	af00      	add	r7, sp, #0
 800162a:	60f8      	str	r0, [r7, #12]
 800162c:	60b9      	str	r1, [r7, #8]
 800162e:	607a      	str	r2, [r7, #4]
 8001630:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001632:	2300      	movs	r3, #0
 8001634:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	f893 3020 	ldrb.w	r3, [r3, #32]
 800163c:	2b01      	cmp	r3, #1
 800163e:	d101      	bne.n	8001644 <HAL_DMA_Start_IT+0x20>
 8001640:	2302      	movs	r3, #2
 8001642:	e04b      	b.n	80016dc <HAL_DMA_Start_IT+0xb8>
 8001644:	68fb      	ldr	r3, [r7, #12]
 8001646:	2201      	movs	r2, #1
 8001648:	f883 2020 	strb.w	r2, [r3, #32]
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800164c:	68fb      	ldr	r3, [r7, #12]
 800164e:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 8001652:	b2db      	uxtb	r3, r3
 8001654:	2b01      	cmp	r3, #1
 8001656:	d13a      	bne.n	80016ce <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8001658:	68fb      	ldr	r3, [r7, #12]
 800165a:	2202      	movs	r2, #2
 800165c:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001660:	68fb      	ldr	r3, [r7, #12]
 8001662:	2200      	movs	r2, #0
 8001664:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8001666:	68fb      	ldr	r3, [r7, #12]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	681a      	ldr	r2, [r3, #0]
 800166c:	68fb      	ldr	r3, [r7, #12]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f022 0201 	bic.w	r2, r2, #1
 8001674:	601a      	str	r2, [r3, #0]
    
    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8001676:	683b      	ldr	r3, [r7, #0]
 8001678:	687a      	ldr	r2, [r7, #4]
 800167a:	68b9      	ldr	r1, [r7, #8]
 800167c:	68f8      	ldr	r0, [r7, #12]
 800167e:	f000 f9eb 	bl	8001a58 <DMA_SetConfig>
    
    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback)
 8001682:	68fb      	ldr	r3, [r7, #12]
 8001684:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001686:	2b00      	cmp	r3, #0
 8001688:	d008      	beq.n	800169c <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800168a:	68fb      	ldr	r3, [r7, #12]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	681a      	ldr	r2, [r3, #0]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	f042 020e 	orr.w	r2, r2, #14
 8001698:	601a      	str	r2, [r3, #0]
 800169a:	e00f      	b.n	80016bc <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800169c:	68fb      	ldr	r3, [r7, #12]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	681a      	ldr	r2, [r3, #0]
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f022 0204 	bic.w	r2, r2, #4
 80016aa:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	681a      	ldr	r2, [r3, #0]
 80016b2:	68fb      	ldr	r3, [r7, #12]
 80016b4:	681b      	ldr	r3, [r3, #0]
 80016b6:	f042 020a 	orr.w	r2, r2, #10
 80016ba:	601a      	str	r2, [r3, #0]
    }
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	681a      	ldr	r2, [r3, #0]
 80016c2:	68fb      	ldr	r3, [r7, #12]
 80016c4:	681b      	ldr	r3, [r3, #0]
 80016c6:	f042 0201 	orr.w	r2, r2, #1
 80016ca:	601a      	str	r2, [r3, #0]
 80016cc:	e005      	b.n	80016da <HAL_DMA_Start_IT+0xb6>
  }
  else
  {      
    /* Process Unlocked */
    __HAL_UNLOCK(hdma); 
 80016ce:	68fb      	ldr	r3, [r7, #12]
 80016d0:	2200      	movs	r2, #0
 80016d2:	f883 2020 	strb.w	r2, [r3, #32]

    /* Remain BUSY */
    status = HAL_BUSY;
 80016d6:	2302      	movs	r3, #2
 80016d8:	75fb      	strb	r3, [r7, #23]
  }    
  return status;
 80016da:	7dfb      	ldrb	r3, [r7, #23]
}
 80016dc:	4618      	mov	r0, r3
 80016de:	3718      	adds	r7, #24
 80016e0:	46bd      	mov	sp, r7
 80016e2:	bd80      	pop	{r7, pc}

080016e4 <HAL_DMA_Abort>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	73fb      	strb	r3, [r7, #15]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80016f0:	687b      	ldr	r3, [r7, #4]
 80016f2:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 80016f6:	b2db      	uxtb	r3, r3
 80016f8:	2b02      	cmp	r3, #2
 80016fa:	d008      	beq.n	800170e <HAL_DMA_Abort+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	2204      	movs	r2, #4
 8001700:	639a      	str	r2, [r3, #56]	@ 0x38
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	2200      	movs	r2, #0
 8001706:	f883 2020 	strb.w	r2, [r3, #32]
    
    return HAL_ERROR;
 800170a:	2301      	movs	r3, #1
 800170c:	e020      	b.n	8001750 <HAL_DMA_Abort+0x6c>
  }
  else

  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	681b      	ldr	r3, [r3, #0]
 8001712:	681a      	ldr	r2, [r3, #0]
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	681b      	ldr	r3, [r3, #0]
 8001718:	f022 020e 	bic.w	r2, r2, #14
 800171c:	601a      	str	r2, [r3, #0]
      
    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	681a      	ldr	r2, [r3, #0]
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	f022 0201 	bic.w	r2, r2, #1
 800172c:	601a      	str	r2, [r3, #0]
      
    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001736:	2101      	movs	r1, #1
 8001738:	fa01 f202 	lsl.w	r2, r1, r2
 800173c:	605a      	str	r2, [r3, #4]
  }
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	2201      	movs	r2, #1
 8001742:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);      
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	2200      	movs	r2, #0
 800174a:	f883 2020 	strb.w	r2, [r3, #32]
  
  return status; 
 800174e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001750:	4618      	mov	r0, r3
 8001752:	3714      	adds	r7, #20
 8001754:	46bd      	mov	sp, r7
 8001756:	bc80      	pop	{r7}
 8001758:	4770      	bx	lr
	...

0800175c <HAL_DMA_Abort_IT>:
  * @param  hdma  : pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{  
 800175c:	b580      	push	{r7, lr}
 800175e:	b084      	sub	sp, #16
 8001760:	af00      	add	r7, sp, #0
 8001762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001764:	2300      	movs	r3, #0
 8001766:	73fb      	strb	r3, [r7, #15]
  
  if(HAL_DMA_STATE_BUSY != hdma->State)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	f893 3021 	ldrb.w	r3, [r3, #33]	@ 0x21
 800176e:	b2db      	uxtb	r3, r3
 8001770:	2b02      	cmp	r3, #2
 8001772:	d005      	beq.n	8001780 <HAL_DMA_Abort_IT+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	2204      	movs	r2, #4
 8001778:	639a      	str	r2, [r3, #56]	@ 0x38
        
    status = HAL_ERROR;
 800177a:	2301      	movs	r3, #1
 800177c:	73fb      	strb	r3, [r7, #15]
 800177e:	e051      	b.n	8001824 <HAL_DMA_Abort_IT+0xc8>
  }
  else
  { 
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	681a      	ldr	r2, [r3, #0]
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	681b      	ldr	r3, [r3, #0]
 800178a:	f022 020e 	bic.w	r2, r2, #14
 800178e:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	681b      	ldr	r3, [r3, #0]
 8001794:	681a      	ldr	r2, [r3, #0]
 8001796:	687b      	ldr	r3, [r7, #4]
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f022 0201 	bic.w	r2, r2, #1
 800179e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_GI_FLAG_INDEX(hdma));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a22      	ldr	r2, [pc, #136]	@ (8001830 <HAL_DMA_Abort_IT+0xd4>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d029      	beq.n	80017fe <HAL_DMA_Abort_IT+0xa2>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a21      	ldr	r2, [pc, #132]	@ (8001834 <HAL_DMA_Abort_IT+0xd8>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d022      	beq.n	80017fa <HAL_DMA_Abort_IT+0x9e>
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	4a1f      	ldr	r2, [pc, #124]	@ (8001838 <HAL_DMA_Abort_IT+0xdc>)
 80017ba:	4293      	cmp	r3, r2
 80017bc:	d01a      	beq.n	80017f4 <HAL_DMA_Abort_IT+0x98>
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a1e      	ldr	r2, [pc, #120]	@ (800183c <HAL_DMA_Abort_IT+0xe0>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d012      	beq.n	80017ee <HAL_DMA_Abort_IT+0x92>
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	4a1c      	ldr	r2, [pc, #112]	@ (8001840 <HAL_DMA_Abort_IT+0xe4>)
 80017ce:	4293      	cmp	r3, r2
 80017d0:	d00a      	beq.n	80017e8 <HAL_DMA_Abort_IT+0x8c>
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4a1b      	ldr	r2, [pc, #108]	@ (8001844 <HAL_DMA_Abort_IT+0xe8>)
 80017d8:	4293      	cmp	r3, r2
 80017da:	d102      	bne.n	80017e2 <HAL_DMA_Abort_IT+0x86>
 80017dc:	f44f 1380 	mov.w	r3, #1048576	@ 0x100000
 80017e0:	e00e      	b.n	8001800 <HAL_DMA_Abort_IT+0xa4>
 80017e2:	f04f 7380 	mov.w	r3, #16777216	@ 0x1000000
 80017e6:	e00b      	b.n	8001800 <HAL_DMA_Abort_IT+0xa4>
 80017e8:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80017ec:	e008      	b.n	8001800 <HAL_DMA_Abort_IT+0xa4>
 80017ee:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017f2:	e005      	b.n	8001800 <HAL_DMA_Abort_IT+0xa4>
 80017f4:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80017f8:	e002      	b.n	8001800 <HAL_DMA_Abort_IT+0xa4>
 80017fa:	2310      	movs	r3, #16
 80017fc:	e000      	b.n	8001800 <HAL_DMA_Abort_IT+0xa4>
 80017fe:	2301      	movs	r3, #1
 8001800:	4a11      	ldr	r2, [pc, #68]	@ (8001848 <HAL_DMA_Abort_IT+0xec>)
 8001802:	6053      	str	r3, [r2, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	2201      	movs	r2, #1
 8001808:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2200      	movs	r2, #0
 8001810:	f883 2020 	strb.w	r2, [r3, #32]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001818:	2b00      	cmp	r3, #0
 800181a:	d003      	beq.n	8001824 <HAL_DMA_Abort_IT+0xc8>
    {
      hdma->XferAbortCallback(hdma);
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001820:	6878      	ldr	r0, [r7, #4]
 8001822:	4798      	blx	r3
    } 
  }
  return status;
 8001824:	7bfb      	ldrb	r3, [r7, #15]
}
 8001826:	4618      	mov	r0, r3
 8001828:	3710      	adds	r7, #16
 800182a:	46bd      	mov	sp, r7
 800182c:	bd80      	pop	{r7, pc}
 800182e:	bf00      	nop
 8001830:	40020008 	.word	0x40020008
 8001834:	4002001c 	.word	0x4002001c
 8001838:	40020030 	.word	0x40020030
 800183c:	40020044 	.word	0x40020044
 8001840:	40020058 	.word	0x40020058
 8001844:	4002006c 	.word	0x4002006c
 8001848:	40020000 	.word	0x40020000

0800184c <HAL_DMA_IRQHandler>:
  * @param  hdma: pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b084      	sub	sp, #16
 8001850:	af00      	add	r7, sp, #0
 8001852:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 8001854:	687b      	ldr	r3, [r7, #4]
 8001856:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001858:	681b      	ldr	r3, [r3, #0]
 800185a:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	60bb      	str	r3, [r7, #8]
  
  /* Half Transfer Complete Interrupt management ******************************/
  if (((flag_it & (DMA_FLAG_HT1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_HT) != RESET))
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001868:	2204      	movs	r2, #4
 800186a:	409a      	lsls	r2, r3
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	4013      	ands	r3, r2
 8001870:	2b00      	cmp	r3, #0
 8001872:	d04f      	beq.n	8001914 <HAL_DMA_IRQHandler+0xc8>
 8001874:	68bb      	ldr	r3, [r7, #8]
 8001876:	f003 0304 	and.w	r3, r3, #4
 800187a:	2b00      	cmp	r3, #0
 800187c:	d04a      	beq.n	8001914 <HAL_DMA_IRQHandler+0xc8>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	f003 0320 	and.w	r3, r3, #32
 8001888:	2b00      	cmp	r3, #0
 800188a:	d107      	bne.n	800189c <HAL_DMA_IRQHandler+0x50>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	681a      	ldr	r2, [r3, #0]
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	f022 0204 	bic.w	r2, r2, #4
 800189a:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_HT_FLAG_INDEX(hdma));
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	681b      	ldr	r3, [r3, #0]
 80018a0:	4a66      	ldr	r2, [pc, #408]	@ (8001a3c <HAL_DMA_IRQHandler+0x1f0>)
 80018a2:	4293      	cmp	r3, r2
 80018a4:	d029      	beq.n	80018fa <HAL_DMA_IRQHandler+0xae>
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	4a65      	ldr	r2, [pc, #404]	@ (8001a40 <HAL_DMA_IRQHandler+0x1f4>)
 80018ac:	4293      	cmp	r3, r2
 80018ae:	d022      	beq.n	80018f6 <HAL_DMA_IRQHandler+0xaa>
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	681b      	ldr	r3, [r3, #0]
 80018b4:	4a63      	ldr	r2, [pc, #396]	@ (8001a44 <HAL_DMA_IRQHandler+0x1f8>)
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d01a      	beq.n	80018f0 <HAL_DMA_IRQHandler+0xa4>
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	4a62      	ldr	r2, [pc, #392]	@ (8001a48 <HAL_DMA_IRQHandler+0x1fc>)
 80018c0:	4293      	cmp	r3, r2
 80018c2:	d012      	beq.n	80018ea <HAL_DMA_IRQHandler+0x9e>
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	681b      	ldr	r3, [r3, #0]
 80018c8:	4a60      	ldr	r2, [pc, #384]	@ (8001a4c <HAL_DMA_IRQHandler+0x200>)
 80018ca:	4293      	cmp	r3, r2
 80018cc:	d00a      	beq.n	80018e4 <HAL_DMA_IRQHandler+0x98>
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	681b      	ldr	r3, [r3, #0]
 80018d2:	4a5f      	ldr	r2, [pc, #380]	@ (8001a50 <HAL_DMA_IRQHandler+0x204>)
 80018d4:	4293      	cmp	r3, r2
 80018d6:	d102      	bne.n	80018de <HAL_DMA_IRQHandler+0x92>
 80018d8:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80018dc:	e00e      	b.n	80018fc <HAL_DMA_IRQHandler+0xb0>
 80018de:	f04f 6380 	mov.w	r3, #67108864	@ 0x4000000
 80018e2:	e00b      	b.n	80018fc <HAL_DMA_IRQHandler+0xb0>
 80018e4:	f44f 2380 	mov.w	r3, #262144	@ 0x40000
 80018e8:	e008      	b.n	80018fc <HAL_DMA_IRQHandler+0xb0>
 80018ea:	f44f 4380 	mov.w	r3, #16384	@ 0x4000
 80018ee:	e005      	b.n	80018fc <HAL_DMA_IRQHandler+0xb0>
 80018f0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80018f4:	e002      	b.n	80018fc <HAL_DMA_IRQHandler+0xb0>
 80018f6:	2340      	movs	r3, #64	@ 0x40
 80018f8:	e000      	b.n	80018fc <HAL_DMA_IRQHandler+0xb0>
 80018fa:	2304      	movs	r3, #4
 80018fc:	4a55      	ldr	r2, [pc, #340]	@ (8001a54 <HAL_DMA_IRQHandler+0x208>)
 80018fe:	6053      	str	r3, [r2, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if(hdma->XferHalfCpltCallback != NULL)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 8094 	beq.w	8001a32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800190e:	6878      	ldr	r0, [r7, #4]
 8001910:	4798      	blx	r3
    if(hdma->XferHalfCpltCallback != NULL)
 8001912:	e08e      	b.n	8001a32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if (((flag_it & (DMA_FLAG_TC1 << hdma->ChannelIndex)) != RESET) && ((source_it & DMA_IT_TC) != RESET))
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001918:	2202      	movs	r2, #2
 800191a:	409a      	lsls	r2, r3
 800191c:	68fb      	ldr	r3, [r7, #12]
 800191e:	4013      	ands	r3, r2
 8001920:	2b00      	cmp	r3, #0
 8001922:	d056      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x186>
 8001924:	68bb      	ldr	r3, [r7, #8]
 8001926:	f003 0302 	and.w	r3, r3, #2
 800192a:	2b00      	cmp	r3, #0
 800192c:	d051      	beq.n	80019d2 <HAL_DMA_IRQHandler+0x186>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	f003 0320 	and.w	r3, r3, #32
 8001938:	2b00      	cmp	r3, #0
 800193a:	d10b      	bne.n	8001954 <HAL_DMA_IRQHandler+0x108>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);  
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	681a      	ldr	r2, [r3, #0]
 8001942:	687b      	ldr	r3, [r7, #4]
 8001944:	681b      	ldr	r3, [r3, #0]
 8001946:	f022 020a 	bic.w	r2, r2, #10
 800194a:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800194c:	687b      	ldr	r3, [r7, #4]
 800194e:	2201      	movs	r2, #1
 8001950:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21
    }
    /* Clear the transfer complete flag */
      __HAL_DMA_CLEAR_FLAG(hdma, __HAL_DMA_GET_TC_FLAG_INDEX(hdma));
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	681b      	ldr	r3, [r3, #0]
 8001958:	4a38      	ldr	r2, [pc, #224]	@ (8001a3c <HAL_DMA_IRQHandler+0x1f0>)
 800195a:	4293      	cmp	r3, r2
 800195c:	d029      	beq.n	80019b2 <HAL_DMA_IRQHandler+0x166>
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	681b      	ldr	r3, [r3, #0]
 8001962:	4a37      	ldr	r2, [pc, #220]	@ (8001a40 <HAL_DMA_IRQHandler+0x1f4>)
 8001964:	4293      	cmp	r3, r2
 8001966:	d022      	beq.n	80019ae <HAL_DMA_IRQHandler+0x162>
 8001968:	687b      	ldr	r3, [r7, #4]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	4a35      	ldr	r2, [pc, #212]	@ (8001a44 <HAL_DMA_IRQHandler+0x1f8>)
 800196e:	4293      	cmp	r3, r2
 8001970:	d01a      	beq.n	80019a8 <HAL_DMA_IRQHandler+0x15c>
 8001972:	687b      	ldr	r3, [r7, #4]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4a34      	ldr	r2, [pc, #208]	@ (8001a48 <HAL_DMA_IRQHandler+0x1fc>)
 8001978:	4293      	cmp	r3, r2
 800197a:	d012      	beq.n	80019a2 <HAL_DMA_IRQHandler+0x156>
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a32      	ldr	r2, [pc, #200]	@ (8001a4c <HAL_DMA_IRQHandler+0x200>)
 8001982:	4293      	cmp	r3, r2
 8001984:	d00a      	beq.n	800199c <HAL_DMA_IRQHandler+0x150>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a31      	ldr	r2, [pc, #196]	@ (8001a50 <HAL_DMA_IRQHandler+0x204>)
 800198c:	4293      	cmp	r3, r2
 800198e:	d102      	bne.n	8001996 <HAL_DMA_IRQHandler+0x14a>
 8001990:	f44f 1300 	mov.w	r3, #2097152	@ 0x200000
 8001994:	e00e      	b.n	80019b4 <HAL_DMA_IRQHandler+0x168>
 8001996:	f04f 7300 	mov.w	r3, #33554432	@ 0x2000000
 800199a:	e00b      	b.n	80019b4 <HAL_DMA_IRQHandler+0x168>
 800199c:	f44f 3300 	mov.w	r3, #131072	@ 0x20000
 80019a0:	e008      	b.n	80019b4 <HAL_DMA_IRQHandler+0x168>
 80019a2:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80019a6:	e005      	b.n	80019b4 <HAL_DMA_IRQHandler+0x168>
 80019a8:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80019ac:	e002      	b.n	80019b4 <HAL_DMA_IRQHandler+0x168>
 80019ae:	2320      	movs	r3, #32
 80019b0:	e000      	b.n	80019b4 <HAL_DMA_IRQHandler+0x168>
 80019b2:	2302      	movs	r3, #2
 80019b4:	4a27      	ldr	r2, [pc, #156]	@ (8001a54 <HAL_DMA_IRQHandler+0x208>)
 80019b6:	6053      	str	r3, [r2, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	2200      	movs	r2, #0
 80019bc:	f883 2020 	strb.w	r2, [r3, #32]

    if(hdma->XferCpltCallback != NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	d034      	beq.n	8001a32 <HAL_DMA_IRQHandler+0x1e6>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 80019c8:	687b      	ldr	r3, [r7, #4]
 80019ca:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80019cc:	6878      	ldr	r0, [r7, #4]
 80019ce:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 80019d0:	e02f      	b.n	8001a32 <HAL_DMA_IRQHandler+0x1e6>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if (( RESET != (flag_it & (DMA_FLAG_TE1 << hdma->ChannelIndex))) && (RESET != (source_it & DMA_IT_TE)))
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019d6:	2208      	movs	r2, #8
 80019d8:	409a      	lsls	r2, r3
 80019da:	68fb      	ldr	r3, [r7, #12]
 80019dc:	4013      	ands	r3, r2
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d028      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x1e8>
 80019e2:	68bb      	ldr	r3, [r7, #8]
 80019e4:	f003 0308 	and.w	r3, r3, #8
 80019e8:	2b00      	cmp	r3, #0
 80019ea:	d023      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x1e8>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 020e 	bic.w	r2, r2, #14
 80019fa:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a04:	2101      	movs	r1, #1
 8001a06:	fa01 f202 	lsl.w	r2, r1, r2
 8001a0a:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	2201      	movs	r2, #1
 8001a10:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	2201      	movs	r2, #1
 8001a16:	f883 2021 	strb.w	r2, [r3, #33]	@ 0x21

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001a1a:	687b      	ldr	r3, [r7, #4]
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	f883 2020 	strb.w	r2, [r3, #32]

    if (hdma->XferErrorCallback != NULL)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d004      	beq.n	8001a34 <HAL_DMA_IRQHandler+0x1e8>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a2e:	6878      	ldr	r0, [r7, #4]
 8001a30:	4798      	blx	r3
    }
  }
  return;
 8001a32:	bf00      	nop
 8001a34:	bf00      	nop
}
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}
 8001a3c:	40020008 	.word	0x40020008
 8001a40:	4002001c 	.word	0x4002001c
 8001a44:	40020030 	.word	0x40020030
 8001a48:	40020044 	.word	0x40020044
 8001a4c:	40020058 	.word	0x40020058
 8001a50:	4002006c 	.word	0x4002006c
 8001a54:	40020000 	.word	0x40020000

08001a58 <DMA_SetConfig>:
  * @param  DstAddress: The destination memory Buffer address
  * @param  DataLength: The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8001a58:	b480      	push	{r7}
 8001a5a:	b085      	sub	sp, #20
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	60f8      	str	r0, [r7, #12]
 8001a60:	60b9      	str	r1, [r7, #8]
 8001a62:	607a      	str	r2, [r7, #4]
 8001a64:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << hdma->ChannelIndex);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8001a6a:	68fb      	ldr	r3, [r7, #12]
 8001a6c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8001a6e:	2101      	movs	r1, #1
 8001a70:	fa01 f202 	lsl.w	r2, r1, r2
 8001a74:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 8001a76:	68fb      	ldr	r3, [r7, #12]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	683a      	ldr	r2, [r7, #0]
 8001a7c:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8001a7e:	68fb      	ldr	r3, [r7, #12]
 8001a80:	685b      	ldr	r3, [r3, #4]
 8001a82:	2b10      	cmp	r3, #16
 8001a84:	d108      	bne.n	8001a98 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 8001a86:	68fb      	ldr	r3, [r7, #12]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	687a      	ldr	r2, [r7, #4]
 8001a8c:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	68ba      	ldr	r2, [r7, #8]
 8001a94:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8001a96:	e007      	b.n	8001aa8 <DMA_SetConfig+0x50>
    hdma->Instance->CPAR = SrcAddress;
 8001a98:	68fb      	ldr	r3, [r7, #12]
 8001a9a:	681b      	ldr	r3, [r3, #0]
 8001a9c:	68ba      	ldr	r2, [r7, #8]
 8001a9e:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 8001aa0:	68fb      	ldr	r3, [r7, #12]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	687a      	ldr	r2, [r7, #4]
 8001aa6:	60da      	str	r2, [r3, #12]
}
 8001aa8:	bf00      	nop
 8001aaa:	3714      	adds	r7, #20
 8001aac:	46bd      	mov	sp, r7
 8001aae:	bc80      	pop	{r7}
 8001ab0:	4770      	bx	lr
	...

08001ab4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001ab4:	b480      	push	{r7}
 8001ab6:	b08b      	sub	sp, #44	@ 0x2c
 8001ab8:	af00      	add	r7, sp, #0
 8001aba:	6078      	str	r0, [r7, #4]
 8001abc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001abe:	2300      	movs	r3, #0
 8001ac0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001ac6:	e169      	b.n	8001d9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001ac8:	2201      	movs	r2, #1
 8001aca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001acc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ad0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001ad2:	683b      	ldr	r3, [r7, #0]
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	69fa      	ldr	r2, [r7, #28]
 8001ad8:	4013      	ands	r3, r2
 8001ada:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001adc:	69ba      	ldr	r2, [r7, #24]
 8001ade:	69fb      	ldr	r3, [r7, #28]
 8001ae0:	429a      	cmp	r2, r3
 8001ae2:	f040 8158 	bne.w	8001d96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ae6:	683b      	ldr	r3, [r7, #0]
 8001ae8:	685b      	ldr	r3, [r3, #4]
 8001aea:	4a9a      	ldr	r2, [pc, #616]	@ (8001d54 <HAL_GPIO_Init+0x2a0>)
 8001aec:	4293      	cmp	r3, r2
 8001aee:	d05e      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
 8001af0:	4a98      	ldr	r2, [pc, #608]	@ (8001d54 <HAL_GPIO_Init+0x2a0>)
 8001af2:	4293      	cmp	r3, r2
 8001af4:	d875      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001af6:	4a98      	ldr	r2, [pc, #608]	@ (8001d58 <HAL_GPIO_Init+0x2a4>)
 8001af8:	4293      	cmp	r3, r2
 8001afa:	d058      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
 8001afc:	4a96      	ldr	r2, [pc, #600]	@ (8001d58 <HAL_GPIO_Init+0x2a4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d86f      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001b02:	4a96      	ldr	r2, [pc, #600]	@ (8001d5c <HAL_GPIO_Init+0x2a8>)
 8001b04:	4293      	cmp	r3, r2
 8001b06:	d052      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
 8001b08:	4a94      	ldr	r2, [pc, #592]	@ (8001d5c <HAL_GPIO_Init+0x2a8>)
 8001b0a:	4293      	cmp	r3, r2
 8001b0c:	d869      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001b0e:	4a94      	ldr	r2, [pc, #592]	@ (8001d60 <HAL_GPIO_Init+0x2ac>)
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d04c      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
 8001b14:	4a92      	ldr	r2, [pc, #584]	@ (8001d60 <HAL_GPIO_Init+0x2ac>)
 8001b16:	4293      	cmp	r3, r2
 8001b18:	d863      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001b1a:	4a92      	ldr	r2, [pc, #584]	@ (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001b1c:	4293      	cmp	r3, r2
 8001b1e:	d046      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
 8001b20:	4a90      	ldr	r2, [pc, #576]	@ (8001d64 <HAL_GPIO_Init+0x2b0>)
 8001b22:	4293      	cmp	r3, r2
 8001b24:	d85d      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001b26:	2b12      	cmp	r3, #18
 8001b28:	d82a      	bhi.n	8001b80 <HAL_GPIO_Init+0xcc>
 8001b2a:	2b12      	cmp	r3, #18
 8001b2c:	d859      	bhi.n	8001be2 <HAL_GPIO_Init+0x12e>
 8001b2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001b34 <HAL_GPIO_Init+0x80>)
 8001b30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001b34:	08001baf 	.word	0x08001baf
 8001b38:	08001b89 	.word	0x08001b89
 8001b3c:	08001b9b 	.word	0x08001b9b
 8001b40:	08001bdd 	.word	0x08001bdd
 8001b44:	08001be3 	.word	0x08001be3
 8001b48:	08001be3 	.word	0x08001be3
 8001b4c:	08001be3 	.word	0x08001be3
 8001b50:	08001be3 	.word	0x08001be3
 8001b54:	08001be3 	.word	0x08001be3
 8001b58:	08001be3 	.word	0x08001be3
 8001b5c:	08001be3 	.word	0x08001be3
 8001b60:	08001be3 	.word	0x08001be3
 8001b64:	08001be3 	.word	0x08001be3
 8001b68:	08001be3 	.word	0x08001be3
 8001b6c:	08001be3 	.word	0x08001be3
 8001b70:	08001be3 	.word	0x08001be3
 8001b74:	08001be3 	.word	0x08001be3
 8001b78:	08001b91 	.word	0x08001b91
 8001b7c:	08001ba5 	.word	0x08001ba5
 8001b80:	4a79      	ldr	r2, [pc, #484]	@ (8001d68 <HAL_GPIO_Init+0x2b4>)
 8001b82:	4293      	cmp	r3, r2
 8001b84:	d013      	beq.n	8001bae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001b86:	e02c      	b.n	8001be2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	68db      	ldr	r3, [r3, #12]
 8001b8c:	623b      	str	r3, [r7, #32]
          break;
 8001b8e:	e029      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	68db      	ldr	r3, [r3, #12]
 8001b94:	3304      	adds	r3, #4
 8001b96:	623b      	str	r3, [r7, #32]
          break;
 8001b98:	e024      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001b9a:	683b      	ldr	r3, [r7, #0]
 8001b9c:	68db      	ldr	r3, [r3, #12]
 8001b9e:	3308      	adds	r3, #8
 8001ba0:	623b      	str	r3, [r7, #32]
          break;
 8001ba2:	e01f      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001ba4:	683b      	ldr	r3, [r7, #0]
 8001ba6:	68db      	ldr	r3, [r3, #12]
 8001ba8:	330c      	adds	r3, #12
 8001baa:	623b      	str	r3, [r7, #32]
          break;
 8001bac:	e01a      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001bae:	683b      	ldr	r3, [r7, #0]
 8001bb0:	689b      	ldr	r3, [r3, #8]
 8001bb2:	2b00      	cmp	r3, #0
 8001bb4:	d102      	bne.n	8001bbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001bb6:	2304      	movs	r3, #4
 8001bb8:	623b      	str	r3, [r7, #32]
          break;
 8001bba:	e013      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001bbc:	683b      	ldr	r3, [r7, #0]
 8001bbe:	689b      	ldr	r3, [r3, #8]
 8001bc0:	2b01      	cmp	r3, #1
 8001bc2:	d105      	bne.n	8001bd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bc4:	2308      	movs	r3, #8
 8001bc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	69fa      	ldr	r2, [r7, #28]
 8001bcc:	611a      	str	r2, [r3, #16]
          break;
 8001bce:	e009      	b.n	8001be4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001bd0:	2308      	movs	r3, #8
 8001bd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	69fa      	ldr	r2, [r7, #28]
 8001bd8:	615a      	str	r2, [r3, #20]
          break;
 8001bda:	e003      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001bdc:	2300      	movs	r3, #0
 8001bde:	623b      	str	r3, [r7, #32]
          break;
 8001be0:	e000      	b.n	8001be4 <HAL_GPIO_Init+0x130>
          break;
 8001be2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001be4:	69bb      	ldr	r3, [r7, #24]
 8001be6:	2bff      	cmp	r3, #255	@ 0xff
 8001be8:	d801      	bhi.n	8001bee <HAL_GPIO_Init+0x13a>
 8001bea:	687b      	ldr	r3, [r7, #4]
 8001bec:	e001      	b.n	8001bf2 <HAL_GPIO_Init+0x13e>
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	3304      	adds	r3, #4
 8001bf2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001bf4:	69bb      	ldr	r3, [r7, #24]
 8001bf6:	2bff      	cmp	r3, #255	@ 0xff
 8001bf8:	d802      	bhi.n	8001c00 <HAL_GPIO_Init+0x14c>
 8001bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001bfc:	009b      	lsls	r3, r3, #2
 8001bfe:	e002      	b.n	8001c06 <HAL_GPIO_Init+0x152>
 8001c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c02:	3b08      	subs	r3, #8
 8001c04:	009b      	lsls	r3, r3, #2
 8001c06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	210f      	movs	r1, #15
 8001c0e:	693b      	ldr	r3, [r7, #16]
 8001c10:	fa01 f303 	lsl.w	r3, r1, r3
 8001c14:	43db      	mvns	r3, r3
 8001c16:	401a      	ands	r2, r3
 8001c18:	6a39      	ldr	r1, [r7, #32]
 8001c1a:	693b      	ldr	r3, [r7, #16]
 8001c1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001c20:	431a      	orrs	r2, r3
 8001c22:	697b      	ldr	r3, [r7, #20]
 8001c24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	685b      	ldr	r3, [r3, #4]
 8001c2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	f000 80b1 	beq.w	8001d96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001c34:	4b4d      	ldr	r3, [pc, #308]	@ (8001d6c <HAL_GPIO_Init+0x2b8>)
 8001c36:	699b      	ldr	r3, [r3, #24]
 8001c38:	4a4c      	ldr	r2, [pc, #304]	@ (8001d6c <HAL_GPIO_Init+0x2b8>)
 8001c3a:	f043 0301 	orr.w	r3, r3, #1
 8001c3e:	6193      	str	r3, [r2, #24]
 8001c40:	4b4a      	ldr	r3, [pc, #296]	@ (8001d6c <HAL_GPIO_Init+0x2b8>)
 8001c42:	699b      	ldr	r3, [r3, #24]
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	60bb      	str	r3, [r7, #8]
 8001c4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001c4c:	4a48      	ldr	r2, [pc, #288]	@ (8001d70 <HAL_GPIO_Init+0x2bc>)
 8001c4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c50:	089b      	lsrs	r3, r3, #2
 8001c52:	3302      	adds	r3, #2
 8001c54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001c58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	f003 0303 	and.w	r3, r3, #3
 8001c60:	009b      	lsls	r3, r3, #2
 8001c62:	220f      	movs	r2, #15
 8001c64:	fa02 f303 	lsl.w	r3, r2, r3
 8001c68:	43db      	mvns	r3, r3
 8001c6a:	68fa      	ldr	r2, [r7, #12]
 8001c6c:	4013      	ands	r3, r2
 8001c6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	4a40      	ldr	r2, [pc, #256]	@ (8001d74 <HAL_GPIO_Init+0x2c0>)
 8001c74:	4293      	cmp	r3, r2
 8001c76:	d013      	beq.n	8001ca0 <HAL_GPIO_Init+0x1ec>
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	4a3f      	ldr	r2, [pc, #252]	@ (8001d78 <HAL_GPIO_Init+0x2c4>)
 8001c7c:	4293      	cmp	r3, r2
 8001c7e:	d00d      	beq.n	8001c9c <HAL_GPIO_Init+0x1e8>
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	4a3e      	ldr	r2, [pc, #248]	@ (8001d7c <HAL_GPIO_Init+0x2c8>)
 8001c84:	4293      	cmp	r3, r2
 8001c86:	d007      	beq.n	8001c98 <HAL_GPIO_Init+0x1e4>
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	4a3d      	ldr	r2, [pc, #244]	@ (8001d80 <HAL_GPIO_Init+0x2cc>)
 8001c8c:	4293      	cmp	r3, r2
 8001c8e:	d101      	bne.n	8001c94 <HAL_GPIO_Init+0x1e0>
 8001c90:	2303      	movs	r3, #3
 8001c92:	e006      	b.n	8001ca2 <HAL_GPIO_Init+0x1ee>
 8001c94:	2304      	movs	r3, #4
 8001c96:	e004      	b.n	8001ca2 <HAL_GPIO_Init+0x1ee>
 8001c98:	2302      	movs	r3, #2
 8001c9a:	e002      	b.n	8001ca2 <HAL_GPIO_Init+0x1ee>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <HAL_GPIO_Init+0x1ee>
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ca4:	f002 0203 	and.w	r2, r2, #3
 8001ca8:	0092      	lsls	r2, r2, #2
 8001caa:	4093      	lsls	r3, r2
 8001cac:	68fa      	ldr	r2, [r7, #12]
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001cb2:	492f      	ldr	r1, [pc, #188]	@ (8001d70 <HAL_GPIO_Init+0x2bc>)
 8001cb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cb6:	089b      	lsrs	r3, r3, #2
 8001cb8:	3302      	adds	r3, #2
 8001cba:	68fa      	ldr	r2, [r7, #12]
 8001cbc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001cc0:	683b      	ldr	r3, [r7, #0]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	d006      	beq.n	8001cda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ccc:	4b2d      	ldr	r3, [pc, #180]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001cce:	689a      	ldr	r2, [r3, #8]
 8001cd0:	492c      	ldr	r1, [pc, #176]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001cd2:	69bb      	ldr	r3, [r7, #24]
 8001cd4:	4313      	orrs	r3, r2
 8001cd6:	608b      	str	r3, [r1, #8]
 8001cd8:	e006      	b.n	8001ce8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001cda:	4b2a      	ldr	r3, [pc, #168]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001cdc:	689a      	ldr	r2, [r3, #8]
 8001cde:	69bb      	ldr	r3, [r7, #24]
 8001ce0:	43db      	mvns	r3, r3
 8001ce2:	4928      	ldr	r1, [pc, #160]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001ce4:	4013      	ands	r3, r2
 8001ce6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ce8:	683b      	ldr	r3, [r7, #0]
 8001cea:	685b      	ldr	r3, [r3, #4]
 8001cec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001cf0:	2b00      	cmp	r3, #0
 8001cf2:	d006      	beq.n	8001d02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001cf4:	4b23      	ldr	r3, [pc, #140]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	4922      	ldr	r1, [pc, #136]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001cfa:	69bb      	ldr	r3, [r7, #24]
 8001cfc:	4313      	orrs	r3, r2
 8001cfe:	60cb      	str	r3, [r1, #12]
 8001d00:	e006      	b.n	8001d10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d02:	4b20      	ldr	r3, [pc, #128]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d04:	68da      	ldr	r2, [r3, #12]
 8001d06:	69bb      	ldr	r3, [r7, #24]
 8001d08:	43db      	mvns	r3, r3
 8001d0a:	491e      	ldr	r1, [pc, #120]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d0c:	4013      	ands	r3, r2
 8001d0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001d10:	683b      	ldr	r3, [r7, #0]
 8001d12:	685b      	ldr	r3, [r3, #4]
 8001d14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d006      	beq.n	8001d2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001d1c:	4b19      	ldr	r3, [pc, #100]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d1e:	685a      	ldr	r2, [r3, #4]
 8001d20:	4918      	ldr	r1, [pc, #96]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d22:	69bb      	ldr	r3, [r7, #24]
 8001d24:	4313      	orrs	r3, r2
 8001d26:	604b      	str	r3, [r1, #4]
 8001d28:	e006      	b.n	8001d38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001d2a:	4b16      	ldr	r3, [pc, #88]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d2c:	685a      	ldr	r2, [r3, #4]
 8001d2e:	69bb      	ldr	r3, [r7, #24]
 8001d30:	43db      	mvns	r3, r3
 8001d32:	4914      	ldr	r1, [pc, #80]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d34:	4013      	ands	r3, r2
 8001d36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001d38:	683b      	ldr	r3, [r7, #0]
 8001d3a:	685b      	ldr	r3, [r3, #4]
 8001d3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001d40:	2b00      	cmp	r3, #0
 8001d42:	d021      	beq.n	8001d88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001d44:	4b0f      	ldr	r3, [pc, #60]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d46:	681a      	ldr	r2, [r3, #0]
 8001d48:	490e      	ldr	r1, [pc, #56]	@ (8001d84 <HAL_GPIO_Init+0x2d0>)
 8001d4a:	69bb      	ldr	r3, [r7, #24]
 8001d4c:	4313      	orrs	r3, r2
 8001d4e:	600b      	str	r3, [r1, #0]
 8001d50:	e021      	b.n	8001d96 <HAL_GPIO_Init+0x2e2>
 8001d52:	bf00      	nop
 8001d54:	10320000 	.word	0x10320000
 8001d58:	10310000 	.word	0x10310000
 8001d5c:	10220000 	.word	0x10220000
 8001d60:	10210000 	.word	0x10210000
 8001d64:	10120000 	.word	0x10120000
 8001d68:	10110000 	.word	0x10110000
 8001d6c:	40021000 	.word	0x40021000
 8001d70:	40010000 	.word	0x40010000
 8001d74:	40010800 	.word	0x40010800
 8001d78:	40010c00 	.word	0x40010c00
 8001d7c:	40011000 	.word	0x40011000
 8001d80:	40011400 	.word	0x40011400
 8001d84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001d88:	4b0b      	ldr	r3, [pc, #44]	@ (8001db8 <HAL_GPIO_Init+0x304>)
 8001d8a:	681a      	ldr	r2, [r3, #0]
 8001d8c:	69bb      	ldr	r3, [r7, #24]
 8001d8e:	43db      	mvns	r3, r3
 8001d90:	4909      	ldr	r1, [pc, #36]	@ (8001db8 <HAL_GPIO_Init+0x304>)
 8001d92:	4013      	ands	r3, r2
 8001d94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001d96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d98:	3301      	adds	r3, #1
 8001d9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001d9c:	683b      	ldr	r3, [r7, #0]
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001da2:	fa22 f303 	lsr.w	r3, r2, r3
 8001da6:	2b00      	cmp	r3, #0
 8001da8:	f47f ae8e 	bne.w	8001ac8 <HAL_GPIO_Init+0x14>
  }
}
 8001dac:	bf00      	nop
 8001dae:	bf00      	nop
 8001db0:	372c      	adds	r7, #44	@ 0x2c
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bc80      	pop	{r7}
 8001db6:	4770      	bx	lr
 8001db8:	40010400 	.word	0x40010400

08001dbc <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001dbc:	b580      	push	{r7, lr}
 8001dbe:	b086      	sub	sp, #24
 8001dc0:	af00      	add	r7, sp, #0
 8001dc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	2b00      	cmp	r3, #0
 8001dc8:	d101      	bne.n	8001dce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	e272      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	f003 0301 	and.w	r3, r3, #1
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f000 8087 	beq.w	8001eea <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ddc:	4b92      	ldr	r3, [pc, #584]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001dde:	685b      	ldr	r3, [r3, #4]
 8001de0:	f003 030c 	and.w	r3, r3, #12
 8001de4:	2b04      	cmp	r3, #4
 8001de6:	d00c      	beq.n	8001e02 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001de8:	4b8f      	ldr	r3, [pc, #572]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001dea:	685b      	ldr	r3, [r3, #4]
 8001dec:	f003 030c 	and.w	r3, r3, #12
 8001df0:	2b08      	cmp	r3, #8
 8001df2:	d112      	bne.n	8001e1a <HAL_RCC_OscConfig+0x5e>
 8001df4:	4b8c      	ldr	r3, [pc, #560]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001df6:	685b      	ldr	r3, [r3, #4]
 8001df8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dfc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e00:	d10b      	bne.n	8001e1a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e02:	4b89      	ldr	r3, [pc, #548]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001e0a:	2b00      	cmp	r3, #0
 8001e0c:	d06c      	beq.n	8001ee8 <HAL_RCC_OscConfig+0x12c>
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	685b      	ldr	r3, [r3, #4]
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d168      	bne.n	8001ee8 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001e16:	2301      	movs	r3, #1
 8001e18:	e24c      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	685b      	ldr	r3, [r3, #4]
 8001e1e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001e22:	d106      	bne.n	8001e32 <HAL_RCC_OscConfig+0x76>
 8001e24:	4b80      	ldr	r3, [pc, #512]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e26:	681b      	ldr	r3, [r3, #0]
 8001e28:	4a7f      	ldr	r2, [pc, #508]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e2a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e2e:	6013      	str	r3, [r2, #0]
 8001e30:	e02e      	b.n	8001e90 <HAL_RCC_OscConfig+0xd4>
 8001e32:	687b      	ldr	r3, [r7, #4]
 8001e34:	685b      	ldr	r3, [r3, #4]
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d10c      	bne.n	8001e54 <HAL_RCC_OscConfig+0x98>
 8001e3a:	4b7b      	ldr	r3, [pc, #492]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	4a7a      	ldr	r2, [pc, #488]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e40:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e44:	6013      	str	r3, [r2, #0]
 8001e46:	4b78      	ldr	r3, [pc, #480]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	4a77      	ldr	r2, [pc, #476]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e4c:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e50:	6013      	str	r3, [r2, #0]
 8001e52:	e01d      	b.n	8001e90 <HAL_RCC_OscConfig+0xd4>
 8001e54:	687b      	ldr	r3, [r7, #4]
 8001e56:	685b      	ldr	r3, [r3, #4]
 8001e58:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001e5c:	d10c      	bne.n	8001e78 <HAL_RCC_OscConfig+0xbc>
 8001e5e:	4b72      	ldr	r3, [pc, #456]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	4a71      	ldr	r2, [pc, #452]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001e68:	6013      	str	r3, [r2, #0]
 8001e6a:	4b6f      	ldr	r3, [pc, #444]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	681b      	ldr	r3, [r3, #0]
 8001e6e:	4a6e      	ldr	r2, [pc, #440]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001e74:	6013      	str	r3, [r2, #0]
 8001e76:	e00b      	b.n	8001e90 <HAL_RCC_OscConfig+0xd4>
 8001e78:	4b6b      	ldr	r3, [pc, #428]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	4a6a      	ldr	r2, [pc, #424]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001e82:	6013      	str	r3, [r2, #0]
 8001e84:	4b68      	ldr	r3, [pc, #416]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	4a67      	ldr	r2, [pc, #412]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001e8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001e8e:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	685b      	ldr	r3, [r3, #4]
 8001e94:	2b00      	cmp	r3, #0
 8001e96:	d013      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e98:	f7fe fdce 	bl	8000a38 <HAL_GetTick>
 8001e9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e9e:	e008      	b.n	8001eb2 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ea0:	f7fe fdca 	bl	8000a38 <HAL_GetTick>
 8001ea4:	4602      	mov	r2, r0
 8001ea6:	693b      	ldr	r3, [r7, #16]
 8001ea8:	1ad3      	subs	r3, r2, r3
 8001eaa:	2b64      	cmp	r3, #100	@ 0x64
 8001eac:	d901      	bls.n	8001eb2 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001eae:	2303      	movs	r3, #3
 8001eb0:	e200      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001eb2:	4b5d      	ldr	r3, [pc, #372]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d0f0      	beq.n	8001ea0 <HAL_RCC_OscConfig+0xe4>
 8001ebe:	e014      	b.n	8001eea <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ec0:	f7fe fdba 	bl	8000a38 <HAL_GetTick>
 8001ec4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001ec6:	e008      	b.n	8001eda <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001ec8:	f7fe fdb6 	bl	8000a38 <HAL_GetTick>
 8001ecc:	4602      	mov	r2, r0
 8001ece:	693b      	ldr	r3, [r7, #16]
 8001ed0:	1ad3      	subs	r3, r2, r3
 8001ed2:	2b64      	cmp	r3, #100	@ 0x64
 8001ed4:	d901      	bls.n	8001eda <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001ed6:	2303      	movs	r3, #3
 8001ed8:	e1ec      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001eda:	4b53      	ldr	r3, [pc, #332]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d1f0      	bne.n	8001ec8 <HAL_RCC_OscConfig+0x10c>
 8001ee6:	e000      	b.n	8001eea <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ee8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	f003 0302 	and.w	r3, r3, #2
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d063      	beq.n	8001fbe <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001ef6:	4b4c      	ldr	r3, [pc, #304]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	f003 030c 	and.w	r3, r3, #12
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d00b      	beq.n	8001f1a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001f02:	4b49      	ldr	r3, [pc, #292]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	f003 030c 	and.w	r3, r3, #12
 8001f0a:	2b08      	cmp	r3, #8
 8001f0c:	d11c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x18c>
 8001f0e:	4b46      	ldr	r3, [pc, #280]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d116      	bne.n	8001f48 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f1a:	4b43      	ldr	r3, [pc, #268]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f1c:	681b      	ldr	r3, [r3, #0]
 8001f1e:	f003 0302 	and.w	r3, r3, #2
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d005      	beq.n	8001f32 <HAL_RCC_OscConfig+0x176>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	691b      	ldr	r3, [r3, #16]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d001      	beq.n	8001f32 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001f2e:	2301      	movs	r3, #1
 8001f30:	e1c0      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f32:	4b3d      	ldr	r3, [pc, #244]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	695b      	ldr	r3, [r3, #20]
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	4939      	ldr	r1, [pc, #228]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f42:	4313      	orrs	r3, r2
 8001f44:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001f46:	e03a      	b.n	8001fbe <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	691b      	ldr	r3, [r3, #16]
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d020      	beq.n	8001f92 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001f50:	4b36      	ldr	r3, [pc, #216]	@ (800202c <HAL_RCC_OscConfig+0x270>)
 8001f52:	2201      	movs	r2, #1
 8001f54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f56:	f7fe fd6f 	bl	8000a38 <HAL_GetTick>
 8001f5a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f5c:	e008      	b.n	8001f70 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f5e:	f7fe fd6b 	bl	8000a38 <HAL_GetTick>
 8001f62:	4602      	mov	r2, r0
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	1ad3      	subs	r3, r2, r3
 8001f68:	2b02      	cmp	r3, #2
 8001f6a:	d901      	bls.n	8001f70 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001f6c:	2303      	movs	r3, #3
 8001f6e:	e1a1      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001f70:	4b2d      	ldr	r3, [pc, #180]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0302 	and.w	r3, r3, #2
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d0f0      	beq.n	8001f5e <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001f7c:	4b2a      	ldr	r3, [pc, #168]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	695b      	ldr	r3, [r3, #20]
 8001f88:	00db      	lsls	r3, r3, #3
 8001f8a:	4927      	ldr	r1, [pc, #156]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	600b      	str	r3, [r1, #0]
 8001f90:	e015      	b.n	8001fbe <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f92:	4b26      	ldr	r3, [pc, #152]	@ (800202c <HAL_RCC_OscConfig+0x270>)
 8001f94:	2200      	movs	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f98:	f7fe fd4e 	bl	8000a38 <HAL_GetTick>
 8001f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f9e:	e008      	b.n	8001fb2 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001fa0:	f7fe fd4a 	bl	8000a38 <HAL_GetTick>
 8001fa4:	4602      	mov	r2, r0
 8001fa6:	693b      	ldr	r3, [r7, #16]
 8001fa8:	1ad3      	subs	r3, r2, r3
 8001faa:	2b02      	cmp	r3, #2
 8001fac:	d901      	bls.n	8001fb2 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001fae:	2303      	movs	r3, #3
 8001fb0:	e180      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001fb2:	4b1d      	ldr	r3, [pc, #116]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	f003 0302 	and.w	r3, r3, #2
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d1f0      	bne.n	8001fa0 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	f003 0308 	and.w	r3, r3, #8
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d03a      	beq.n	8002040 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001fca:	687b      	ldr	r3, [r7, #4]
 8001fcc:	699b      	ldr	r3, [r3, #24]
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d019      	beq.n	8002006 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001fd2:	4b17      	ldr	r3, [pc, #92]	@ (8002030 <HAL_RCC_OscConfig+0x274>)
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001fd8:	f7fe fd2e 	bl	8000a38 <HAL_GetTick>
 8001fdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001fde:	e008      	b.n	8001ff2 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fe0:	f7fe fd2a 	bl	8000a38 <HAL_GetTick>
 8001fe4:	4602      	mov	r2, r0
 8001fe6:	693b      	ldr	r3, [r7, #16]
 8001fe8:	1ad3      	subs	r3, r2, r3
 8001fea:	2b02      	cmp	r3, #2
 8001fec:	d901      	bls.n	8001ff2 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001fee:	2303      	movs	r3, #3
 8001ff0:	e160      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001ff2:	4b0d      	ldr	r3, [pc, #52]	@ (8002028 <HAL_RCC_OscConfig+0x26c>)
 8001ff4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ff6:	f003 0302 	and.w	r3, r3, #2
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d0f0      	beq.n	8001fe0 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001ffe:	2001      	movs	r0, #1
 8002000:	f000 face 	bl	80025a0 <RCC_Delay>
 8002004:	e01c      	b.n	8002040 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002006:	4b0a      	ldr	r3, [pc, #40]	@ (8002030 <HAL_RCC_OscConfig+0x274>)
 8002008:	2200      	movs	r2, #0
 800200a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800200c:	f7fe fd14 	bl	8000a38 <HAL_GetTick>
 8002010:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002012:	e00f      	b.n	8002034 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002014:	f7fe fd10 	bl	8000a38 <HAL_GetTick>
 8002018:	4602      	mov	r2, r0
 800201a:	693b      	ldr	r3, [r7, #16]
 800201c:	1ad3      	subs	r3, r2, r3
 800201e:	2b02      	cmp	r3, #2
 8002020:	d908      	bls.n	8002034 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002022:	2303      	movs	r3, #3
 8002024:	e146      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
 8002026:	bf00      	nop
 8002028:	40021000 	.word	0x40021000
 800202c:	42420000 	.word	0x42420000
 8002030:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002034:	4b92      	ldr	r3, [pc, #584]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002036:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002038:	f003 0302 	and.w	r3, r3, #2
 800203c:	2b00      	cmp	r3, #0
 800203e:	d1e9      	bne.n	8002014 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	f003 0304 	and.w	r3, r3, #4
 8002048:	2b00      	cmp	r3, #0
 800204a:	f000 80a6 	beq.w	800219a <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 800204e:	2300      	movs	r3, #0
 8002050:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002052:	4b8b      	ldr	r3, [pc, #556]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002054:	69db      	ldr	r3, [r3, #28]
 8002056:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800205a:	2b00      	cmp	r3, #0
 800205c:	d10d      	bne.n	800207a <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800205e:	4b88      	ldr	r3, [pc, #544]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002060:	69db      	ldr	r3, [r3, #28]
 8002062:	4a87      	ldr	r2, [pc, #540]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002064:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002068:	61d3      	str	r3, [r2, #28]
 800206a:	4b85      	ldr	r3, [pc, #532]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 800206c:	69db      	ldr	r3, [r3, #28]
 800206e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002072:	60bb      	str	r3, [r7, #8]
 8002074:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002076:	2301      	movs	r3, #1
 8002078:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800207a:	4b82      	ldr	r3, [pc, #520]	@ (8002284 <HAL_RCC_OscConfig+0x4c8>)
 800207c:	681b      	ldr	r3, [r3, #0]
 800207e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002082:	2b00      	cmp	r3, #0
 8002084:	d118      	bne.n	80020b8 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002086:	4b7f      	ldr	r3, [pc, #508]	@ (8002284 <HAL_RCC_OscConfig+0x4c8>)
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	4a7e      	ldr	r2, [pc, #504]	@ (8002284 <HAL_RCC_OscConfig+0x4c8>)
 800208c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002090:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002092:	f7fe fcd1 	bl	8000a38 <HAL_GetTick>
 8002096:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002098:	e008      	b.n	80020ac <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800209a:	f7fe fccd 	bl	8000a38 <HAL_GetTick>
 800209e:	4602      	mov	r2, r0
 80020a0:	693b      	ldr	r3, [r7, #16]
 80020a2:	1ad3      	subs	r3, r2, r3
 80020a4:	2b64      	cmp	r3, #100	@ 0x64
 80020a6:	d901      	bls.n	80020ac <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80020a8:	2303      	movs	r3, #3
 80020aa:	e103      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80020ac:	4b75      	ldr	r3, [pc, #468]	@ (8002284 <HAL_RCC_OscConfig+0x4c8>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80020b4:	2b00      	cmp	r3, #0
 80020b6:	d0f0      	beq.n	800209a <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	68db      	ldr	r3, [r3, #12]
 80020bc:	2b01      	cmp	r3, #1
 80020be:	d106      	bne.n	80020ce <HAL_RCC_OscConfig+0x312>
 80020c0:	4b6f      	ldr	r3, [pc, #444]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020c2:	6a1b      	ldr	r3, [r3, #32]
 80020c4:	4a6e      	ldr	r2, [pc, #440]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020c6:	f043 0301 	orr.w	r3, r3, #1
 80020ca:	6213      	str	r3, [r2, #32]
 80020cc:	e02d      	b.n	800212a <HAL_RCC_OscConfig+0x36e>
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	68db      	ldr	r3, [r3, #12]
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10c      	bne.n	80020f0 <HAL_RCC_OscConfig+0x334>
 80020d6:	4b6a      	ldr	r3, [pc, #424]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020d8:	6a1b      	ldr	r3, [r3, #32]
 80020da:	4a69      	ldr	r2, [pc, #420]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020dc:	f023 0301 	bic.w	r3, r3, #1
 80020e0:	6213      	str	r3, [r2, #32]
 80020e2:	4b67      	ldr	r3, [pc, #412]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020e4:	6a1b      	ldr	r3, [r3, #32]
 80020e6:	4a66      	ldr	r2, [pc, #408]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020e8:	f023 0304 	bic.w	r3, r3, #4
 80020ec:	6213      	str	r3, [r2, #32]
 80020ee:	e01c      	b.n	800212a <HAL_RCC_OscConfig+0x36e>
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	68db      	ldr	r3, [r3, #12]
 80020f4:	2b05      	cmp	r3, #5
 80020f6:	d10c      	bne.n	8002112 <HAL_RCC_OscConfig+0x356>
 80020f8:	4b61      	ldr	r3, [pc, #388]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020fa:	6a1b      	ldr	r3, [r3, #32]
 80020fc:	4a60      	ldr	r2, [pc, #384]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80020fe:	f043 0304 	orr.w	r3, r3, #4
 8002102:	6213      	str	r3, [r2, #32]
 8002104:	4b5e      	ldr	r3, [pc, #376]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002106:	6a1b      	ldr	r3, [r3, #32]
 8002108:	4a5d      	ldr	r2, [pc, #372]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 800210a:	f043 0301 	orr.w	r3, r3, #1
 800210e:	6213      	str	r3, [r2, #32]
 8002110:	e00b      	b.n	800212a <HAL_RCC_OscConfig+0x36e>
 8002112:	4b5b      	ldr	r3, [pc, #364]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002114:	6a1b      	ldr	r3, [r3, #32]
 8002116:	4a5a      	ldr	r2, [pc, #360]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002118:	f023 0301 	bic.w	r3, r3, #1
 800211c:	6213      	str	r3, [r2, #32]
 800211e:	4b58      	ldr	r3, [pc, #352]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002120:	6a1b      	ldr	r3, [r3, #32]
 8002122:	4a57      	ldr	r2, [pc, #348]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002124:	f023 0304 	bic.w	r3, r3, #4
 8002128:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	68db      	ldr	r3, [r3, #12]
 800212e:	2b00      	cmp	r3, #0
 8002130:	d015      	beq.n	800215e <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002132:	f7fe fc81 	bl	8000a38 <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002138:	e00a      	b.n	8002150 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800213a:	f7fe fc7d 	bl	8000a38 <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002148:	4293      	cmp	r3, r2
 800214a:	d901      	bls.n	8002150 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 800214c:	2303      	movs	r3, #3
 800214e:	e0b1      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002150:	4b4b      	ldr	r3, [pc, #300]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002152:	6a1b      	ldr	r3, [r3, #32]
 8002154:	f003 0302 	and.w	r3, r3, #2
 8002158:	2b00      	cmp	r3, #0
 800215a:	d0ee      	beq.n	800213a <HAL_RCC_OscConfig+0x37e>
 800215c:	e014      	b.n	8002188 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215e:	f7fe fc6b 	bl	8000a38 <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002164:	e00a      	b.n	800217c <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002166:	f7fe fc67 	bl	8000a38 <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002174:	4293      	cmp	r3, r2
 8002176:	d901      	bls.n	800217c <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002178:	2303      	movs	r3, #3
 800217a:	e09b      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800217c:	4b40      	ldr	r3, [pc, #256]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 800217e:	6a1b      	ldr	r3, [r3, #32]
 8002180:	f003 0302 	and.w	r3, r3, #2
 8002184:	2b00      	cmp	r3, #0
 8002186:	d1ee      	bne.n	8002166 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002188:	7dfb      	ldrb	r3, [r7, #23]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d105      	bne.n	800219a <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800218e:	4b3c      	ldr	r3, [pc, #240]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002190:	69db      	ldr	r3, [r3, #28]
 8002192:	4a3b      	ldr	r2, [pc, #236]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002194:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002198:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69db      	ldr	r3, [r3, #28]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	f000 8087 	beq.w	80022b2 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021a4:	4b36      	ldr	r3, [pc, #216]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80021a6:	685b      	ldr	r3, [r3, #4]
 80021a8:	f003 030c 	and.w	r3, r3, #12
 80021ac:	2b08      	cmp	r3, #8
 80021ae:	d061      	beq.n	8002274 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	69db      	ldr	r3, [r3, #28]
 80021b4:	2b02      	cmp	r3, #2
 80021b6:	d146      	bne.n	8002246 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021b8:	4b33      	ldr	r3, [pc, #204]	@ (8002288 <HAL_RCC_OscConfig+0x4cc>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021be:	f7fe fc3b 	bl	8000a38 <HAL_GetTick>
 80021c2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c4:	e008      	b.n	80021d8 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c6:	f7fe fc37 	bl	8000a38 <HAL_GetTick>
 80021ca:	4602      	mov	r2, r0
 80021cc:	693b      	ldr	r3, [r7, #16]
 80021ce:	1ad3      	subs	r3, r2, r3
 80021d0:	2b02      	cmp	r3, #2
 80021d2:	d901      	bls.n	80021d8 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80021d4:	2303      	movs	r3, #3
 80021d6:	e06d      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021d8:	4b29      	ldr	r3, [pc, #164]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d1f0      	bne.n	80021c6 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6a1b      	ldr	r3, [r3, #32]
 80021e8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80021ec:	d108      	bne.n	8002200 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80021ee:	4b24      	ldr	r3, [pc, #144]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80021f0:	685b      	ldr	r3, [r3, #4]
 80021f2:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	689b      	ldr	r3, [r3, #8]
 80021fa:	4921      	ldr	r1, [pc, #132]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002200:	4b1f      	ldr	r3, [pc, #124]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002202:	685b      	ldr	r3, [r3, #4]
 8002204:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	6a19      	ldr	r1, [r3, #32]
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002210:	430b      	orrs	r3, r1
 8002212:	491b      	ldr	r1, [pc, #108]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	4313      	orrs	r3, r2
 8002216:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002218:	4b1b      	ldr	r3, [pc, #108]	@ (8002288 <HAL_RCC_OscConfig+0x4cc>)
 800221a:	2201      	movs	r2, #1
 800221c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800221e:	f7fe fc0b 	bl	8000a38 <HAL_GetTick>
 8002222:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002224:	e008      	b.n	8002238 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002226:	f7fe fc07 	bl	8000a38 <HAL_GetTick>
 800222a:	4602      	mov	r2, r0
 800222c:	693b      	ldr	r3, [r7, #16]
 800222e:	1ad3      	subs	r3, r2, r3
 8002230:	2b02      	cmp	r3, #2
 8002232:	d901      	bls.n	8002238 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002234:	2303      	movs	r3, #3
 8002236:	e03d      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002238:	4b11      	ldr	r3, [pc, #68]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002240:	2b00      	cmp	r3, #0
 8002242:	d0f0      	beq.n	8002226 <HAL_RCC_OscConfig+0x46a>
 8002244:	e035      	b.n	80022b2 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002246:	4b10      	ldr	r3, [pc, #64]	@ (8002288 <HAL_RCC_OscConfig+0x4cc>)
 8002248:	2200      	movs	r2, #0
 800224a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800224c:	f7fe fbf4 	bl	8000a38 <HAL_GetTick>
 8002250:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002252:	e008      	b.n	8002266 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002254:	f7fe fbf0 	bl	8000a38 <HAL_GetTick>
 8002258:	4602      	mov	r2, r0
 800225a:	693b      	ldr	r3, [r7, #16]
 800225c:	1ad3      	subs	r3, r2, r3
 800225e:	2b02      	cmp	r3, #2
 8002260:	d901      	bls.n	8002266 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002262:	2303      	movs	r3, #3
 8002264:	e026      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002266:	4b06      	ldr	r3, [pc, #24]	@ (8002280 <HAL_RCC_OscConfig+0x4c4>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800226e:	2b00      	cmp	r3, #0
 8002270:	d1f0      	bne.n	8002254 <HAL_RCC_OscConfig+0x498>
 8002272:	e01e      	b.n	80022b2 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	69db      	ldr	r3, [r3, #28]
 8002278:	2b01      	cmp	r3, #1
 800227a:	d107      	bne.n	800228c <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 800227c:	2301      	movs	r3, #1
 800227e:	e019      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
 8002280:	40021000 	.word	0x40021000
 8002284:	40007000 	.word	0x40007000
 8002288:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 800228c:	4b0b      	ldr	r3, [pc, #44]	@ (80022bc <HAL_RCC_OscConfig+0x500>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002292:	68fb      	ldr	r3, [r7, #12]
 8002294:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	6a1b      	ldr	r3, [r3, #32]
 800229c:	429a      	cmp	r2, r3
 800229e:	d106      	bne.n	80022ae <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80022aa:	429a      	cmp	r2, r3
 80022ac:	d001      	beq.n	80022b2 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80022ae:	2301      	movs	r3, #1
 80022b0:	e000      	b.n	80022b4 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80022b2:	2300      	movs	r3, #0
}
 80022b4:	4618      	mov	r0, r3
 80022b6:	3718      	adds	r7, #24
 80022b8:	46bd      	mov	sp, r7
 80022ba:	bd80      	pop	{r7, pc}
 80022bc:	40021000 	.word	0x40021000

080022c0 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b084      	sub	sp, #16
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
 80022c8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80022d0:	2301      	movs	r3, #1
 80022d2:	e0d0      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80022d4:	4b6a      	ldr	r3, [pc, #424]	@ (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f003 0307 	and.w	r3, r3, #7
 80022dc:	683a      	ldr	r2, [r7, #0]
 80022de:	429a      	cmp	r2, r3
 80022e0:	d910      	bls.n	8002304 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80022e2:	4b67      	ldr	r3, [pc, #412]	@ (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80022e4:	681b      	ldr	r3, [r3, #0]
 80022e6:	f023 0207 	bic.w	r2, r3, #7
 80022ea:	4965      	ldr	r1, [pc, #404]	@ (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	4313      	orrs	r3, r2
 80022f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80022f2:	4b63      	ldr	r3, [pc, #396]	@ (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80022f4:	681b      	ldr	r3, [r3, #0]
 80022f6:	f003 0307 	and.w	r3, r3, #7
 80022fa:	683a      	ldr	r2, [r7, #0]
 80022fc:	429a      	cmp	r2, r3
 80022fe:	d001      	beq.n	8002304 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002300:	2301      	movs	r3, #1
 8002302:	e0b8      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	681b      	ldr	r3, [r3, #0]
 8002308:	f003 0302 	and.w	r3, r3, #2
 800230c:	2b00      	cmp	r3, #0
 800230e:	d020      	beq.n	8002352 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	f003 0304 	and.w	r3, r3, #4
 8002318:	2b00      	cmp	r3, #0
 800231a:	d005      	beq.n	8002328 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800231c:	4b59      	ldr	r3, [pc, #356]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800231e:	685b      	ldr	r3, [r3, #4]
 8002320:	4a58      	ldr	r2, [pc, #352]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002322:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002326:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f003 0308 	and.w	r3, r3, #8
 8002330:	2b00      	cmp	r3, #0
 8002332:	d005      	beq.n	8002340 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002334:	4b53      	ldr	r3, [pc, #332]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	4a52      	ldr	r2, [pc, #328]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800233a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800233e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002340:	4b50      	ldr	r3, [pc, #320]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	689b      	ldr	r3, [r3, #8]
 800234c:	494d      	ldr	r1, [pc, #308]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800234e:	4313      	orrs	r3, r2
 8002350:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	f003 0301 	and.w	r3, r3, #1
 800235a:	2b00      	cmp	r3, #0
 800235c:	d040      	beq.n	80023e0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	685b      	ldr	r3, [r3, #4]
 8002362:	2b01      	cmp	r3, #1
 8002364:	d107      	bne.n	8002376 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002366:	4b47      	ldr	r3, [pc, #284]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800236e:	2b00      	cmp	r3, #0
 8002370:	d115      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e07f      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	685b      	ldr	r3, [r3, #4]
 800237a:	2b02      	cmp	r3, #2
 800237c:	d107      	bne.n	800238e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800237e:	4b41      	ldr	r3, [pc, #260]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d109      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800238a:	2301      	movs	r3, #1
 800238c:	e073      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800238e:	4b3d      	ldr	r3, [pc, #244]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 0302 	and.w	r3, r3, #2
 8002396:	2b00      	cmp	r3, #0
 8002398:	d101      	bne.n	800239e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800239a:	2301      	movs	r3, #1
 800239c:	e06b      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800239e:	4b39      	ldr	r3, [pc, #228]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	685b      	ldr	r3, [r3, #4]
 80023a2:	f023 0203 	bic.w	r2, r3, #3
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	685b      	ldr	r3, [r3, #4]
 80023aa:	4936      	ldr	r1, [pc, #216]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	4313      	orrs	r3, r2
 80023ae:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80023b0:	f7fe fb42 	bl	8000a38 <HAL_GetTick>
 80023b4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023b6:	e00a      	b.n	80023ce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023b8:	f7fe fb3e 	bl	8000a38 <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023c6:	4293      	cmp	r3, r2
 80023c8:	d901      	bls.n	80023ce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80023ca:	2303      	movs	r3, #3
 80023cc:	e053      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80023ce:	4b2d      	ldr	r3, [pc, #180]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 80023d0:	685b      	ldr	r3, [r3, #4]
 80023d2:	f003 020c 	and.w	r2, r3, #12
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	685b      	ldr	r3, [r3, #4]
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	429a      	cmp	r2, r3
 80023de:	d1eb      	bne.n	80023b8 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80023e0:	4b27      	ldr	r3, [pc, #156]	@ (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0307 	and.w	r3, r3, #7
 80023e8:	683a      	ldr	r2, [r7, #0]
 80023ea:	429a      	cmp	r2, r3
 80023ec:	d210      	bcs.n	8002410 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023ee:	4b24      	ldr	r3, [pc, #144]	@ (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	f023 0207 	bic.w	r2, r3, #7
 80023f6:	4922      	ldr	r1, [pc, #136]	@ (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 80023f8:	683b      	ldr	r3, [r7, #0]
 80023fa:	4313      	orrs	r3, r2
 80023fc:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023fe:	4b20      	ldr	r3, [pc, #128]	@ (8002480 <HAL_RCC_ClockConfig+0x1c0>)
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	f003 0307 	and.w	r3, r3, #7
 8002406:	683a      	ldr	r2, [r7, #0]
 8002408:	429a      	cmp	r2, r3
 800240a:	d001      	beq.n	8002410 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800240c:	2301      	movs	r3, #1
 800240e:	e032      	b.n	8002476 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	681b      	ldr	r3, [r3, #0]
 8002414:	f003 0304 	and.w	r3, r3, #4
 8002418:	2b00      	cmp	r3, #0
 800241a:	d008      	beq.n	800242e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800241c:	4b19      	ldr	r3, [pc, #100]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800241e:	685b      	ldr	r3, [r3, #4]
 8002420:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002424:	687b      	ldr	r3, [r7, #4]
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	4916      	ldr	r1, [pc, #88]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	4313      	orrs	r3, r2
 800242c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d009      	beq.n	800244e <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800243a:	4b12      	ldr	r3, [pc, #72]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800243c:	685b      	ldr	r3, [r3, #4]
 800243e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	691b      	ldr	r3, [r3, #16]
 8002446:	00db      	lsls	r3, r3, #3
 8002448:	490e      	ldr	r1, [pc, #56]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 800244a:	4313      	orrs	r3, r2
 800244c:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800244e:	f000 f821 	bl	8002494 <HAL_RCC_GetSysClockFreq>
 8002452:	4602      	mov	r2, r0
 8002454:	4b0b      	ldr	r3, [pc, #44]	@ (8002484 <HAL_RCC_ClockConfig+0x1c4>)
 8002456:	685b      	ldr	r3, [r3, #4]
 8002458:	091b      	lsrs	r3, r3, #4
 800245a:	f003 030f 	and.w	r3, r3, #15
 800245e:	490a      	ldr	r1, [pc, #40]	@ (8002488 <HAL_RCC_ClockConfig+0x1c8>)
 8002460:	5ccb      	ldrb	r3, [r1, r3]
 8002462:	fa22 f303 	lsr.w	r3, r2, r3
 8002466:	4a09      	ldr	r2, [pc, #36]	@ (800248c <HAL_RCC_ClockConfig+0x1cc>)
 8002468:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800246a:	4b09      	ldr	r3, [pc, #36]	@ (8002490 <HAL_RCC_ClockConfig+0x1d0>)
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	4618      	mov	r0, r3
 8002470:	f7fe faa0 	bl	80009b4 <HAL_InitTick>

  return HAL_OK;
 8002474:	2300      	movs	r3, #0
}
 8002476:	4618      	mov	r0, r3
 8002478:	3710      	adds	r7, #16
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop
 8002480:	40022000 	.word	0x40022000
 8002484:	40021000 	.word	0x40021000
 8002488:	0800343c 	.word	0x0800343c
 800248c:	20000000 	.word	0x20000000
 8002490:	20000004 	.word	0x20000004

08002494 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002494:	b480      	push	{r7}
 8002496:	b087      	sub	sp, #28
 8002498:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800249a:	2300      	movs	r3, #0
 800249c:	60fb      	str	r3, [r7, #12]
 800249e:	2300      	movs	r3, #0
 80024a0:	60bb      	str	r3, [r7, #8]
 80024a2:	2300      	movs	r3, #0
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	2300      	movs	r3, #0
 80024a8:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80024aa:	2300      	movs	r3, #0
 80024ac:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80024ae:	4b1e      	ldr	r3, [pc, #120]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x94>)
 80024b0:	685b      	ldr	r3, [r3, #4]
 80024b2:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80024b4:	68fb      	ldr	r3, [r7, #12]
 80024b6:	f003 030c 	and.w	r3, r3, #12
 80024ba:	2b04      	cmp	r3, #4
 80024bc:	d002      	beq.n	80024c4 <HAL_RCC_GetSysClockFreq+0x30>
 80024be:	2b08      	cmp	r3, #8
 80024c0:	d003      	beq.n	80024ca <HAL_RCC_GetSysClockFreq+0x36>
 80024c2:	e027      	b.n	8002514 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80024c4:	4b19      	ldr	r3, [pc, #100]	@ (800252c <HAL_RCC_GetSysClockFreq+0x98>)
 80024c6:	613b      	str	r3, [r7, #16]
      break;
 80024c8:	e027      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80024ca:	68fb      	ldr	r3, [r7, #12]
 80024cc:	0c9b      	lsrs	r3, r3, #18
 80024ce:	f003 030f 	and.w	r3, r3, #15
 80024d2:	4a17      	ldr	r2, [pc, #92]	@ (8002530 <HAL_RCC_GetSysClockFreq+0x9c>)
 80024d4:	5cd3      	ldrb	r3, [r2, r3]
 80024d6:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d010      	beq.n	8002504 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80024e2:	4b11      	ldr	r3, [pc, #68]	@ (8002528 <HAL_RCC_GetSysClockFreq+0x94>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	0c5b      	lsrs	r3, r3, #17
 80024e8:	f003 0301 	and.w	r3, r3, #1
 80024ec:	4a11      	ldr	r2, [pc, #68]	@ (8002534 <HAL_RCC_GetSysClockFreq+0xa0>)
 80024ee:	5cd3      	ldrb	r3, [r2, r3]
 80024f0:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	4a0d      	ldr	r2, [pc, #52]	@ (800252c <HAL_RCC_GetSysClockFreq+0x98>)
 80024f6:	fb03 f202 	mul.w	r2, r3, r2
 80024fa:	68bb      	ldr	r3, [r7, #8]
 80024fc:	fbb2 f3f3 	udiv	r3, r2, r3
 8002500:	617b      	str	r3, [r7, #20]
 8002502:	e004      	b.n	800250e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	4a0c      	ldr	r2, [pc, #48]	@ (8002538 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002508:	fb02 f303 	mul.w	r3, r2, r3
 800250c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800250e:	697b      	ldr	r3, [r7, #20]
 8002510:	613b      	str	r3, [r7, #16]
      break;
 8002512:	e002      	b.n	800251a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002514:	4b05      	ldr	r3, [pc, #20]	@ (800252c <HAL_RCC_GetSysClockFreq+0x98>)
 8002516:	613b      	str	r3, [r7, #16]
      break;
 8002518:	bf00      	nop
    }
  }
  return sysclockfreq;
 800251a:	693b      	ldr	r3, [r7, #16]
}
 800251c:	4618      	mov	r0, r3
 800251e:	371c      	adds	r7, #28
 8002520:	46bd      	mov	sp, r7
 8002522:	bc80      	pop	{r7}
 8002524:	4770      	bx	lr
 8002526:	bf00      	nop
 8002528:	40021000 	.word	0x40021000
 800252c:	007a1200 	.word	0x007a1200
 8002530:	08003454 	.word	0x08003454
 8002534:	08003464 	.word	0x08003464
 8002538:	003d0900 	.word	0x003d0900

0800253c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002540:	4b02      	ldr	r3, [pc, #8]	@ (800254c <HAL_RCC_GetHCLKFreq+0x10>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr
 800254c:	20000000 	.word	0x20000000

08002550 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002550:	b580      	push	{r7, lr}
 8002552:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002554:	f7ff fff2 	bl	800253c <HAL_RCC_GetHCLKFreq>
 8002558:	4602      	mov	r2, r0
 800255a:	4b05      	ldr	r3, [pc, #20]	@ (8002570 <HAL_RCC_GetPCLK1Freq+0x20>)
 800255c:	685b      	ldr	r3, [r3, #4]
 800255e:	0a1b      	lsrs	r3, r3, #8
 8002560:	f003 0307 	and.w	r3, r3, #7
 8002564:	4903      	ldr	r1, [pc, #12]	@ (8002574 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002566:	5ccb      	ldrb	r3, [r1, r3]
 8002568:	fa22 f303 	lsr.w	r3, r2, r3
}
 800256c:	4618      	mov	r0, r3
 800256e:	bd80      	pop	{r7, pc}
 8002570:	40021000 	.word	0x40021000
 8002574:	0800344c 	.word	0x0800344c

08002578 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002578:	b580      	push	{r7, lr}
 800257a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800257c:	f7ff ffde 	bl	800253c <HAL_RCC_GetHCLKFreq>
 8002580:	4602      	mov	r2, r0
 8002582:	4b05      	ldr	r3, [pc, #20]	@ (8002598 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002584:	685b      	ldr	r3, [r3, #4]
 8002586:	0adb      	lsrs	r3, r3, #11
 8002588:	f003 0307 	and.w	r3, r3, #7
 800258c:	4903      	ldr	r1, [pc, #12]	@ (800259c <HAL_RCC_GetPCLK2Freq+0x24>)
 800258e:	5ccb      	ldrb	r3, [r1, r3]
 8002590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002594:	4618      	mov	r0, r3
 8002596:	bd80      	pop	{r7, pc}
 8002598:	40021000 	.word	0x40021000
 800259c:	0800344c 	.word	0x0800344c

080025a0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b085      	sub	sp, #20
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80025a8:	4b0a      	ldr	r3, [pc, #40]	@ (80025d4 <RCC_Delay+0x34>)
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	4a0a      	ldr	r2, [pc, #40]	@ (80025d8 <RCC_Delay+0x38>)
 80025ae:	fba2 2303 	umull	r2, r3, r2, r3
 80025b2:	0a5b      	lsrs	r3, r3, #9
 80025b4:	687a      	ldr	r2, [r7, #4]
 80025b6:	fb02 f303 	mul.w	r3, r2, r3
 80025ba:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80025bc:	bf00      	nop
  }
  while (Delay --);
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	1e5a      	subs	r2, r3, #1
 80025c2:	60fa      	str	r2, [r7, #12]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	d1f9      	bne.n	80025bc <RCC_Delay+0x1c>
}
 80025c8:	bf00      	nop
 80025ca:	bf00      	nop
 80025cc:	3714      	adds	r7, #20
 80025ce:	46bd      	mov	sp, r7
 80025d0:	bc80      	pop	{r7}
 80025d2:	4770      	bx	lr
 80025d4:	20000000 	.word	0x20000000
 80025d8:	10624dd3 	.word	0x10624dd3

080025dc <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80025dc:	b580      	push	{r7, lr}
 80025de:	b086      	sub	sp, #24
 80025e0:	af00      	add	r7, sp, #0
 80025e2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 80025e4:	2300      	movs	r3, #0
 80025e6:	613b      	str	r3, [r7, #16]
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b00      	cmp	r3, #0
 80025f6:	d07d      	beq.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 80025f8:	2300      	movs	r3, #0
 80025fa:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80025fc:	4b4f      	ldr	r3, [pc, #316]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80025fe:	69db      	ldr	r3, [r3, #28]
 8002600:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002604:	2b00      	cmp	r3, #0
 8002606:	d10d      	bne.n	8002624 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002608:	4b4c      	ldr	r3, [pc, #304]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260a:	69db      	ldr	r3, [r3, #28]
 800260c:	4a4b      	ldr	r2, [pc, #300]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800260e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002612:	61d3      	str	r3, [r2, #28]
 8002614:	4b49      	ldr	r3, [pc, #292]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002616:	69db      	ldr	r3, [r3, #28]
 8002618:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800261c:	60bb      	str	r3, [r7, #8]
 800261e:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002620:	2301      	movs	r3, #1
 8002622:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002624:	4b46      	ldr	r3, [pc, #280]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002626:	681b      	ldr	r3, [r3, #0]
 8002628:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800262c:	2b00      	cmp	r3, #0
 800262e:	d118      	bne.n	8002662 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002630:	4b43      	ldr	r3, [pc, #268]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	4a42      	ldr	r2, [pc, #264]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002636:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800263a:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800263c:	f7fe f9fc 	bl	8000a38 <HAL_GetTick>
 8002640:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002642:	e008      	b.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002644:	f7fe f9f8 	bl	8000a38 <HAL_GetTick>
 8002648:	4602      	mov	r2, r0
 800264a:	693b      	ldr	r3, [r7, #16]
 800264c:	1ad3      	subs	r3, r2, r3
 800264e:	2b64      	cmp	r3, #100	@ 0x64
 8002650:	d901      	bls.n	8002656 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002652:	2303      	movs	r3, #3
 8002654:	e06d      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002656:	4b3a      	ldr	r3, [pc, #232]	@ (8002740 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800265e:	2b00      	cmp	r3, #0
 8002660:	d0f0      	beq.n	8002644 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002662:	4b36      	ldr	r3, [pc, #216]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002664:	6a1b      	ldr	r3, [r3, #32]
 8002666:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800266a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800266c:	68fb      	ldr	r3, [r7, #12]
 800266e:	2b00      	cmp	r3, #0
 8002670:	d02e      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	685b      	ldr	r3, [r3, #4]
 8002676:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800267a:	68fa      	ldr	r2, [r7, #12]
 800267c:	429a      	cmp	r2, r3
 800267e:	d027      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002680:	4b2e      	ldr	r3, [pc, #184]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002682:	6a1b      	ldr	r3, [r3, #32]
 8002684:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002688:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800268a:	4b2e      	ldr	r3, [pc, #184]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800268c:	2201      	movs	r2, #1
 800268e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002690:	4b2c      	ldr	r3, [pc, #176]	@ (8002744 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8002692:	2200      	movs	r2, #0
 8002694:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8002696:	4a29      	ldr	r2, [pc, #164]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002698:	68fb      	ldr	r3, [r7, #12]
 800269a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800269c:	68fb      	ldr	r3, [r7, #12]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	2b00      	cmp	r3, #0
 80026a4:	d014      	beq.n	80026d0 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a6:	f7fe f9c7 	bl	8000a38 <HAL_GetTick>
 80026aa:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026ac:	e00a      	b.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80026ae:	f7fe f9c3 	bl	8000a38 <HAL_GetTick>
 80026b2:	4602      	mov	r2, r0
 80026b4:	693b      	ldr	r3, [r7, #16]
 80026b6:	1ad3      	subs	r3, r2, r3
 80026b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80026bc:	4293      	cmp	r3, r2
 80026be:	d901      	bls.n	80026c4 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 80026c0:	2303      	movs	r3, #3
 80026c2:	e036      	b.n	8002732 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80026c4:	4b1d      	ldr	r3, [pc, #116]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026c6:	6a1b      	ldr	r3, [r3, #32]
 80026c8:	f003 0302 	and.w	r3, r3, #2
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d0ee      	beq.n	80026ae <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80026d0:	4b1a      	ldr	r3, [pc, #104]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026d2:	6a1b      	ldr	r3, [r3, #32]
 80026d4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	685b      	ldr	r3, [r3, #4]
 80026dc:	4917      	ldr	r1, [pc, #92]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026de:	4313      	orrs	r3, r2
 80026e0:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80026e2:	7dfb      	ldrb	r3, [r7, #23]
 80026e4:	2b01      	cmp	r3, #1
 80026e6:	d105      	bne.n	80026f4 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80026e8:	4b14      	ldr	r3, [pc, #80]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ea:	69db      	ldr	r3, [r3, #28]
 80026ec:	4a13      	ldr	r2, [pc, #76]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80026ee:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80026f2:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f003 0302 	and.w	r3, r3, #2
 80026fc:	2b00      	cmp	r3, #0
 80026fe:	d008      	beq.n	8002712 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8002700:	4b0e      	ldr	r3, [pc, #56]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002702:	685b      	ldr	r3, [r3, #4]
 8002704:	f423 4240 	bic.w	r2, r3, #49152	@ 0xc000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	689b      	ldr	r3, [r3, #8]
 800270c:	490b      	ldr	r1, [pc, #44]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800270e:	4313      	orrs	r3, r2
 8002710:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	f003 0310 	and.w	r3, r3, #16
 800271a:	2b00      	cmp	r3, #0
 800271c:	d008      	beq.n	8002730 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800271e:	4b07      	ldr	r3, [pc, #28]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002720:	685b      	ldr	r3, [r3, #4]
 8002722:	f423 0280 	bic.w	r2, r3, #4194304	@ 0x400000
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	68db      	ldr	r3, [r3, #12]
 800272a:	4904      	ldr	r1, [pc, #16]	@ (800273c <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800272c:	4313      	orrs	r3, r2
 800272e:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40021000 	.word	0x40021000
 8002740:	40007000 	.word	0x40007000
 8002744:	42420440 	.word	0x42420440

08002748 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b082      	sub	sp, #8
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e042      	b.n	80027e0 <HAL_UART_Init+0x98>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002760:	b2db      	uxtb	r3, r3
 8002762:	2b00      	cmp	r3, #0
 8002764:	d106      	bne.n	8002774 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002766:	687b      	ldr	r3, [r7, #4]
 8002768:	2200      	movs	r2, #0
 800276a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800276e:	6878      	ldr	r0, [r7, #4]
 8002770:	f7fe f83a 	bl	80007e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	2224      	movs	r2, #36	@ 0x24
 8002778:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	68da      	ldr	r2, [r3, #12]
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800278a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800278c:	6878      	ldr	r0, [r7, #4]
 800278e:	f000 fd8f 	bl	80032b0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	691a      	ldr	r2, [r3, #16]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80027a0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80027b0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	68da      	ldr	r2, [r3, #12]
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80027c0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	2200      	movs	r2, #0
 80027c6:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2220      	movs	r2, #32
 80027cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2220      	movs	r2, #32
 80027d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2200      	movs	r2, #0
 80027dc:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80027de:	2300      	movs	r3, #0
}
 80027e0:	4618      	mov	r0, r3
 80027e2:	3708      	adds	r7, #8
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd80      	pop	{r7, pc}

080027e8 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80027e8:	b580      	push	{r7, lr}
 80027ea:	b08a      	sub	sp, #40	@ 0x28
 80027ec:	af02      	add	r7, sp, #8
 80027ee:	60f8      	str	r0, [r7, #12]
 80027f0:	60b9      	str	r1, [r7, #8]
 80027f2:	603b      	str	r3, [r7, #0]
 80027f4:	4613      	mov	r3, r2
 80027f6:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80027f8:	2300      	movs	r3, #0
 80027fa:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80027fc:	68fb      	ldr	r3, [r7, #12]
 80027fe:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002802:	b2db      	uxtb	r3, r3
 8002804:	2b20      	cmp	r3, #32
 8002806:	d175      	bne.n	80028f4 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8002808:	68bb      	ldr	r3, [r7, #8]
 800280a:	2b00      	cmp	r3, #0
 800280c:	d002      	beq.n	8002814 <HAL_UART_Transmit+0x2c>
 800280e:	88fb      	ldrh	r3, [r7, #6]
 8002810:	2b00      	cmp	r3, #0
 8002812:	d101      	bne.n	8002818 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e06e      	b.n	80028f6 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002818:	68fb      	ldr	r3, [r7, #12]
 800281a:	2200      	movs	r2, #0
 800281c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	2221      	movs	r2, #33	@ 0x21
 8002822:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8002826:	f7fe f907 	bl	8000a38 <HAL_GetTick>
 800282a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800282c:	68fb      	ldr	r3, [r7, #12]
 800282e:	88fa      	ldrh	r2, [r7, #6]
 8002830:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002832:	68fb      	ldr	r3, [r7, #12]
 8002834:	88fa      	ldrh	r2, [r7, #6]
 8002836:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	689b      	ldr	r3, [r3, #8]
 800283c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002840:	d108      	bne.n	8002854 <HAL_UART_Transmit+0x6c>
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	691b      	ldr	r3, [r3, #16]
 8002846:	2b00      	cmp	r3, #0
 8002848:	d104      	bne.n	8002854 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800284a:	2300      	movs	r3, #0
 800284c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800284e:	68bb      	ldr	r3, [r7, #8]
 8002850:	61bb      	str	r3, [r7, #24]
 8002852:	e003      	b.n	800285c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8002854:	68bb      	ldr	r3, [r7, #8]
 8002856:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8002858:	2300      	movs	r3, #0
 800285a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 800285c:	e02e      	b.n	80028bc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800285e:	683b      	ldr	r3, [r7, #0]
 8002860:	9300      	str	r3, [sp, #0]
 8002862:	697b      	ldr	r3, [r7, #20]
 8002864:	2200      	movs	r2, #0
 8002866:	2180      	movs	r1, #128	@ 0x80
 8002868:	68f8      	ldr	r0, [r7, #12]
 800286a:	f000 fb2c 	bl	8002ec6 <UART_WaitOnFlagUntilTimeout>
 800286e:	4603      	mov	r3, r0
 8002870:	2b00      	cmp	r3, #0
 8002872:	d005      	beq.n	8002880 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8002874:	68fb      	ldr	r3, [r7, #12]
 8002876:	2220      	movs	r2, #32
 8002878:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800287c:	2303      	movs	r3, #3
 800287e:	e03a      	b.n	80028f6 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8002880:	69fb      	ldr	r3, [r7, #28]
 8002882:	2b00      	cmp	r3, #0
 8002884:	d10b      	bne.n	800289e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8002886:	69bb      	ldr	r3, [r7, #24]
 8002888:	881b      	ldrh	r3, [r3, #0]
 800288a:	461a      	mov	r2, r3
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8002894:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8002896:	69bb      	ldr	r3, [r7, #24]
 8002898:	3302      	adds	r3, #2
 800289a:	61bb      	str	r3, [r7, #24]
 800289c:	e007      	b.n	80028ae <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	781a      	ldrb	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80028a8:	69fb      	ldr	r3, [r7, #28]
 80028aa:	3301      	adds	r3, #1
 80028ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028b2:	b29b      	uxth	r3, r3
 80028b4:	3b01      	subs	r3, #1
 80028b6:	b29a      	uxth	r2, r3
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80028c0:	b29b      	uxth	r3, r3
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d1cb      	bne.n	800285e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80028c6:	683b      	ldr	r3, [r7, #0]
 80028c8:	9300      	str	r3, [sp, #0]
 80028ca:	697b      	ldr	r3, [r7, #20]
 80028cc:	2200      	movs	r2, #0
 80028ce:	2140      	movs	r1, #64	@ 0x40
 80028d0:	68f8      	ldr	r0, [r7, #12]
 80028d2:	f000 faf8 	bl	8002ec6 <UART_WaitOnFlagUntilTimeout>
 80028d6:	4603      	mov	r3, r0
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d005      	beq.n	80028e8 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80028dc:	68fb      	ldr	r3, [r7, #12]
 80028de:	2220      	movs	r2, #32
 80028e0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80028e4:	2303      	movs	r3, #3
 80028e6:	e006      	b.n	80028f6 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	2220      	movs	r2, #32
 80028ec:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80028f0:	2300      	movs	r3, #0
 80028f2:	e000      	b.n	80028f6 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80028f4:	2302      	movs	r3, #2
  }
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	3720      	adds	r7, #32
 80028fa:	46bd      	mov	sp, r7
 80028fc:	bd80      	pop	{r7, pc}

080028fe <HAL_UART_Transmit_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 80028fe:	b480      	push	{r7}
 8002900:	b085      	sub	sp, #20
 8002902:	af00      	add	r7, sp, #0
 8002904:	60f8      	str	r0, [r7, #12]
 8002906:	60b9      	str	r1, [r7, #8]
 8002908:	4613      	mov	r3, r2
 800290a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002912:	b2db      	uxtb	r3, r3
 8002914:	2b20      	cmp	r3, #32
 8002916:	d121      	bne.n	800295c <HAL_UART_Transmit_IT+0x5e>
  {
    if ((pData == NULL) || (Size == 0U))
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	2b00      	cmp	r3, #0
 800291c:	d002      	beq.n	8002924 <HAL_UART_Transmit_IT+0x26>
 800291e:	88fb      	ldrh	r3, [r7, #6]
 8002920:	2b00      	cmp	r3, #0
 8002922:	d101      	bne.n	8002928 <HAL_UART_Transmit_IT+0x2a>
    {
      return HAL_ERROR;
 8002924:	2301      	movs	r3, #1
 8002926:	e01a      	b.n	800295e <HAL_UART_Transmit_IT+0x60>
    }

    huart->pTxBuffPtr = pData;
 8002928:	68fb      	ldr	r3, [r7, #12]
 800292a:	68ba      	ldr	r2, [r7, #8]
 800292c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800292e:	68fb      	ldr	r3, [r7, #12]
 8002930:	88fa      	ldrh	r2, [r7, #6]
 8002932:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8002934:	68fb      	ldr	r3, [r7, #12]
 8002936:	88fa      	ldrh	r2, [r7, #6]
 8002938:	84da      	strh	r2, [r3, #38]	@ 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	2200      	movs	r2, #0
 800293e:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	2221      	movs	r2, #33	@ 0x21
 8002944:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Enable the UART Transmit data register empty Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_TXE);
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	68da      	ldr	r2, [r3, #12]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8002956:	60da      	str	r2, [r3, #12]

    return HAL_OK;
 8002958:	2300      	movs	r3, #0
 800295a:	e000      	b.n	800295e <HAL_UART_Transmit_IT+0x60>
  }
  else
  {
    return HAL_BUSY;
 800295c:	2302      	movs	r3, #2
  }
}
 800295e:	4618      	mov	r0, r3
 8002960:	3714      	adds	r7, #20
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b0ba      	sub	sp, #232	@ 0xe8
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	68db      	ldr	r3, [r3, #12]
 8002980:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	695b      	ldr	r3, [r3, #20]
 800298a:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800298e:	2300      	movs	r3, #0
 8002990:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8002994:	2300      	movs	r3, #0
 8002996:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800299a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800299e:	f003 030f 	and.w	r3, r3, #15
 80029a2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80029a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d10f      	bne.n	80029ce <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80029ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029b2:	f003 0320 	and.w	r3, r3, #32
 80029b6:	2b00      	cmp	r3, #0
 80029b8:	d009      	beq.n	80029ce <HAL_UART_IRQHandler+0x66>
 80029ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029be:	f003 0320 	and.w	r3, r3, #32
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d003      	beq.n	80029ce <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80029c6:	6878      	ldr	r0, [r7, #4]
 80029c8:	f000 fbb3 	bl	8003132 <UART_Receive_IT>
      return;
 80029cc:	e25b      	b.n	8002e86 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80029ce:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f000 80de 	beq.w	8002b94 <HAL_UART_IRQHandler+0x22c>
 80029d8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80029dc:	f003 0301 	and.w	r3, r3, #1
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d106      	bne.n	80029f2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80029e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80029e8:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80029ec:	2b00      	cmp	r3, #0
 80029ee:	f000 80d1 	beq.w	8002b94 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80029f2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80029f6:	f003 0301 	and.w	r3, r3, #1
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d00b      	beq.n	8002a16 <HAL_UART_IRQHandler+0xae>
 80029fe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a02:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a06:	2b00      	cmp	r3, #0
 8002a08:	d005      	beq.n	8002a16 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a0e:	f043 0201 	orr.w	r2, r3, #1
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d00b      	beq.n	8002a3a <HAL_UART_IRQHandler+0xd2>
 8002a22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d005      	beq.n	8002a3a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a32:	f043 0202 	orr.w	r2, r3, #2
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8002a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a3e:	f003 0302 	and.w	r3, r3, #2
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d00b      	beq.n	8002a5e <HAL_UART_IRQHandler+0xf6>
 8002a46:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d005      	beq.n	8002a5e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8002a52:	687b      	ldr	r3, [r7, #4]
 8002a54:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a56:	f043 0204 	orr.w	r2, r3, #4
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8002a5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a62:	f003 0308 	and.w	r3, r3, #8
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d011      	beq.n	8002a8e <HAL_UART_IRQHandler+0x126>
 8002a6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002a6e:	f003 0320 	and.w	r3, r3, #32
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d105      	bne.n	8002a82 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8002a76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8002a7a:	f003 0301 	and.w	r3, r3, #1
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d005      	beq.n	8002a8e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a86:	f043 0208 	orr.w	r2, r3, #8
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	f000 81f2 	beq.w	8002e7c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8002a98:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002a9c:	f003 0320 	and.w	r3, r3, #32
 8002aa0:	2b00      	cmp	r3, #0
 8002aa2:	d008      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x14e>
 8002aa4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002aa8:	f003 0320 	and.w	r3, r3, #32
 8002aac:	2b00      	cmp	r3, #0
 8002aae:	d002      	beq.n	8002ab6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8002ab0:	6878      	ldr	r0, [r7, #4]
 8002ab2:	f000 fb3e 	bl	8003132 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	695b      	ldr	r3, [r3, #20]
 8002abc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002ac0:	2b00      	cmp	r3, #0
 8002ac2:	bf14      	ite	ne
 8002ac4:	2301      	movne	r3, #1
 8002ac6:	2300      	moveq	r3, #0
 8002ac8:	b2db      	uxtb	r3, r3
 8002aca:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ad2:	f003 0308 	and.w	r3, r3, #8
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d103      	bne.n	8002ae2 <HAL_UART_IRQHandler+0x17a>
 8002ada:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d04f      	beq.n	8002b82 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fa48 	bl	8002f78 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	695b      	ldr	r3, [r3, #20]
 8002aee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d041      	beq.n	8002b7a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	3314      	adds	r3, #20
 8002afc:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002b00:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002b04:	e853 3f00 	ldrex	r3, [r3]
 8002b08:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8002b0c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002b10:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002b14:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	3314      	adds	r3, #20
 8002b1e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002b22:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002b26:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002b2a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8002b2e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002b32:	e841 2300 	strex	r3, r2, [r1]
 8002b36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8002b3a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d1d9      	bne.n	8002af6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d013      	beq.n	8002b72 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b4e:	4a7e      	ldr	r2, [pc, #504]	@ (8002d48 <HAL_UART_IRQHandler+0x3e0>)
 8002b50:	635a      	str	r2, [r3, #52]	@ 0x34
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b56:	4618      	mov	r0, r3
 8002b58:	f7fe fe00 	bl	800175c <HAL_DMA_Abort_IT>
 8002b5c:	4603      	mov	r3, r0
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d016      	beq.n	8002b90 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002b66:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8002b68:	687a      	ldr	r2, [r7, #4]
 8002b6a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8002b6c:	4610      	mov	r0, r2
 8002b6e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b70:	e00e      	b.n	8002b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002b72:	6878      	ldr	r0, [r7, #4]
 8002b74:	f000 f993 	bl	8002e9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b78:	e00a      	b.n	8002b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002b7a:	6878      	ldr	r0, [r7, #4]
 8002b7c:	f000 f98f 	bl	8002e9e <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b80:	e006      	b.n	8002b90 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002b82:	6878      	ldr	r0, [r7, #4]
 8002b84:	f000 f98b 	bl	8002e9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2200      	movs	r2, #0
 8002b8c:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8002b8e:	e175      	b.n	8002e7c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b90:	bf00      	nop
    return;
 8002b92:	e173      	b.n	8002e7c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002b98:	2b01      	cmp	r3, #1
 8002b9a:	f040 814f 	bne.w	8002e3c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8002b9e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002ba2:	f003 0310 	and.w	r3, r3, #16
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	f000 8148 	beq.w	8002e3c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8002bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002bb0:	f003 0310 	and.w	r3, r3, #16
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	f000 8141 	beq.w	8002e3c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	60bb      	str	r3, [r7, #8]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	60bb      	str	r3, [r7, #8]
 8002bce:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	695b      	ldr	r3, [r3, #20]
 8002bd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	f000 80b6 	beq.w	8002d4c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8002bec:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002bf0:	2b00      	cmp	r3, #0
 8002bf2:	f000 8145 	beq.w	8002e80 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8002bfa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002bfe:	429a      	cmp	r2, r3
 8002c00:	f080 813e 	bcs.w	8002e80 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8002c0a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002c10:	699b      	ldr	r3, [r3, #24]
 8002c12:	2b20      	cmp	r3, #32
 8002c14:	f000 8088 	beq.w	8002d28 <HAL_UART_IRQHandler+0x3c0>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	330c      	adds	r3, #12
 8002c1e:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c22:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002c26:	e853 3f00 	ldrex	r3, [r3]
 8002c2a:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002c2e:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002c32:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002c36:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	330c      	adds	r3, #12
 8002c40:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002c44:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002c48:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c4c:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002c50:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002c54:	e841 2300 	strex	r3, r2, [r1]
 8002c58:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8002c5c:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d1d9      	bne.n	8002c18 <HAL_UART_IRQHandler+0x2b0>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	3314      	adds	r3, #20
 8002c6a:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002c6c:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002c6e:	e853 3f00 	ldrex	r3, [r3]
 8002c72:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002c74:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002c76:	f023 0301 	bic.w	r3, r3, #1
 8002c7a:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	3314      	adds	r3, #20
 8002c84:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8002c88:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8002c8c:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002c8e:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8002c90:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8002c94:	e841 2300 	strex	r3, r2, [r1]
 8002c98:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8002c9a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d1e1      	bne.n	8002c64 <HAL_UART_IRQHandler+0x2fc>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	3314      	adds	r3, #20
 8002ca6:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ca8:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8002caa:	e853 3f00 	ldrex	r3, [r3]
 8002cae:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8002cb0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8002cb2:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002cb6:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	3314      	adds	r3, #20
 8002cc0:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8002cc4:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8002cc6:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002cc8:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8002cca:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8002ccc:	e841 2300 	strex	r3, r2, [r1]
 8002cd0:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8002cd2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d1e3      	bne.n	8002ca0 <HAL_UART_IRQHandler+0x338>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	2220      	movs	r2, #32
 8002cdc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	2200      	movs	r2, #0
 8002ce4:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	330c      	adds	r3, #12
 8002cec:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002cee:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002cf0:	e853 3f00 	ldrex	r3, [r3]
 8002cf4:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002cf6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8002cf8:	f023 0310 	bic.w	r3, r3, #16
 8002cfc:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	330c      	adds	r3, #12
 8002d06:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8002d0a:	65ba      	str	r2, [r7, #88]	@ 0x58
 8002d0c:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d0e:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002d10:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002d12:	e841 2300 	strex	r3, r2, [r1]
 8002d16:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8002d18:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8002d1a:	2b00      	cmp	r3, #0
 8002d1c:	d1e3      	bne.n	8002ce6 <HAL_UART_IRQHandler+0x37e>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002d22:	4618      	mov	r0, r3
 8002d24:	f7fe fcde 	bl	80016e4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2202      	movs	r2, #2
 8002d2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d36:	b29b      	uxth	r3, r3
 8002d38:	1ad3      	subs	r3, r2, r3
 8002d3a:	b29b      	uxth	r3, r3
 8002d3c:	4619      	mov	r1, r3
 8002d3e:	6878      	ldr	r0, [r7, #4]
 8002d40:	f000 f8b6 	bl	8002eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002d44:	e09c      	b.n	8002e80 <HAL_UART_IRQHandler+0x518>
 8002d46:	bf00      	nop
 8002d48:	0800303d 	.word	0x0800303d
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d54:	b29b      	uxth	r3, r3
 8002d56:	1ad3      	subs	r3, r2, r3
 8002d58:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002d60:	b29b      	uxth	r3, r3
 8002d62:	2b00      	cmp	r3, #0
 8002d64:	f000 808e 	beq.w	8002e84 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002d68:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	f000 8089 	beq.w	8002e84 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	330c      	adds	r3, #12
 8002d78:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002d7a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002d7c:	e853 3f00 	ldrex	r3, [r3]
 8002d80:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8002d82:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002d84:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002d88:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	330c      	adds	r3, #12
 8002d92:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8002d96:	647a      	str	r2, [r7, #68]	@ 0x44
 8002d98:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002d9a:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8002d9c:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8002d9e:	e841 2300 	strex	r3, r2, [r1]
 8002da2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8002da4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1e3      	bne.n	8002d72 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	3314      	adds	r3, #20
 8002db0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002db2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002db4:	e853 3f00 	ldrex	r3, [r3]
 8002db8:	623b      	str	r3, [r7, #32]
   return(result);
 8002dba:	6a3b      	ldr	r3, [r7, #32]
 8002dbc:	f023 0301 	bic.w	r3, r3, #1
 8002dc0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	3314      	adds	r3, #20
 8002dca:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8002dce:	633a      	str	r2, [r7, #48]	@ 0x30
 8002dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002dd2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8002dd4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002dd6:	e841 2300 	strex	r3, r2, [r1]
 8002dda:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8002ddc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002dde:	2b00      	cmp	r3, #0
 8002de0:	d1e3      	bne.n	8002daa <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	2220      	movs	r2, #32
 8002de6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	2200      	movs	r2, #0
 8002dee:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	330c      	adds	r3, #12
 8002df6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002df8:	693b      	ldr	r3, [r7, #16]
 8002dfa:	e853 3f00 	ldrex	r3, [r3]
 8002dfe:	60fb      	str	r3, [r7, #12]
   return(result);
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	f023 0310 	bic.w	r3, r3, #16
 8002e06:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	330c      	adds	r3, #12
 8002e10:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002e14:	61fa      	str	r2, [r7, #28]
 8002e16:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002e18:	69b9      	ldr	r1, [r7, #24]
 8002e1a:	69fa      	ldr	r2, [r7, #28]
 8002e1c:	e841 2300 	strex	r3, r2, [r1]
 8002e20:	617b      	str	r3, [r7, #20]
   return(result);
 8002e22:	697b      	ldr	r3, [r7, #20]
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d1e3      	bne.n	8002df0 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002e2e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002e32:	4619      	mov	r1, r3
 8002e34:	6878      	ldr	r0, [r7, #4]
 8002e36:	f000 f83b 	bl	8002eb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002e3a:	e023      	b.n	8002e84 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8002e3c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e40:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d009      	beq.n	8002e5c <HAL_UART_IRQHandler+0x4f4>
 8002e48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002e50:	2b00      	cmp	r3, #0
 8002e52:	d003      	beq.n	8002e5c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f000 f905 	bl	8003064 <UART_Transmit_IT>
    return;
 8002e5a:	e014      	b.n	8002e86 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8002e5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002e60:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d00e      	beq.n	8002e86 <HAL_UART_IRQHandler+0x51e>
 8002e68:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8002e6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002e70:	2b00      	cmp	r3, #0
 8002e72:	d008      	beq.n	8002e86 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002e74:	6878      	ldr	r0, [r7, #4]
 8002e76:	f000 f944 	bl	8003102 <UART_EndTransmit_IT>
    return;
 8002e7a:	e004      	b.n	8002e86 <HAL_UART_IRQHandler+0x51e>
    return;
 8002e7c:	bf00      	nop
 8002e7e:	e002      	b.n	8002e86 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e80:	bf00      	nop
 8002e82:	e000      	b.n	8002e86 <HAL_UART_IRQHandler+0x51e>
      return;
 8002e84:	bf00      	nop
  }
}
 8002e86:	37e8      	adds	r7, #232	@ 0xe8
 8002e88:	46bd      	mov	sp, r7
 8002e8a:	bd80      	pop	{r7, pc}

08002e8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002e8c:	b480      	push	{r7}
 8002e8e:	b083      	sub	sp, #12
 8002e90:	af00      	add	r7, sp, #0
 8002e92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8002e94:	bf00      	nop
 8002e96:	370c      	adds	r7, #12
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bc80      	pop	{r7}
 8002e9c:	4770      	bx	lr

08002e9e <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002e9e:	b480      	push	{r7}
 8002ea0:	b083      	sub	sp, #12
 8002ea2:	af00      	add	r7, sp, #0
 8002ea4:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8002ea6:	bf00      	nop
 8002ea8:	370c      	adds	r7, #12
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bc80      	pop	{r7}
 8002eae:	4770      	bx	lr

08002eb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	6078      	str	r0, [r7, #4]
 8002eb8:	460b      	mov	r3, r1
 8002eba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002ebc:	bf00      	nop
 8002ebe:	370c      	adds	r7, #12
 8002ec0:	46bd      	mov	sp, r7
 8002ec2:	bc80      	pop	{r7}
 8002ec4:	4770      	bx	lr

08002ec6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8002ec6:	b580      	push	{r7, lr}
 8002ec8:	b086      	sub	sp, #24
 8002eca:	af00      	add	r7, sp, #0
 8002ecc:	60f8      	str	r0, [r7, #12]
 8002ece:	60b9      	str	r1, [r7, #8]
 8002ed0:	603b      	str	r3, [r7, #0]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002ed6:	e03b      	b.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002ed8:	6a3b      	ldr	r3, [r7, #32]
 8002eda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ede:	d037      	beq.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002ee0:	f7fd fdaa 	bl	8000a38 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	683b      	ldr	r3, [r7, #0]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	6a3a      	ldr	r2, [r7, #32]
 8002eec:	429a      	cmp	r2, r3
 8002eee:	d302      	bcc.n	8002ef6 <UART_WaitOnFlagUntilTimeout+0x30>
 8002ef0:	6a3b      	ldr	r3, [r7, #32]
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d101      	bne.n	8002efa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8002ef6:	2303      	movs	r3, #3
 8002ef8:	e03a      	b.n	8002f70 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	68db      	ldr	r3, [r3, #12]
 8002f00:	f003 0304 	and.w	r3, r3, #4
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d023      	beq.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	2b80      	cmp	r3, #128	@ 0x80
 8002f0c:	d020      	beq.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002f0e:	68bb      	ldr	r3, [r7, #8]
 8002f10:	2b40      	cmp	r3, #64	@ 0x40
 8002f12:	d01d      	beq.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f003 0308 	and.w	r3, r3, #8
 8002f1e:	2b08      	cmp	r3, #8
 8002f20:	d116      	bne.n	8002f50 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002f22:	2300      	movs	r3, #0
 8002f24:	617b      	str	r3, [r7, #20]
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	617b      	str	r3, [r7, #20]
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	685b      	ldr	r3, [r3, #4]
 8002f34:	617b      	str	r3, [r7, #20]
 8002f36:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8002f38:	68f8      	ldr	r0, [r7, #12]
 8002f3a:	f000 f81d 	bl	8002f78 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2208      	movs	r2, #8
 8002f42:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002f4c:	2301      	movs	r3, #1
 8002f4e:	e00f      	b.n	8002f70 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68bb      	ldr	r3, [r7, #8]
 8002f58:	4013      	ands	r3, r2
 8002f5a:	68ba      	ldr	r2, [r7, #8]
 8002f5c:	429a      	cmp	r2, r3
 8002f5e:	bf0c      	ite	eq
 8002f60:	2301      	moveq	r3, #1
 8002f62:	2300      	movne	r3, #0
 8002f64:	b2db      	uxtb	r3, r3
 8002f66:	461a      	mov	r2, r3
 8002f68:	79fb      	ldrb	r3, [r7, #7]
 8002f6a:	429a      	cmp	r2, r3
 8002f6c:	d0b4      	beq.n	8002ed8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f6e:	2300      	movs	r3, #0
}
 8002f70:	4618      	mov	r0, r3
 8002f72:	3718      	adds	r7, #24
 8002f74:	46bd      	mov	sp, r7
 8002f76:	bd80      	pop	{r7, pc}

08002f78 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002f78:	b480      	push	{r7}
 8002f7a:	b095      	sub	sp, #84	@ 0x54
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	330c      	adds	r3, #12
 8002f86:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002f88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002f8a:	e853 3f00 	ldrex	r3, [r3]
 8002f8e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8002f90:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002f92:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002f96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	330c      	adds	r3, #12
 8002f9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8002fa0:	643a      	str	r2, [r7, #64]	@ 0x40
 8002fa2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fa4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002fa6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002fa8:	e841 2300 	strex	r3, r2, [r1]
 8002fac:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002fae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002fb0:	2b00      	cmp	r3, #0
 8002fb2:	d1e5      	bne.n	8002f80 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	3314      	adds	r3, #20
 8002fba:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002fbc:	6a3b      	ldr	r3, [r7, #32]
 8002fbe:	e853 3f00 	ldrex	r3, [r3]
 8002fc2:	61fb      	str	r3, [r7, #28]
   return(result);
 8002fc4:	69fb      	ldr	r3, [r7, #28]
 8002fc6:	f023 0301 	bic.w	r3, r3, #1
 8002fca:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	3314      	adds	r3, #20
 8002fd2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8002fd4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002fd6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002fd8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002fdc:	e841 2300 	strex	r3, r2, [r1]
 8002fe0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8002fe2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d1e5      	bne.n	8002fb4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d119      	bne.n	8003024 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	330c      	adds	r3, #12
 8002ff6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	e853 3f00 	ldrex	r3, [r3]
 8002ffe:	60bb      	str	r3, [r7, #8]
   return(result);
 8003000:	68bb      	ldr	r3, [r7, #8]
 8003002:	f023 0310 	bic.w	r3, r3, #16
 8003006:	647b      	str	r3, [r7, #68]	@ 0x44
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	681b      	ldr	r3, [r3, #0]
 800300c:	330c      	adds	r3, #12
 800300e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8003010:	61ba      	str	r2, [r7, #24]
 8003012:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003014:	6979      	ldr	r1, [r7, #20]
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	e841 2300 	strex	r3, r2, [r1]
 800301c:	613b      	str	r3, [r7, #16]
   return(result);
 800301e:	693b      	ldr	r3, [r7, #16]
 8003020:	2b00      	cmp	r3, #0
 8003022:	d1e5      	bne.n	8002ff0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	2220      	movs	r2, #32
 8003028:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8003032:	bf00      	nop
 8003034:	3754      	adds	r7, #84	@ 0x54
 8003036:	46bd      	mov	sp, r7
 8003038:	bc80      	pop	{r7}
 800303a:	4770      	bx	lr

0800303c <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b084      	sub	sp, #16
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003048:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800304a:	68fb      	ldr	r3, [r7, #12]
 800304c:	2200      	movs	r2, #0
 800304e:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	2200      	movs	r2, #0
 8003054:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8003056:	68f8      	ldr	r0, [r7, #12]
 8003058:	f7ff ff21 	bl	8002e9e <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800305c:	bf00      	nop
 800305e:	3710      	adds	r7, #16
 8003060:	46bd      	mov	sp, r7
 8003062:	bd80      	pop	{r7, pc}

08003064 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8003064:	b480      	push	{r7}
 8003066:	b085      	sub	sp, #20
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003072:	b2db      	uxtb	r3, r3
 8003074:	2b21      	cmp	r3, #33	@ 0x21
 8003076:	d13e      	bne.n	80030f6 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	689b      	ldr	r3, [r3, #8]
 800307c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003080:	d114      	bne.n	80030ac <UART_Transmit_IT+0x48>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	691b      	ldr	r3, [r3, #16]
 8003086:	2b00      	cmp	r3, #0
 8003088:	d110      	bne.n	80030ac <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	6a1b      	ldr	r3, [r3, #32]
 800308e:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	881b      	ldrh	r3, [r3, #0]
 8003094:	461a      	mov	r2, r3
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800309e:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6a1b      	ldr	r3, [r3, #32]
 80030a4:	1c9a      	adds	r2, r3, #2
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	621a      	str	r2, [r3, #32]
 80030aa:	e008      	b.n	80030be <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	6a1b      	ldr	r3, [r3, #32]
 80030b0:	1c59      	adds	r1, r3, #1
 80030b2:	687a      	ldr	r2, [r7, #4]
 80030b4:	6211      	str	r1, [r2, #32]
 80030b6:	781a      	ldrb	r2, [r3, #0]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80030c2:	b29b      	uxth	r3, r3
 80030c4:	3b01      	subs	r3, #1
 80030c6:	b29b      	uxth	r3, r3
 80030c8:	687a      	ldr	r2, [r7, #4]
 80030ca:	4619      	mov	r1, r3
 80030cc:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d10f      	bne.n	80030f2 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	68da      	ldr	r2, [r3, #12]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80030e0:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	68da      	ldr	r2, [r3, #12]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80030f0:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80030f2:	2300      	movs	r3, #0
 80030f4:	e000      	b.n	80030f8 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80030f6:	2302      	movs	r3, #2
  }
}
 80030f8:	4618      	mov	r0, r3
 80030fa:	3714      	adds	r7, #20
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bc80      	pop	{r7}
 8003100:	4770      	bx	lr

08003102 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8003102:	b580      	push	{r7, lr}
 8003104:	b082      	sub	sp, #8
 8003106:	af00      	add	r7, sp, #0
 8003108:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	68da      	ldr	r2, [r3, #12]
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003118:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	2220      	movs	r2, #32
 800311e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8003122:	6878      	ldr	r0, [r7, #4]
 8003124:	f7ff feb2 	bl	8002e8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8003128:	2300      	movs	r3, #0
}
 800312a:	4618      	mov	r0, r3
 800312c:	3708      	adds	r7, #8
 800312e:	46bd      	mov	sp, r7
 8003130:	bd80      	pop	{r7, pc}

08003132 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8003132:	b580      	push	{r7, lr}
 8003134:	b08c      	sub	sp, #48	@ 0x30
 8003136:	af00      	add	r7, sp, #0
 8003138:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8003140:	b2db      	uxtb	r3, r3
 8003142:	2b22      	cmp	r3, #34	@ 0x22
 8003144:	f040 80ae 	bne.w	80032a4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003150:	d117      	bne.n	8003182 <UART_Receive_IT+0x50>
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d113      	bne.n	8003182 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800315a:	2300      	movs	r3, #0
 800315c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003162:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	685b      	ldr	r3, [r3, #4]
 800316a:	b29b      	uxth	r3, r3
 800316c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003170:	b29a      	uxth	r2, r3
 8003172:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003174:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800317a:	1c9a      	adds	r2, r3, #2
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	629a      	str	r2, [r3, #40]	@ 0x28
 8003180:	e026      	b.n	80031d0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003186:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8003188:	2300      	movs	r3, #0
 800318a:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003194:	d007      	beq.n	80031a6 <UART_Receive_IT+0x74>
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	689b      	ldr	r3, [r3, #8]
 800319a:	2b00      	cmp	r3, #0
 800319c:	d10a      	bne.n	80031b4 <UART_Receive_IT+0x82>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	691b      	ldr	r3, [r3, #16]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d106      	bne.n	80031b4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	b2da      	uxtb	r2, r3
 80031ae:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031b0:	701a      	strb	r2, [r3, #0]
 80031b2:	e008      	b.n	80031c6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	685b      	ldr	r3, [r3, #4]
 80031ba:	b2db      	uxtb	r3, r3
 80031bc:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80031c0:	b2da      	uxtb	r2, r3
 80031c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80031c4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80031ca:	1c5a      	adds	r2, r3, #1
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80031d4:	b29b      	uxth	r3, r3
 80031d6:	3b01      	subs	r3, #1
 80031d8:	b29b      	uxth	r3, r3
 80031da:	687a      	ldr	r2, [r7, #4]
 80031dc:	4619      	mov	r1, r3
 80031de:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d15d      	bne.n	80032a0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	68da      	ldr	r2, [r3, #12]
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f022 0220 	bic.w	r2, r2, #32
 80031f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	68da      	ldr	r2, [r3, #12]
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003202:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8003204:	687b      	ldr	r3, [r7, #4]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	695a      	ldr	r2, [r3, #20]
 800320a:	687b      	ldr	r3, [r7, #4]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f022 0201 	bic.w	r2, r2, #1
 8003212:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	2220      	movs	r2, #32
 8003218:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	2200      	movs	r2, #0
 8003220:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003226:	2b01      	cmp	r3, #1
 8003228:	d135      	bne.n	8003296 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	2200      	movs	r2, #0
 800322e:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	330c      	adds	r3, #12
 8003236:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	e853 3f00 	ldrex	r3, [r3]
 800323e:	613b      	str	r3, [r7, #16]
   return(result);
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	f023 0310 	bic.w	r3, r3, #16
 8003246:	627b      	str	r3, [r7, #36]	@ 0x24
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	330c      	adds	r3, #12
 800324e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003250:	623a      	str	r2, [r7, #32]
 8003252:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8003254:	69f9      	ldr	r1, [r7, #28]
 8003256:	6a3a      	ldr	r2, [r7, #32]
 8003258:	e841 2300 	strex	r3, r2, [r1]
 800325c:	61bb      	str	r3, [r7, #24]
   return(result);
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	2b00      	cmp	r3, #0
 8003262:	d1e5      	bne.n	8003230 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	f003 0310 	and.w	r3, r3, #16
 800326e:	2b10      	cmp	r3, #16
 8003270:	d10a      	bne.n	8003288 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8003272:	2300      	movs	r3, #0
 8003274:	60fb      	str	r3, [r7, #12]
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	60fb      	str	r3, [r7, #12]
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	685b      	ldr	r3, [r3, #4]
 8003284:	60fb      	str	r3, [r7, #12]
 8003286:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800328c:	4619      	mov	r1, r3
 800328e:	6878      	ldr	r0, [r7, #4]
 8003290:	f7ff fe0e 	bl	8002eb0 <HAL_UARTEx_RxEventCallback>
 8003294:	e002      	b.n	800329c <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fd f8ca 	bl	8000430 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800329c:	2300      	movs	r3, #0
 800329e:	e002      	b.n	80032a6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80032a0:	2300      	movs	r3, #0
 80032a2:	e000      	b.n	80032a6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80032a4:	2302      	movs	r3, #2
  }
}
 80032a6:	4618      	mov	r0, r3
 80032a8:	3730      	adds	r7, #48	@ 0x30
 80032aa:	46bd      	mov	sp, r7
 80032ac:	bd80      	pop	{r7, pc}
	...

080032b0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80032b0:	b580      	push	{r7, lr}
 80032b2:	b084      	sub	sp, #16
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	691b      	ldr	r3, [r3, #16]
 80032be:	f423 5140 	bic.w	r1, r3, #12288	@ 0x3000
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	68da      	ldr	r2, [r3, #12]
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	689a      	ldr	r2, [r3, #8]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	691b      	ldr	r3, [r3, #16]
 80032d6:	431a      	orrs	r2, r3
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	695b      	ldr	r3, [r3, #20]
 80032dc:	4313      	orrs	r3, r2
 80032de:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68db      	ldr	r3, [r3, #12]
 80032e6:	f423 53b0 	bic.w	r3, r3, #5632	@ 0x1600
 80032ea:	f023 030c 	bic.w	r3, r3, #12
 80032ee:	687a      	ldr	r2, [r7, #4]
 80032f0:	6812      	ldr	r2, [r2, #0]
 80032f2:	68b9      	ldr	r1, [r7, #8]
 80032f4:	430b      	orrs	r3, r1
 80032f6:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	695b      	ldr	r3, [r3, #20]
 80032fe:	f423 7140 	bic.w	r1, r3, #768	@ 0x300
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	430a      	orrs	r2, r1
 800330c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	4a2c      	ldr	r2, [pc, #176]	@ (80033c4 <UART_SetConfig+0x114>)
 8003314:	4293      	cmp	r3, r2
 8003316:	d103      	bne.n	8003320 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8003318:	f7ff f92e 	bl	8002578 <HAL_RCC_GetPCLK2Freq>
 800331c:	60f8      	str	r0, [r7, #12]
 800331e:	e002      	b.n	8003326 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8003320:	f7ff f916 	bl	8002550 <HAL_RCC_GetPCLK1Freq>
 8003324:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003326:	68fa      	ldr	r2, [r7, #12]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	009a      	lsls	r2, r3, #2
 8003330:	441a      	add	r2, r3
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	685b      	ldr	r3, [r3, #4]
 8003336:	009b      	lsls	r3, r3, #2
 8003338:	fbb2 f3f3 	udiv	r3, r2, r3
 800333c:	4a22      	ldr	r2, [pc, #136]	@ (80033c8 <UART_SetConfig+0x118>)
 800333e:	fba2 2303 	umull	r2, r3, r2, r3
 8003342:	095b      	lsrs	r3, r3, #5
 8003344:	0119      	lsls	r1, r3, #4
 8003346:	68fa      	ldr	r2, [r7, #12]
 8003348:	4613      	mov	r3, r2
 800334a:	009b      	lsls	r3, r3, #2
 800334c:	4413      	add	r3, r2
 800334e:	009a      	lsls	r2, r3, #2
 8003350:	441a      	add	r2, r3
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	685b      	ldr	r3, [r3, #4]
 8003356:	009b      	lsls	r3, r3, #2
 8003358:	fbb2 f2f3 	udiv	r2, r2, r3
 800335c:	4b1a      	ldr	r3, [pc, #104]	@ (80033c8 <UART_SetConfig+0x118>)
 800335e:	fba3 0302 	umull	r0, r3, r3, r2
 8003362:	095b      	lsrs	r3, r3, #5
 8003364:	2064      	movs	r0, #100	@ 0x64
 8003366:	fb00 f303 	mul.w	r3, r0, r3
 800336a:	1ad3      	subs	r3, r2, r3
 800336c:	011b      	lsls	r3, r3, #4
 800336e:	3332      	adds	r3, #50	@ 0x32
 8003370:	4a15      	ldr	r2, [pc, #84]	@ (80033c8 <UART_SetConfig+0x118>)
 8003372:	fba2 2303 	umull	r2, r3, r2, r3
 8003376:	095b      	lsrs	r3, r3, #5
 8003378:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800337c:	4419      	add	r1, r3
 800337e:	68fa      	ldr	r2, [r7, #12]
 8003380:	4613      	mov	r3, r2
 8003382:	009b      	lsls	r3, r3, #2
 8003384:	4413      	add	r3, r2
 8003386:	009a      	lsls	r2, r3, #2
 8003388:	441a      	add	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	685b      	ldr	r3, [r3, #4]
 800338e:	009b      	lsls	r3, r3, #2
 8003390:	fbb2 f2f3 	udiv	r2, r2, r3
 8003394:	4b0c      	ldr	r3, [pc, #48]	@ (80033c8 <UART_SetConfig+0x118>)
 8003396:	fba3 0302 	umull	r0, r3, r3, r2
 800339a:	095b      	lsrs	r3, r3, #5
 800339c:	2064      	movs	r0, #100	@ 0x64
 800339e:	fb00 f303 	mul.w	r3, r0, r3
 80033a2:	1ad3      	subs	r3, r2, r3
 80033a4:	011b      	lsls	r3, r3, #4
 80033a6:	3332      	adds	r3, #50	@ 0x32
 80033a8:	4a07      	ldr	r2, [pc, #28]	@ (80033c8 <UART_SetConfig+0x118>)
 80033aa:	fba2 2303 	umull	r2, r3, r2, r3
 80033ae:	095b      	lsrs	r3, r3, #5
 80033b0:	f003 020f 	and.w	r2, r3, #15
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	440a      	add	r2, r1
 80033ba:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 80033bc:	bf00      	nop
 80033be:	3710      	adds	r7, #16
 80033c0:	46bd      	mov	sp, r7
 80033c2:	bd80      	pop	{r7, pc}
 80033c4:	40013800 	.word	0x40013800
 80033c8:	51eb851f 	.word	0x51eb851f

080033cc <memset>:
 80033cc:	4603      	mov	r3, r0
 80033ce:	4402      	add	r2, r0
 80033d0:	4293      	cmp	r3, r2
 80033d2:	d100      	bne.n	80033d6 <memset+0xa>
 80033d4:	4770      	bx	lr
 80033d6:	f803 1b01 	strb.w	r1, [r3], #1
 80033da:	e7f9      	b.n	80033d0 <memset+0x4>

080033dc <__libc_init_array>:
 80033dc:	b570      	push	{r4, r5, r6, lr}
 80033de:	2600      	movs	r6, #0
 80033e0:	4d0c      	ldr	r5, [pc, #48]	@ (8003414 <__libc_init_array+0x38>)
 80033e2:	4c0d      	ldr	r4, [pc, #52]	@ (8003418 <__libc_init_array+0x3c>)
 80033e4:	1b64      	subs	r4, r4, r5
 80033e6:	10a4      	asrs	r4, r4, #2
 80033e8:	42a6      	cmp	r6, r4
 80033ea:	d109      	bne.n	8003400 <__libc_init_array+0x24>
 80033ec:	f000 f81a 	bl	8003424 <_init>
 80033f0:	2600      	movs	r6, #0
 80033f2:	4d0a      	ldr	r5, [pc, #40]	@ (800341c <__libc_init_array+0x40>)
 80033f4:	4c0a      	ldr	r4, [pc, #40]	@ (8003420 <__libc_init_array+0x44>)
 80033f6:	1b64      	subs	r4, r4, r5
 80033f8:	10a4      	asrs	r4, r4, #2
 80033fa:	42a6      	cmp	r6, r4
 80033fc:	d105      	bne.n	800340a <__libc_init_array+0x2e>
 80033fe:	bd70      	pop	{r4, r5, r6, pc}
 8003400:	f855 3b04 	ldr.w	r3, [r5], #4
 8003404:	4798      	blx	r3
 8003406:	3601      	adds	r6, #1
 8003408:	e7ee      	b.n	80033e8 <__libc_init_array+0xc>
 800340a:	f855 3b04 	ldr.w	r3, [r5], #4
 800340e:	4798      	blx	r3
 8003410:	3601      	adds	r6, #1
 8003412:	e7f2      	b.n	80033fa <__libc_init_array+0x1e>
 8003414:	08003468 	.word	0x08003468
 8003418:	08003468 	.word	0x08003468
 800341c:	08003468 	.word	0x08003468
 8003420:	0800346c 	.word	0x0800346c

08003424 <_init>:
 8003424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003426:	bf00      	nop
 8003428:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800342a:	bc08      	pop	{r3}
 800342c:	469e      	mov	lr, r3
 800342e:	4770      	bx	lr

08003430 <_fini>:
 8003430:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003432:	bf00      	nop
 8003434:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003436:	bc08      	pop	{r3}
 8003438:	469e      	mov	lr, r3
 800343a:	4770      	bx	lr
